/*
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.voucherify.client.api;

import io.voucherify.client.ApiCallback;
import io.voucherify.client.ApiClient;
import io.voucherify.client.ApiException;
import io.voucherify.client.ApiResponse;
import io.voucherify.client.Configuration;
import io.voucherify.client.Pair;
import io.voucherify.client.ProgressRequestBody;
import io.voucherify.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.voucherify.client.model.CampaignsTransactionsExportCreateResponseBody;
import io.voucherify.client.model.LoyaltiesCreateCampaignRequestBody;
import io.voucherify.client.model.LoyaltiesCreateCampaignResponseBody;
import io.voucherify.client.model.LoyaltiesDeleteResponseBody;
import io.voucherify.client.model.LoyaltiesEarningRulesCreateRequestBodyItem;
import io.voucherify.client.model.LoyaltiesEarningRulesCreateResponseBody;
import io.voucherify.client.model.LoyaltiesEarningRulesDisableResponseBody;
import io.voucherify.client.model.LoyaltiesEarningRulesEnableResponseBody;
import io.voucherify.client.model.LoyaltiesEarningRulesGetResponseBody;
import io.voucherify.client.model.LoyaltiesEarningRulesListResponseBody;
import io.voucherify.client.model.LoyaltiesEarningRulesUpdateRequestBody;
import io.voucherify.client.model.LoyaltiesEarningRulesUpdateResponseBody;
import io.voucherify.client.model.LoyaltiesGetCampaignResponseBody;
import io.voucherify.client.model.LoyaltiesListCampaignsResponseBody;
import io.voucherify.client.model.LoyaltiesListMembersResponseBody;
import io.voucherify.client.model.LoyaltiesMemberActivityListResponseBody;
import io.voucherify.client.model.LoyaltiesMembersBalanceUpdateRequestBody;
import io.voucherify.client.model.LoyaltiesMembersBalanceUpdateResponseBody;
import io.voucherify.client.model.LoyaltiesMembersCreateRequestBody;
import io.voucherify.client.model.LoyaltiesMembersCreateResponseBody;
import io.voucherify.client.model.LoyaltiesMembersGetResponseBody;
import io.voucherify.client.model.LoyaltiesMembersPendingPointsActivateResponseBody;
import io.voucherify.client.model.LoyaltiesMembersPendingPointsBalanceRequestBody;
import io.voucherify.client.model.LoyaltiesMembersPendingPointsBalanceResponseBody;
import io.voucherify.client.model.LoyaltiesMembersPendingPointsListResponseBody;
import io.voucherify.client.model.LoyaltiesMembersPointsExpirationListResponseBody;
import io.voucherify.client.model.LoyaltiesMembersRedemptionRedeemRequestBody;
import io.voucherify.client.model.LoyaltiesMembersRedemptionRedeemResponseBody;
import io.voucherify.client.model.LoyaltiesMembersRewardsListResponseBody;
import io.voucherify.client.model.LoyaltiesMembersTiersListResponseBody;
import io.voucherify.client.model.LoyaltiesMembersTransactionsExportCreateRequestBody;
import io.voucherify.client.model.LoyaltiesMembersTransactionsExportCreateResponseBody;
import io.voucherify.client.model.LoyaltiesMembersTransactionsListResponseBody;
import io.voucherify.client.model.LoyaltiesMembersTransfersCreateResponseBody;
import io.voucherify.client.model.LoyaltiesPendingPointsListResponseBody;
import io.voucherify.client.model.LoyaltiesPointsExpirationExportCreateRequestBody;
import io.voucherify.client.model.LoyaltiesPointsExpirationExportCreateResponseBody;
import io.voucherify.client.model.LoyaltiesRewardAssignmentsGetResponseBody;
import io.voucherify.client.model.LoyaltiesRewardAssignmentsListResponseBody;
import io.voucherify.client.model.LoyaltiesRewardAssignmentsRewardGetResponseBody;
import io.voucherify.client.model.LoyaltiesRewardsCreateAssignmentItemRequestBody;
import io.voucherify.client.model.LoyaltiesRewardsCreateAssignmentResponseBody;
import io.voucherify.client.model.LoyaltiesRewardsGetResponseBody;
import io.voucherify.client.model.LoyaltiesRewardsListAssignmentsResponseBody;
import io.voucherify.client.model.LoyaltiesRewardsUpdateAssignmentRequestBody;
import io.voucherify.client.model.LoyaltiesRewardsUpdateAssignmentResponseBody;
import io.voucherify.client.model.LoyaltiesTiersCreateInBulkRequestBodyItem;
import io.voucherify.client.model.LoyaltiesTiersEarningRulesListResponseBody;
import io.voucherify.client.model.LoyaltiesTiersGetResponseBody;
import io.voucherify.client.model.LoyaltiesTiersListResponseBody;
import io.voucherify.client.model.LoyaltiesTiersRewardsListResponseBody;
import io.voucherify.client.model.LoyaltiesTransactionsExportCreateRequestBody;
import io.voucherify.client.model.LoyaltiesTransactionsListResponseBody;
import io.voucherify.client.model.LoyaltiesTransferPoints;
import io.voucherify.client.model.LoyaltiesUpdateCampaignRequestBody;
import io.voucherify.client.model.LoyaltiesUpdateCampaignResponseBody;
import io.voucherify.client.model.LoyaltyTier;
import io.voucherify.client.model.ParameterCreatedBeforeAfter;
import io.voucherify.client.model.ParameterExpandListCampaigns;
import io.voucherify.client.model.ParameterFiltersListMemberTransactions;
import io.voucherify.client.model.ParameterOrderCreatedAt;
import io.voucherify.client.model.ParameterOrderListCampaigns;
import io.voucherify.client.model.ParameterOrderListEarningRules;
import io.voucherify.client.model.ParameterOrderListLoyaltyTiers;
import io.voucherify.client.model.ParameterOrderListPendingPoints;
import io.voucherify.client.model.ParameterOrderListTransactions;
import io.voucherify.client.model.ParameterOrderVouchers;
import io.voucherify.client.model.ParameterUpdatedBeforeAfter;
import io.voucherify.client.model.ParametersFiltersListCampaignTransactions;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LoyaltiesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LoyaltiesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LoyaltiesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for activateMemberPendingPoints
     * @param memberId Unique loyalty card code assigned to a particular customer. (required)
     * @param pendingPointsId Unique pending point identifier, assigned by Voucherify. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call activateMemberPendingPointsCall(String memberId, String pendingPointsId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/members/{memberId}/pending-points/{pendingPointsId}/activate"
            .replace("{" + "memberId" + "}", localVarApiClient.escapeString(memberId.toString()))
            .replace("{" + "pendingPointsId" + "}", localVarApiClient.escapeString(pendingPointsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activateMemberPendingPointsValidateBeforeCall(String memberId, String pendingPointsId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling activateMemberPendingPoints(Async)");
        }

        // verify the required parameter 'pendingPointsId' is set
        if (pendingPointsId == null) {
            throw new ApiException("Missing the required parameter 'pendingPointsId' when calling activateMemberPendingPoints(Async)");
        }

        return activateMemberPendingPointsCall(memberId, pendingPointsId, _callback);

    }

    /**
     * Activate Member Pending Points
     * Activate manually the pending points and add them to the loyalty card. The pending points are determined by the pending point ID. Once activated, the pending point entry with that ID is not listed by the endpoints: List member (with campaign ID, without campaign ID), List campaign pending points. This **POST** method does not require a request body. 👍 Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
     * @param memberId Unique loyalty card code assigned to a particular customer. (required)
     * @param pendingPointsId Unique pending point identifier, assigned by Voucherify. (required)
     * @return LoyaltiesMembersPendingPointsActivateResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoyaltiesMembersPendingPointsActivateResponseBody activateMemberPendingPoints(String memberId, String pendingPointsId) throws ApiException {
        ApiResponse<LoyaltiesMembersPendingPointsActivateResponseBody> localVarResp = activateMemberPendingPointsWithHttpInfo(memberId, pendingPointsId);
        return localVarResp.getData();
    }

    /**
     * Activate Member Pending Points
     * Activate manually the pending points and add them to the loyalty card. The pending points are determined by the pending point ID. Once activated, the pending point entry with that ID is not listed by the endpoints: List member (with campaign ID, without campaign ID), List campaign pending points. This **POST** method does not require a request body. 👍 Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
     * @param memberId Unique loyalty card code assigned to a particular customer. (required)
     * @param pendingPointsId Unique pending point identifier, assigned by Voucherify. (required)
     * @return ApiResponse&lt;LoyaltiesMembersPendingPointsActivateResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoyaltiesMembersPendingPointsActivateResponseBody> activateMemberPendingPointsWithHttpInfo(String memberId, String pendingPointsId) throws ApiException {
        okhttp3.Call localVarCall = activateMemberPendingPointsValidateBeforeCall(memberId, pendingPointsId, null);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersPendingPointsActivateResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Activate Member Pending Points (asynchronously)
     * Activate manually the pending points and add them to the loyalty card. The pending points are determined by the pending point ID. Once activated, the pending point entry with that ID is not listed by the endpoints: List member (with campaign ID, without campaign ID), List campaign pending points. This **POST** method does not require a request body. 👍 Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
     * @param memberId Unique loyalty card code assigned to a particular customer. (required)
     * @param pendingPointsId Unique pending point identifier, assigned by Voucherify. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call activateMemberPendingPointsAsync(String memberId, String pendingPointsId, final ApiCallback<LoyaltiesMembersPendingPointsActivateResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = activateMemberPendingPointsValidateBeforeCall(memberId, pendingPointsId, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersPendingPointsActivateResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addMember
     * @param campaignId Unique campaign ID of the loyalty program. (required)
     * @param loyaltiesMembersCreateRequestBody Provide details to whom the loyalty card should be assigned.     You can choose to either specify the exact loyalty card code that you want to publish from existin (non-assigned) codes, or choose not to specify a voucher code. If you choose not to specify a code in the request paylaod, then the system will choose the next available voucher code available to be assigned to a customer.   You can also include metadata in the request payload. This metadata will be assigned to the publication object, but will not be returned in the response to this endpoint. To see of publications (assignments of particular codes to customers) and publication metadata, use the List Publications endpoint. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call addMemberCall(String campaignId, LoyaltiesMembersCreateRequestBody loyaltiesMembersCreateRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = loyaltiesMembersCreateRequestBody;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/members"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addMemberValidateBeforeCall(String campaignId, LoyaltiesMembersCreateRequestBody loyaltiesMembersCreateRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling addMember(Async)");
        }

        return addMemberCall(campaignId, loyaltiesMembersCreateRequestBody, _callback);

    }

    /**
     * Add Member
     * This method assigns a loyalty card to a customer. It selects a loyalty card suitable for publication, adds a publish entry, and returns the published voucher.   A voucher is suitable for publication when its active and hasnt been published yet.    📘 Auto-update campaign  In case you want to ensure the number of publishable codes increases automatically with the number of customers, you should use **auto-update** campaign.
     * @param campaignId Unique campaign ID of the loyalty program. (required)
     * @param loyaltiesMembersCreateRequestBody Provide details to whom the loyalty card should be assigned.     You can choose to either specify the exact loyalty card code that you want to publish from existin (non-assigned) codes, or choose not to specify a voucher code. If you choose not to specify a code in the request paylaod, then the system will choose the next available voucher code available to be assigned to a customer.   You can also include metadata in the request payload. This metadata will be assigned to the publication object, but will not be returned in the response to this endpoint. To see of publications (assignments of particular codes to customers) and publication metadata, use the List Publications endpoint. (optional)
     * @return LoyaltiesMembersCreateResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoyaltiesMembersCreateResponseBody addMember(String campaignId, LoyaltiesMembersCreateRequestBody loyaltiesMembersCreateRequestBody) throws ApiException {
        ApiResponse<LoyaltiesMembersCreateResponseBody> localVarResp = addMemberWithHttpInfo(campaignId, loyaltiesMembersCreateRequestBody);
        return localVarResp.getData();
    }

    /**
     * Add Member
     * This method assigns a loyalty card to a customer. It selects a loyalty card suitable for publication, adds a publish entry, and returns the published voucher.   A voucher is suitable for publication when its active and hasnt been published yet.    📘 Auto-update campaign  In case you want to ensure the number of publishable codes increases automatically with the number of customers, you should use **auto-update** campaign.
     * @param campaignId Unique campaign ID of the loyalty program. (required)
     * @param loyaltiesMembersCreateRequestBody Provide details to whom the loyalty card should be assigned.     You can choose to either specify the exact loyalty card code that you want to publish from existin (non-assigned) codes, or choose not to specify a voucher code. If you choose not to specify a code in the request paylaod, then the system will choose the next available voucher code available to be assigned to a customer.   You can also include metadata in the request payload. This metadata will be assigned to the publication object, but will not be returned in the response to this endpoint. To see of publications (assignments of particular codes to customers) and publication metadata, use the List Publications endpoint. (optional)
     * @return ApiResponse&lt;LoyaltiesMembersCreateResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoyaltiesMembersCreateResponseBody> addMemberWithHttpInfo(String campaignId, LoyaltiesMembersCreateRequestBody loyaltiesMembersCreateRequestBody) throws ApiException {
        okhttp3.Call localVarCall = addMemberValidateBeforeCall(campaignId, loyaltiesMembersCreateRequestBody, null);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersCreateResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Member (asynchronously)
     * This method assigns a loyalty card to a customer. It selects a loyalty card suitable for publication, adds a publish entry, and returns the published voucher.   A voucher is suitable for publication when its active and hasnt been published yet.    📘 Auto-update campaign  In case you want to ensure the number of publishable codes increases automatically with the number of customers, you should use **auto-update** campaign.
     * @param campaignId Unique campaign ID of the loyalty program. (required)
     * @param loyaltiesMembersCreateRequestBody Provide details to whom the loyalty card should be assigned.     You can choose to either specify the exact loyalty card code that you want to publish from existin (non-assigned) codes, or choose not to specify a voucher code. If you choose not to specify a code in the request paylaod, then the system will choose the next available voucher code available to be assigned to a customer.   You can also include metadata in the request payload. This metadata will be assigned to the publication object, but will not be returned in the response to this endpoint. To see of publications (assignments of particular codes to customers) and publication metadata, use the List Publications endpoint. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call addMemberAsync(String campaignId, LoyaltiesMembersCreateRequestBody loyaltiesMembersCreateRequestBody, final ApiCallback<LoyaltiesMembersCreateResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = addMemberValidateBeforeCall(campaignId, loyaltiesMembersCreateRequestBody, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersCreateResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adjustMemberPendingPoints
     * @param memberId Unique loyalty card code assigned to a particular customer. (required)
     * @param pendingPointsId Unique pending point identifier, assigned by Voucherify. (required)
     * @param loyaltiesMembersPendingPointsBalanceRequestBody Define the number of pending points to be added or subtracted. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call adjustMemberPendingPointsCall(String memberId, String pendingPointsId, LoyaltiesMembersPendingPointsBalanceRequestBody loyaltiesMembersPendingPointsBalanceRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = loyaltiesMembersPendingPointsBalanceRequestBody;

        // create path and map variables
        String localVarPath = "/v1/loyalties/members/{memberId}/pending-points/{pendingPointsId}/balance"
            .replace("{" + "memberId" + "}", localVarApiClient.escapeString(memberId.toString()))
            .replace("{" + "pendingPointsId" + "}", localVarApiClient.escapeString(pendingPointsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adjustMemberPendingPointsValidateBeforeCall(String memberId, String pendingPointsId, LoyaltiesMembersPendingPointsBalanceRequestBody loyaltiesMembersPendingPointsBalanceRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling adjustMemberPendingPoints(Async)");
        }

        // verify the required parameter 'pendingPointsId' is set
        if (pendingPointsId == null) {
            throw new ApiException("Missing the required parameter 'pendingPointsId' when calling adjustMemberPendingPoints(Async)");
        }

        return adjustMemberPendingPointsCall(memberId, pendingPointsId, loyaltiesMembersPendingPointsBalanceRequestBody, _callback);

    }

    /**
     * Adjust Member Pending Points
     * Adjusts the pending points with a given ID. You can add or subtract the number of points. 👍 Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
     * @param memberId Unique loyalty card code assigned to a particular customer. (required)
     * @param pendingPointsId Unique pending point identifier, assigned by Voucherify. (required)
     * @param loyaltiesMembersPendingPointsBalanceRequestBody Define the number of pending points to be added or subtracted. (optional)
     * @return LoyaltiesMembersPendingPointsBalanceResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoyaltiesMembersPendingPointsBalanceResponseBody adjustMemberPendingPoints(String memberId, String pendingPointsId, LoyaltiesMembersPendingPointsBalanceRequestBody loyaltiesMembersPendingPointsBalanceRequestBody) throws ApiException {
        ApiResponse<LoyaltiesMembersPendingPointsBalanceResponseBody> localVarResp = adjustMemberPendingPointsWithHttpInfo(memberId, pendingPointsId, loyaltiesMembersPendingPointsBalanceRequestBody);
        return localVarResp.getData();
    }

    /**
     * Adjust Member Pending Points
     * Adjusts the pending points with a given ID. You can add or subtract the number of points. 👍 Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
     * @param memberId Unique loyalty card code assigned to a particular customer. (required)
     * @param pendingPointsId Unique pending point identifier, assigned by Voucherify. (required)
     * @param loyaltiesMembersPendingPointsBalanceRequestBody Define the number of pending points to be added or subtracted. (optional)
     * @return ApiResponse&lt;LoyaltiesMembersPendingPointsBalanceResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoyaltiesMembersPendingPointsBalanceResponseBody> adjustMemberPendingPointsWithHttpInfo(String memberId, String pendingPointsId, LoyaltiesMembersPendingPointsBalanceRequestBody loyaltiesMembersPendingPointsBalanceRequestBody) throws ApiException {
        okhttp3.Call localVarCall = adjustMemberPendingPointsValidateBeforeCall(memberId, pendingPointsId, loyaltiesMembersPendingPointsBalanceRequestBody, null);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersPendingPointsBalanceResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adjust Member Pending Points (asynchronously)
     * Adjusts the pending points with a given ID. You can add or subtract the number of points. 👍 Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
     * @param memberId Unique loyalty card code assigned to a particular customer. (required)
     * @param pendingPointsId Unique pending point identifier, assigned by Voucherify. (required)
     * @param loyaltiesMembersPendingPointsBalanceRequestBody Define the number of pending points to be added or subtracted. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call adjustMemberPendingPointsAsync(String memberId, String pendingPointsId, LoyaltiesMembersPendingPointsBalanceRequestBody loyaltiesMembersPendingPointsBalanceRequestBody, final ApiCallback<LoyaltiesMembersPendingPointsBalanceResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = adjustMemberPendingPointsValidateBeforeCall(memberId, pendingPointsId, loyaltiesMembersPendingPointsBalanceRequestBody, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersPendingPointsBalanceResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cancelMemberPendingPoints
     * @param memberId Unique loyalty card code assigned to a particular customer. (required)
     * @param pendingPointsId Unique pending point identifier, assigned by Voucherify. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call cancelMemberPendingPointsCall(String memberId, String pendingPointsId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/members/{memberId}/pending-points/{pendingPointsId}/cancel"
            .replace("{" + "memberId" + "}", localVarApiClient.escapeString(memberId.toString()))
            .replace("{" + "pendingPointsId" + "}", localVarApiClient.escapeString(pendingPointsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelMemberPendingPointsValidateBeforeCall(String memberId, String pendingPointsId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling cancelMemberPendingPoints(Async)");
        }

        // verify the required parameter 'pendingPointsId' is set
        if (pendingPointsId == null) {
            throw new ApiException("Missing the required parameter 'pendingPointsId' when calling cancelMemberPendingPoints(Async)");
        }

        return cancelMemberPendingPointsCall(memberId, pendingPointsId, _callback);

    }

    /**
     * Cancel Member Pending Points
     * Cancel manually the pending points for the loyalty card. The pending points are determined by the pending point ID. Once canceled, the pending point entry with that ID is not listed by the endpoints: List member (with campaign ID, without campaign ID), List campaign pending points. This **POST** method does not require a request body and it returns an empty, 204, response. 👍 Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
     * @param memberId Unique loyalty card code assigned to a particular customer. (required)
     * @param pendingPointsId Unique pending point identifier, assigned by Voucherify. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void cancelMemberPendingPoints(String memberId, String pendingPointsId) throws ApiException {
        cancelMemberPendingPointsWithHttpInfo(memberId, pendingPointsId);
    }

    /**
     * Cancel Member Pending Points
     * Cancel manually the pending points for the loyalty card. The pending points are determined by the pending point ID. Once canceled, the pending point entry with that ID is not listed by the endpoints: List member (with campaign ID, without campaign ID), List campaign pending points. This **POST** method does not require a request body and it returns an empty, 204, response. 👍 Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
     * @param memberId Unique loyalty card code assigned to a particular customer. (required)
     * @param pendingPointsId Unique pending point identifier, assigned by Voucherify. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> cancelMemberPendingPointsWithHttpInfo(String memberId, String pendingPointsId) throws ApiException {
        okhttp3.Call localVarCall = cancelMemberPendingPointsValidateBeforeCall(memberId, pendingPointsId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cancel Member Pending Points (asynchronously)
     * Cancel manually the pending points for the loyalty card. The pending points are determined by the pending point ID. Once canceled, the pending point entry with that ID is not listed by the endpoints: List member (with campaign ID, without campaign ID), List campaign pending points. This **POST** method does not require a request body and it returns an empty, 204, response. 👍 Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
     * @param memberId Unique loyalty card code assigned to a particular customer. (required)
     * @param pendingPointsId Unique pending point identifier, assigned by Voucherify. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call cancelMemberPendingPointsAsync(String memberId, String pendingPointsId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelMemberPendingPointsValidateBeforeCall(memberId, pendingPointsId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createEarningRule
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param loyaltiesEarningRulesCreateRequestBodyItem Customize the request body based on the type of earning rules you would like to create. The request body is an array of objects. The required minimum properties to include in the payload for each object are event and loyalty. Additionally, if you choose to add a validity_timeframe, you must include a start_date. Furthermore, an earning rule event type:   - customer.segment.entered requires a segment object - a custom event requires a custom_event object - a customer.loyalty.tier.joined, customer.loyalty.tier.left, customer.loyalty.tier.upgraded, customer.loyalty.tier.downgraded, customer.loyalty.tier.prolonged requires a loyalty_tier object (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call createEarningRuleCall(String campaignId, List<LoyaltiesEarningRulesCreateRequestBodyItem> loyaltiesEarningRulesCreateRequestBodyItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = loyaltiesEarningRulesCreateRequestBodyItem;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/earning-rules"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEarningRuleValidateBeforeCall(String campaignId, List<LoyaltiesEarningRulesCreateRequestBodyItem> loyaltiesEarningRulesCreateRequestBodyItem, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling createEarningRule(Async)");
        }

        return createEarningRuleCall(campaignId, loyaltiesEarningRulesCreateRequestBodyItem, _callback);

    }

    /**
     * Create Earning Rule
     * Create earning rules for a loyalty campaign.  🚧 Maximum number of earning rules  You can create up to 100 earning rules per project. The limit can be customized for clients with a single-tenant setup.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param loyaltiesEarningRulesCreateRequestBodyItem Customize the request body based on the type of earning rules you would like to create. The request body is an array of objects. The required minimum properties to include in the payload for each object are event and loyalty. Additionally, if you choose to add a validity_timeframe, you must include a start_date. Furthermore, an earning rule event type:   - customer.segment.entered requires a segment object - a custom event requires a custom_event object - a customer.loyalty.tier.joined, customer.loyalty.tier.left, customer.loyalty.tier.upgraded, customer.loyalty.tier.downgraded, customer.loyalty.tier.prolonged requires a loyalty_tier object (optional)
     * @return List&lt;LoyaltiesEarningRulesCreateResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<LoyaltiesEarningRulesCreateResponseBody> createEarningRule(String campaignId, List<LoyaltiesEarningRulesCreateRequestBodyItem> loyaltiesEarningRulesCreateRequestBodyItem) throws ApiException {
        ApiResponse<List<LoyaltiesEarningRulesCreateResponseBody>> localVarResp = createEarningRuleWithHttpInfo(campaignId, loyaltiesEarningRulesCreateRequestBodyItem);
        return localVarResp.getData();
    }

    /**
     * Create Earning Rule
     * Create earning rules for a loyalty campaign.  🚧 Maximum number of earning rules  You can create up to 100 earning rules per project. The limit can be customized for clients with a single-tenant setup.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param loyaltiesEarningRulesCreateRequestBodyItem Customize the request body based on the type of earning rules you would like to create. The request body is an array of objects. The required minimum properties to include in the payload for each object are event and loyalty. Additionally, if you choose to add a validity_timeframe, you must include a start_date. Furthermore, an earning rule event type:   - customer.segment.entered requires a segment object - a custom event requires a custom_event object - a customer.loyalty.tier.joined, customer.loyalty.tier.left, customer.loyalty.tier.upgraded, customer.loyalty.tier.downgraded, customer.loyalty.tier.prolonged requires a loyalty_tier object (optional)
     * @return ApiResponse&lt;List&lt;LoyaltiesEarningRulesCreateResponseBody&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<LoyaltiesEarningRulesCreateResponseBody>> createEarningRuleWithHttpInfo(String campaignId, List<LoyaltiesEarningRulesCreateRequestBodyItem> loyaltiesEarningRulesCreateRequestBodyItem) throws ApiException {
        okhttp3.Call localVarCall = createEarningRuleValidateBeforeCall(campaignId, loyaltiesEarningRulesCreateRequestBodyItem, null);
        Type localVarReturnType = new TypeToken<List<LoyaltiesEarningRulesCreateResponseBody>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Earning Rule (asynchronously)
     * Create earning rules for a loyalty campaign.  🚧 Maximum number of earning rules  You can create up to 100 earning rules per project. The limit can be customized for clients with a single-tenant setup.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param loyaltiesEarningRulesCreateRequestBodyItem Customize the request body based on the type of earning rules you would like to create. The request body is an array of objects. The required minimum properties to include in the payload for each object are event and loyalty. Additionally, if you choose to add a validity_timeframe, you must include a start_date. Furthermore, an earning rule event type:   - customer.segment.entered requires a segment object - a custom event requires a custom_event object - a customer.loyalty.tier.joined, customer.loyalty.tier.left, customer.loyalty.tier.upgraded, customer.loyalty.tier.downgraded, customer.loyalty.tier.prolonged requires a loyalty_tier object (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call createEarningRuleAsync(String campaignId, List<LoyaltiesEarningRulesCreateRequestBodyItem> loyaltiesEarningRulesCreateRequestBodyItem, final ApiCallback<List<LoyaltiesEarningRulesCreateResponseBody>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEarningRuleValidateBeforeCall(campaignId, loyaltiesEarningRulesCreateRequestBodyItem, _callback);
        Type localVarReturnType = new TypeToken<List<LoyaltiesEarningRulesCreateResponseBody>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createInBulkLoyaltyTiers
     * @param campaignId Unique loyalty campaign ID or name. (required)
     * @param loyaltiesTiersCreateInBulkRequestBodyItem Provide tier definitions you want to add to existing loyalty campaign. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call createInBulkLoyaltyTiersCall(String campaignId, List<LoyaltiesTiersCreateInBulkRequestBodyItem> loyaltiesTiersCreateInBulkRequestBodyItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = loyaltiesTiersCreateInBulkRequestBodyItem;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/tiers"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createInBulkLoyaltyTiersValidateBeforeCall(String campaignId, List<LoyaltiesTiersCreateInBulkRequestBodyItem> loyaltiesTiersCreateInBulkRequestBodyItem, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling createInBulkLoyaltyTiers(Async)");
        }

        return createInBulkLoyaltyTiersCall(campaignId, loyaltiesTiersCreateInBulkRequestBodyItem, _callback);

    }

    /**
     * Create loyalty tiers
     * Creates loyalty tiers for desired campaign.
     * @param campaignId Unique loyalty campaign ID or name. (required)
     * @param loyaltiesTiersCreateInBulkRequestBodyItem Provide tier definitions you want to add to existing loyalty campaign. (optional)
     * @return List&lt;LoyaltyTier&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<LoyaltyTier> createInBulkLoyaltyTiers(String campaignId, List<LoyaltiesTiersCreateInBulkRequestBodyItem> loyaltiesTiersCreateInBulkRequestBodyItem) throws ApiException {
        ApiResponse<List<LoyaltyTier>> localVarResp = createInBulkLoyaltyTiersWithHttpInfo(campaignId, loyaltiesTiersCreateInBulkRequestBodyItem);
        return localVarResp.getData();
    }

    /**
     * Create loyalty tiers
     * Creates loyalty tiers for desired campaign.
     * @param campaignId Unique loyalty campaign ID or name. (required)
     * @param loyaltiesTiersCreateInBulkRequestBodyItem Provide tier definitions you want to add to existing loyalty campaign. (optional)
     * @return ApiResponse&lt;List&lt;LoyaltyTier&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<LoyaltyTier>> createInBulkLoyaltyTiersWithHttpInfo(String campaignId, List<LoyaltiesTiersCreateInBulkRequestBodyItem> loyaltiesTiersCreateInBulkRequestBodyItem) throws ApiException {
        okhttp3.Call localVarCall = createInBulkLoyaltyTiersValidateBeforeCall(campaignId, loyaltiesTiersCreateInBulkRequestBodyItem, null);
        Type localVarReturnType = new TypeToken<List<LoyaltyTier>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create loyalty tiers (asynchronously)
     * Creates loyalty tiers for desired campaign.
     * @param campaignId Unique loyalty campaign ID or name. (required)
     * @param loyaltiesTiersCreateInBulkRequestBodyItem Provide tier definitions you want to add to existing loyalty campaign. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call createInBulkLoyaltyTiersAsync(String campaignId, List<LoyaltiesTiersCreateInBulkRequestBodyItem> loyaltiesTiersCreateInBulkRequestBodyItem, final ApiCallback<List<LoyaltyTier>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createInBulkLoyaltyTiersValidateBeforeCall(campaignId, loyaltiesTiersCreateInBulkRequestBodyItem, _callback);
        Type localVarReturnType = new TypeToken<List<LoyaltyTier>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createLoyaltyProgram
     * @param loyaltiesCreateCampaignRequestBody Specify the loyalty campaign details. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call createLoyaltyProgramCall(LoyaltiesCreateCampaignRequestBody loyaltiesCreateCampaignRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = loyaltiesCreateCampaignRequestBody;

        // create path and map variables
        String localVarPath = "/v1/loyalties";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLoyaltyProgramValidateBeforeCall(LoyaltiesCreateCampaignRequestBody loyaltiesCreateCampaignRequestBody, final ApiCallback _callback) throws ApiException {
        return createLoyaltyProgramCall(loyaltiesCreateCampaignRequestBody, _callback);

    }

    /**
     * Create Loyalty Campaign
     * Creates a batch of loyalty cards aggregated in a single loyalty campaign. It also allows you to define a custom codes pattern.    📘 Global uniqueness  All codes are unique across the whole project. Voucherify wont allow to generate the same codes in any of your campaigns.  🚧 Asynchronous action!  This is an asynchronous action, you cant read or modify a newly created campaign until the code generation is completed. See creation_status field in the loyalty campaign object description.
     * @param loyaltiesCreateCampaignRequestBody Specify the loyalty campaign details. (optional)
     * @return LoyaltiesCreateCampaignResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoyaltiesCreateCampaignResponseBody createLoyaltyProgram(LoyaltiesCreateCampaignRequestBody loyaltiesCreateCampaignRequestBody) throws ApiException {
        ApiResponse<LoyaltiesCreateCampaignResponseBody> localVarResp = createLoyaltyProgramWithHttpInfo(loyaltiesCreateCampaignRequestBody);
        return localVarResp.getData();
    }

    /**
     * Create Loyalty Campaign
     * Creates a batch of loyalty cards aggregated in a single loyalty campaign. It also allows you to define a custom codes pattern.    📘 Global uniqueness  All codes are unique across the whole project. Voucherify wont allow to generate the same codes in any of your campaigns.  🚧 Asynchronous action!  This is an asynchronous action, you cant read or modify a newly created campaign until the code generation is completed. See creation_status field in the loyalty campaign object description.
     * @param loyaltiesCreateCampaignRequestBody Specify the loyalty campaign details. (optional)
     * @return ApiResponse&lt;LoyaltiesCreateCampaignResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoyaltiesCreateCampaignResponseBody> createLoyaltyProgramWithHttpInfo(LoyaltiesCreateCampaignRequestBody loyaltiesCreateCampaignRequestBody) throws ApiException {
        okhttp3.Call localVarCall = createLoyaltyProgramValidateBeforeCall(loyaltiesCreateCampaignRequestBody, null);
        Type localVarReturnType = new TypeToken<LoyaltiesCreateCampaignResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Loyalty Campaign (asynchronously)
     * Creates a batch of loyalty cards aggregated in a single loyalty campaign. It also allows you to define a custom codes pattern.    📘 Global uniqueness  All codes are unique across the whole project. Voucherify wont allow to generate the same codes in any of your campaigns.  🚧 Asynchronous action!  This is an asynchronous action, you cant read or modify a newly created campaign until the code generation is completed. See creation_status field in the loyalty campaign object description.
     * @param loyaltiesCreateCampaignRequestBody Specify the loyalty campaign details. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call createLoyaltyProgramAsync(LoyaltiesCreateCampaignRequestBody loyaltiesCreateCampaignRequestBody, final ApiCallback<LoyaltiesCreateCampaignResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLoyaltyProgramValidateBeforeCall(loyaltiesCreateCampaignRequestBody, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesCreateCampaignResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPointsExpirationExport
     * @param campaignId Unique campaign ID or name. (required)
     * @param loyaltiesPointsExpirationExportCreateRequestBody Specify the data filters, types of data to return and order in which the results should be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call createPointsExpirationExportCall(String campaignId, LoyaltiesPointsExpirationExportCreateRequestBody loyaltiesPointsExpirationExportCreateRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = loyaltiesPointsExpirationExportCreateRequestBody;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/points-expiration/export"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPointsExpirationExportValidateBeforeCall(String campaignId, LoyaltiesPointsExpirationExportCreateRequestBody loyaltiesPointsExpirationExportCreateRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling createPointsExpirationExport(Async)");
        }

        return createPointsExpirationExportCall(campaignId, loyaltiesPointsExpirationExportCreateRequestBody, _callback);

    }

    /**
     * Export Loyalty Campaign Point Expiration
     * Schedule the generation of a point expiration CSV file for a particular campaign. It can list point buckets, which can have an ACTIVE or EXPIRED status.
     * @param campaignId Unique campaign ID or name. (required)
     * @param loyaltiesPointsExpirationExportCreateRequestBody Specify the data filters, types of data to return and order in which the results should be returned. (optional)
     * @return LoyaltiesPointsExpirationExportCreateResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoyaltiesPointsExpirationExportCreateResponseBody createPointsExpirationExport(String campaignId, LoyaltiesPointsExpirationExportCreateRequestBody loyaltiesPointsExpirationExportCreateRequestBody) throws ApiException {
        ApiResponse<LoyaltiesPointsExpirationExportCreateResponseBody> localVarResp = createPointsExpirationExportWithHttpInfo(campaignId, loyaltiesPointsExpirationExportCreateRequestBody);
        return localVarResp.getData();
    }

    /**
     * Export Loyalty Campaign Point Expiration
     * Schedule the generation of a point expiration CSV file for a particular campaign. It can list point buckets, which can have an ACTIVE or EXPIRED status.
     * @param campaignId Unique campaign ID or name. (required)
     * @param loyaltiesPointsExpirationExportCreateRequestBody Specify the data filters, types of data to return and order in which the results should be returned. (optional)
     * @return ApiResponse&lt;LoyaltiesPointsExpirationExportCreateResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoyaltiesPointsExpirationExportCreateResponseBody> createPointsExpirationExportWithHttpInfo(String campaignId, LoyaltiesPointsExpirationExportCreateRequestBody loyaltiesPointsExpirationExportCreateRequestBody) throws ApiException {
        okhttp3.Call localVarCall = createPointsExpirationExportValidateBeforeCall(campaignId, loyaltiesPointsExpirationExportCreateRequestBody, null);
        Type localVarReturnType = new TypeToken<LoyaltiesPointsExpirationExportCreateResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Export Loyalty Campaign Point Expiration (asynchronously)
     * Schedule the generation of a point expiration CSV file for a particular campaign. It can list point buckets, which can have an ACTIVE or EXPIRED status.
     * @param campaignId Unique campaign ID or name. (required)
     * @param loyaltiesPointsExpirationExportCreateRequestBody Specify the data filters, types of data to return and order in which the results should be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call createPointsExpirationExportAsync(String campaignId, LoyaltiesPointsExpirationExportCreateRequestBody loyaltiesPointsExpirationExportCreateRequestBody, final ApiCallback<LoyaltiesPointsExpirationExportCreateResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPointsExpirationExportValidateBeforeCall(campaignId, loyaltiesPointsExpirationExportCreateRequestBody, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesPointsExpirationExportCreateResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createRewardAssignment1
     * @param campaignId Unique campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param loyaltiesRewardsCreateAssignmentItemRequestBody Define the cost of the rewards in loyalty points. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call createRewardAssignment1Call(String campaignId, List<LoyaltiesRewardsCreateAssignmentItemRequestBody> loyaltiesRewardsCreateAssignmentItemRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = loyaltiesRewardsCreateAssignmentItemRequestBody;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/rewards"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRewardAssignment1ValidateBeforeCall(String campaignId, List<LoyaltiesRewardsCreateAssignmentItemRequestBody> loyaltiesRewardsCreateAssignmentItemRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling createRewardAssignment1(Async)");
        }

        return createRewardAssignment1Call(campaignId, loyaltiesRewardsCreateAssignmentItemRequestBody, _callback);

    }

    /**
     * Create Reward Assignment
     * Add rewards to a loyalty campaign.
     * @param campaignId Unique campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param loyaltiesRewardsCreateAssignmentItemRequestBody Define the cost of the rewards in loyalty points. (optional)
     * @return LoyaltiesRewardsCreateAssignmentResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoyaltiesRewardsCreateAssignmentResponseBody createRewardAssignment1(String campaignId, List<LoyaltiesRewardsCreateAssignmentItemRequestBody> loyaltiesRewardsCreateAssignmentItemRequestBody) throws ApiException {
        ApiResponse<LoyaltiesRewardsCreateAssignmentResponseBody> localVarResp = createRewardAssignment1WithHttpInfo(campaignId, loyaltiesRewardsCreateAssignmentItemRequestBody);
        return localVarResp.getData();
    }

    /**
     * Create Reward Assignment
     * Add rewards to a loyalty campaign.
     * @param campaignId Unique campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param loyaltiesRewardsCreateAssignmentItemRequestBody Define the cost of the rewards in loyalty points. (optional)
     * @return ApiResponse&lt;LoyaltiesRewardsCreateAssignmentResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoyaltiesRewardsCreateAssignmentResponseBody> createRewardAssignment1WithHttpInfo(String campaignId, List<LoyaltiesRewardsCreateAssignmentItemRequestBody> loyaltiesRewardsCreateAssignmentItemRequestBody) throws ApiException {
        okhttp3.Call localVarCall = createRewardAssignment1ValidateBeforeCall(campaignId, loyaltiesRewardsCreateAssignmentItemRequestBody, null);
        Type localVarReturnType = new TypeToken<LoyaltiesRewardsCreateAssignmentResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Reward Assignment (asynchronously)
     * Add rewards to a loyalty campaign.
     * @param campaignId Unique campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param loyaltiesRewardsCreateAssignmentItemRequestBody Define the cost of the rewards in loyalty points. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call createRewardAssignment1Async(String campaignId, List<LoyaltiesRewardsCreateAssignmentItemRequestBody> loyaltiesRewardsCreateAssignmentItemRequestBody, final ApiCallback<LoyaltiesRewardsCreateAssignmentResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRewardAssignment1ValidateBeforeCall(campaignId, loyaltiesRewardsCreateAssignmentItemRequestBody, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesRewardsCreateAssignmentResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteEarningRule
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param earningRuleId A unique earning rule ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call deleteEarningRuleCall(String campaignId, String earningRuleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/earning-rules/{earningRuleId}"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "earningRuleId" + "}", localVarApiClient.escapeString(earningRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEarningRuleValidateBeforeCall(String campaignId, String earningRuleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling deleteEarningRule(Async)");
        }

        // verify the required parameter 'earningRuleId' is set
        if (earningRuleId == null) {
            throw new ApiException("Missing the required parameter 'earningRuleId' when calling deleteEarningRule(Async)");
        }

        return deleteEarningRuleCall(campaignId, earningRuleId, _callback);

    }

    /**
     * Delete Earning Rule
     * This method deletes an earning rule for a specific loyalty campaign.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param earningRuleId A unique earning rule ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteEarningRule(String campaignId, String earningRuleId) throws ApiException {
        deleteEarningRuleWithHttpInfo(campaignId, earningRuleId);
    }

    /**
     * Delete Earning Rule
     * This method deletes an earning rule for a specific loyalty campaign.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param earningRuleId A unique earning rule ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteEarningRuleWithHttpInfo(String campaignId, String earningRuleId) throws ApiException {
        okhttp3.Call localVarCall = deleteEarningRuleValidateBeforeCall(campaignId, earningRuleId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Earning Rule (asynchronously)
     * This method deletes an earning rule for a specific loyalty campaign.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param earningRuleId A unique earning rule ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call deleteEarningRuleAsync(String campaignId, String earningRuleId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEarningRuleValidateBeforeCall(campaignId, earningRuleId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteLoyaltyProgram
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param force If this flag is set to true, the campaign and related vouchers will be removed permanently. If it is set to false or not set at all, the loyalty campaign and all related loyalty cards will be moved to the bin. Going forward, the user will be able to create the next campaign with the same name. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call deleteLoyaltyProgramCall(String campaignId, Boolean force, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteLoyaltyProgramValidateBeforeCall(String campaignId, Boolean force, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling deleteLoyaltyProgram(Async)");
        }

        return deleteLoyaltyProgramCall(campaignId, force, _callback);

    }

    /**
     * Delete Loyalty Campaign
     * Deletes a loyalty campaign and all related loyalty cards. This action cannot be undone. Also, it immediately removes any redemptions on loyalty cards. If the force parameter is set to false or not set at all, the loyalty campaign and all related loyalty cards will be moved to the bin.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param force If this flag is set to true, the campaign and related vouchers will be removed permanently. If it is set to false or not set at all, the loyalty campaign and all related loyalty cards will be moved to the bin. Going forward, the user will be able to create the next campaign with the same name. (optional)
     * @return LoyaltiesDeleteResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoyaltiesDeleteResponseBody deleteLoyaltyProgram(String campaignId, Boolean force) throws ApiException {
        ApiResponse<LoyaltiesDeleteResponseBody> localVarResp = deleteLoyaltyProgramWithHttpInfo(campaignId, force);
        return localVarResp.getData();
    }

    /**
     * Delete Loyalty Campaign
     * Deletes a loyalty campaign and all related loyalty cards. This action cannot be undone. Also, it immediately removes any redemptions on loyalty cards. If the force parameter is set to false or not set at all, the loyalty campaign and all related loyalty cards will be moved to the bin.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param force If this flag is set to true, the campaign and related vouchers will be removed permanently. If it is set to false or not set at all, the loyalty campaign and all related loyalty cards will be moved to the bin. Going forward, the user will be able to create the next campaign with the same name. (optional)
     * @return ApiResponse&lt;LoyaltiesDeleteResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoyaltiesDeleteResponseBody> deleteLoyaltyProgramWithHttpInfo(String campaignId, Boolean force) throws ApiException {
        okhttp3.Call localVarCall = deleteLoyaltyProgramValidateBeforeCall(campaignId, force, null);
        Type localVarReturnType = new TypeToken<LoyaltiesDeleteResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Loyalty Campaign (asynchronously)
     * Deletes a loyalty campaign and all related loyalty cards. This action cannot be undone. Also, it immediately removes any redemptions on loyalty cards. If the force parameter is set to false or not set at all, the loyalty campaign and all related loyalty cards will be moved to the bin.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param force If this flag is set to true, the campaign and related vouchers will be removed permanently. If it is set to false or not set at all, the loyalty campaign and all related loyalty cards will be moved to the bin. Going forward, the user will be able to create the next campaign with the same name. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call deleteLoyaltyProgramAsync(String campaignId, Boolean force, final ApiCallback<LoyaltiesDeleteResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteLoyaltyProgramValidateBeforeCall(campaignId, force, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesDeleteResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRewardAssignment1
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param assignmentId A unique reward assignment ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call deleteRewardAssignment1Call(String campaignId, String assignmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/rewards/{assignmentId}"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "assignmentId" + "}", localVarApiClient.escapeString(assignmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRewardAssignment1ValidateBeforeCall(String campaignId, String assignmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling deleteRewardAssignment1(Async)");
        }

        // verify the required parameter 'assignmentId' is set
        if (assignmentId == null) {
            throw new ApiException("Missing the required parameter 'assignmentId' when calling deleteRewardAssignment1(Async)");
        }

        return deleteRewardAssignment1Call(campaignId, assignmentId, _callback);

    }

    /**
     * Delete Reward Assignment
     * This method deletes a reward assignment for a particular loyalty campaign.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param assignmentId A unique reward assignment ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteRewardAssignment1(String campaignId, String assignmentId) throws ApiException {
        deleteRewardAssignment1WithHttpInfo(campaignId, assignmentId);
    }

    /**
     * Delete Reward Assignment
     * This method deletes a reward assignment for a particular loyalty campaign.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param assignmentId A unique reward assignment ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteRewardAssignment1WithHttpInfo(String campaignId, String assignmentId) throws ApiException {
        okhttp3.Call localVarCall = deleteRewardAssignment1ValidateBeforeCall(campaignId, assignmentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Reward Assignment (asynchronously)
     * This method deletes a reward assignment for a particular loyalty campaign.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param assignmentId A unique reward assignment ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call deleteRewardAssignment1Async(String campaignId, String assignmentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRewardAssignment1ValidateBeforeCall(campaignId, assignmentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for disableEarningRule
     * @param campaignId Unique campaign ID or name. (required)
     * @param earningRuleId Unique identifier of an earning rule, assigned by Voucherify. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call disableEarningRuleCall(String campaignId, String earningRuleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/earning-rules/{earningRuleId}/disable"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "earningRuleId" + "}", localVarApiClient.escapeString(earningRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disableEarningRuleValidateBeforeCall(String campaignId, String earningRuleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling disableEarningRule(Async)");
        }

        // verify the required parameter 'earningRuleId' is set
        if (earningRuleId == null) {
            throw new ApiException("Missing the required parameter 'earningRuleId' when calling disableEarningRule(Async)");
        }

        return disableEarningRuleCall(campaignId, earningRuleId, _callback);

    }

    /**
     * Disable Earning Rule
     * Disable an earning rule.
     * @param campaignId Unique campaign ID or name. (required)
     * @param earningRuleId Unique identifier of an earning rule, assigned by Voucherify. (required)
     * @return LoyaltiesEarningRulesDisableResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoyaltiesEarningRulesDisableResponseBody disableEarningRule(String campaignId, String earningRuleId) throws ApiException {
        ApiResponse<LoyaltiesEarningRulesDisableResponseBody> localVarResp = disableEarningRuleWithHttpInfo(campaignId, earningRuleId);
        return localVarResp.getData();
    }

    /**
     * Disable Earning Rule
     * Disable an earning rule.
     * @param campaignId Unique campaign ID or name. (required)
     * @param earningRuleId Unique identifier of an earning rule, assigned by Voucherify. (required)
     * @return ApiResponse&lt;LoyaltiesEarningRulesDisableResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoyaltiesEarningRulesDisableResponseBody> disableEarningRuleWithHttpInfo(String campaignId, String earningRuleId) throws ApiException {
        okhttp3.Call localVarCall = disableEarningRuleValidateBeforeCall(campaignId, earningRuleId, null);
        Type localVarReturnType = new TypeToken<LoyaltiesEarningRulesDisableResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Disable Earning Rule (asynchronously)
     * Disable an earning rule.
     * @param campaignId Unique campaign ID or name. (required)
     * @param earningRuleId Unique identifier of an earning rule, assigned by Voucherify. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call disableEarningRuleAsync(String campaignId, String earningRuleId, final ApiCallback<LoyaltiesEarningRulesDisableResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = disableEarningRuleValidateBeforeCall(campaignId, earningRuleId, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesEarningRulesDisableResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enableEarningRule
     * @param campaignId Unique campaign ID or name. (required)
     * @param earningRuleId Unique identifier of an earning rule, assigned by Voucherify. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call enableEarningRuleCall(String campaignId, String earningRuleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/earning-rules/{earningRuleId}/enable"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "earningRuleId" + "}", localVarApiClient.escapeString(earningRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enableEarningRuleValidateBeforeCall(String campaignId, String earningRuleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling enableEarningRule(Async)");
        }

        // verify the required parameter 'earningRuleId' is set
        if (earningRuleId == null) {
            throw new ApiException("Missing the required parameter 'earningRuleId' when calling enableEarningRule(Async)");
        }

        return enableEarningRuleCall(campaignId, earningRuleId, _callback);

    }

    /**
     * Enable Earning Rule
     * Enable an earning rule.
     * @param campaignId Unique campaign ID or name. (required)
     * @param earningRuleId Unique identifier of an earning rule, assigned by Voucherify. (required)
     * @return LoyaltiesEarningRulesEnableResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoyaltiesEarningRulesEnableResponseBody enableEarningRule(String campaignId, String earningRuleId) throws ApiException {
        ApiResponse<LoyaltiesEarningRulesEnableResponseBody> localVarResp = enableEarningRuleWithHttpInfo(campaignId, earningRuleId);
        return localVarResp.getData();
    }

    /**
     * Enable Earning Rule
     * Enable an earning rule.
     * @param campaignId Unique campaign ID or name. (required)
     * @param earningRuleId Unique identifier of an earning rule, assigned by Voucherify. (required)
     * @return ApiResponse&lt;LoyaltiesEarningRulesEnableResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoyaltiesEarningRulesEnableResponseBody> enableEarningRuleWithHttpInfo(String campaignId, String earningRuleId) throws ApiException {
        okhttp3.Call localVarCall = enableEarningRuleValidateBeforeCall(campaignId, earningRuleId, null);
        Type localVarReturnType = new TypeToken<LoyaltiesEarningRulesEnableResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Enable Earning Rule (asynchronously)
     * Enable an earning rule.
     * @param campaignId Unique campaign ID or name. (required)
     * @param earningRuleId Unique identifier of an earning rule, assigned by Voucherify. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call enableEarningRuleAsync(String campaignId, String earningRuleId, final ApiCallback<LoyaltiesEarningRulesEnableResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = enableEarningRuleValidateBeforeCall(campaignId, earningRuleId, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesEarningRulesEnableResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportLoyaltyCampaignTransactions
     * @param campaignId You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value. (required)
     * @param loyaltiesTransactionsExportCreateRequestBody Specify the parameters for the transaction export. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call exportLoyaltyCampaignTransactionsCall(String campaignId, LoyaltiesTransactionsExportCreateRequestBody loyaltiesTransactionsExportCreateRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = loyaltiesTransactionsExportCreateRequestBody;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/transactions/export"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportLoyaltyCampaignTransactionsValidateBeforeCall(String campaignId, LoyaltiesTransactionsExportCreateRequestBody loyaltiesTransactionsExportCreateRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling exportLoyaltyCampaignTransactions(Async)");
        }

        return exportLoyaltyCampaignTransactionsCall(campaignId, loyaltiesTransactionsExportCreateRequestBody, _callback);

    }

    /**
     * Export Loyalty Campaign Transactions
     * Export transactions is an asynchronous process that generates a CSV file with the data about or point movements on all loyalty cards in a given campaign. To export transactions: 1. In the export request, use parameters to select which fields will be exported, in what order, and which data will be filtered. 2. Use the returned id to track the export status with the GET Export method. 3. In the GET Export method, when the returned status field has the DONE value, the export file has been generated. 4. Use the URL in the result property to download the file. You must be logged to your Voucherify account on a given cluster in the browser to be able to download the file. An export request will almost always result in a single file being generated by the system. However, when the data volume is large, the system may split the results into multiple files. An example export file can look as follows:    👍 Export Campaign Transactions  This method works in the same way the POST Export Campaign Transactions does, but it is limited to loyalty campaigns only. The POST Export Campaign Transactions method can also export gift card campaign transactions.
     * @param campaignId You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value. (required)
     * @param loyaltiesTransactionsExportCreateRequestBody Specify the parameters for the transaction export. (optional)
     * @return CampaignsTransactionsExportCreateResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CampaignsTransactionsExportCreateResponseBody exportLoyaltyCampaignTransactions(String campaignId, LoyaltiesTransactionsExportCreateRequestBody loyaltiesTransactionsExportCreateRequestBody) throws ApiException {
        ApiResponse<CampaignsTransactionsExportCreateResponseBody> localVarResp = exportLoyaltyCampaignTransactionsWithHttpInfo(campaignId, loyaltiesTransactionsExportCreateRequestBody);
        return localVarResp.getData();
    }

    /**
     * Export Loyalty Campaign Transactions
     * Export transactions is an asynchronous process that generates a CSV file with the data about or point movements on all loyalty cards in a given campaign. To export transactions: 1. In the export request, use parameters to select which fields will be exported, in what order, and which data will be filtered. 2. Use the returned id to track the export status with the GET Export method. 3. In the GET Export method, when the returned status field has the DONE value, the export file has been generated. 4. Use the URL in the result property to download the file. You must be logged to your Voucherify account on a given cluster in the browser to be able to download the file. An export request will almost always result in a single file being generated by the system. However, when the data volume is large, the system may split the results into multiple files. An example export file can look as follows:    👍 Export Campaign Transactions  This method works in the same way the POST Export Campaign Transactions does, but it is limited to loyalty campaigns only. The POST Export Campaign Transactions method can also export gift card campaign transactions.
     * @param campaignId You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value. (required)
     * @param loyaltiesTransactionsExportCreateRequestBody Specify the parameters for the transaction export. (optional)
     * @return ApiResponse&lt;CampaignsTransactionsExportCreateResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CampaignsTransactionsExportCreateResponseBody> exportLoyaltyCampaignTransactionsWithHttpInfo(String campaignId, LoyaltiesTransactionsExportCreateRequestBody loyaltiesTransactionsExportCreateRequestBody) throws ApiException {
        okhttp3.Call localVarCall = exportLoyaltyCampaignTransactionsValidateBeforeCall(campaignId, loyaltiesTransactionsExportCreateRequestBody, null);
        Type localVarReturnType = new TypeToken<CampaignsTransactionsExportCreateResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Export Loyalty Campaign Transactions (asynchronously)
     * Export transactions is an asynchronous process that generates a CSV file with the data about or point movements on all loyalty cards in a given campaign. To export transactions: 1. In the export request, use parameters to select which fields will be exported, in what order, and which data will be filtered. 2. Use the returned id to track the export status with the GET Export method. 3. In the GET Export method, when the returned status field has the DONE value, the export file has been generated. 4. Use the URL in the result property to download the file. You must be logged to your Voucherify account on a given cluster in the browser to be able to download the file. An export request will almost always result in a single file being generated by the system. However, when the data volume is large, the system may split the results into multiple files. An example export file can look as follows:    👍 Export Campaign Transactions  This method works in the same way the POST Export Campaign Transactions does, but it is limited to loyalty campaigns only. The POST Export Campaign Transactions method can also export gift card campaign transactions.
     * @param campaignId You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value. (required)
     * @param loyaltiesTransactionsExportCreateRequestBody Specify the parameters for the transaction export. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call exportLoyaltyCampaignTransactionsAsync(String campaignId, LoyaltiesTransactionsExportCreateRequestBody loyaltiesTransactionsExportCreateRequestBody, final ApiCallback<CampaignsTransactionsExportCreateResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportLoyaltyCampaignTransactionsValidateBeforeCall(campaignId, loyaltiesTransactionsExportCreateRequestBody, _callback);
        Type localVarReturnType = new TypeToken<CampaignsTransactionsExportCreateResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportLoyaltyCardTransactions
     * @param memberId A unique code identifying the loyalty card that you are looking to export transaction data for. (required)
     * @param loyaltiesMembersTransactionsExportCreateRequestBody Specify the parameters and filters for the transaction export. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call exportLoyaltyCardTransactionsCall(String memberId, LoyaltiesMembersTransactionsExportCreateRequestBody loyaltiesMembersTransactionsExportCreateRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = loyaltiesMembersTransactionsExportCreateRequestBody;

        // create path and map variables
        String localVarPath = "/v1/loyalties/members/{memberId}/transactions/export"
            .replace("{" + "memberId" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportLoyaltyCardTransactionsValidateBeforeCall(String memberId, LoyaltiesMembersTransactionsExportCreateRequestBody loyaltiesMembersTransactionsExportCreateRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling exportLoyaltyCardTransactions(Async)");
        }

        return exportLoyaltyCardTransactionsCall(memberId, loyaltiesMembersTransactionsExportCreateRequestBody, _callback);

    }

    /**
     * Export Loyalty Card Transactions
     * Export transactions that are associated with point movements on a loyalty card.   
     * @param memberId A unique code identifying the loyalty card that you are looking to export transaction data for. (required)
     * @param loyaltiesMembersTransactionsExportCreateRequestBody Specify the parameters and filters for the transaction export. (optional)
     * @return LoyaltiesMembersTransactionsExportCreateResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoyaltiesMembersTransactionsExportCreateResponseBody exportLoyaltyCardTransactions(String memberId, LoyaltiesMembersTransactionsExportCreateRequestBody loyaltiesMembersTransactionsExportCreateRequestBody) throws ApiException {
        ApiResponse<LoyaltiesMembersTransactionsExportCreateResponseBody> localVarResp = exportLoyaltyCardTransactionsWithHttpInfo(memberId, loyaltiesMembersTransactionsExportCreateRequestBody);
        return localVarResp.getData();
    }

    /**
     * Export Loyalty Card Transactions
     * Export transactions that are associated with point movements on a loyalty card.   
     * @param memberId A unique code identifying the loyalty card that you are looking to export transaction data for. (required)
     * @param loyaltiesMembersTransactionsExportCreateRequestBody Specify the parameters and filters for the transaction export. (optional)
     * @return ApiResponse&lt;LoyaltiesMembersTransactionsExportCreateResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoyaltiesMembersTransactionsExportCreateResponseBody> exportLoyaltyCardTransactionsWithHttpInfo(String memberId, LoyaltiesMembersTransactionsExportCreateRequestBody loyaltiesMembersTransactionsExportCreateRequestBody) throws ApiException {
        okhttp3.Call localVarCall = exportLoyaltyCardTransactionsValidateBeforeCall(memberId, loyaltiesMembersTransactionsExportCreateRequestBody, null);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersTransactionsExportCreateResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Export Loyalty Card Transactions (asynchronously)
     * Export transactions that are associated with point movements on a loyalty card.   
     * @param memberId A unique code identifying the loyalty card that you are looking to export transaction data for. (required)
     * @param loyaltiesMembersTransactionsExportCreateRequestBody Specify the parameters and filters for the transaction export. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call exportLoyaltyCardTransactionsAsync(String memberId, LoyaltiesMembersTransactionsExportCreateRequestBody loyaltiesMembersTransactionsExportCreateRequestBody, final ApiCallback<LoyaltiesMembersTransactionsExportCreateResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportLoyaltyCardTransactionsValidateBeforeCall(memberId, loyaltiesMembersTransactionsExportCreateRequestBody, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersTransactionsExportCreateResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportLoyaltyCardTransactions1
     * @param campaignId A unique identifier of the loyalty campaign containing the voucher whose transactions you would like to export. (required)
     * @param memberId A unique code identifying the loyalty card that you are looking to export transaction data for. (required)
     * @param loyaltiesMembersTransactionsExportCreateRequestBody Specify the parameters and filters for the transaction export. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call exportLoyaltyCardTransactions1Call(String campaignId, String memberId, LoyaltiesMembersTransactionsExportCreateRequestBody loyaltiesMembersTransactionsExportCreateRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = loyaltiesMembersTransactionsExportCreateRequestBody;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/members/{memberId}/transactions/export"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "memberId" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportLoyaltyCardTransactions1ValidateBeforeCall(String campaignId, String memberId, LoyaltiesMembersTransactionsExportCreateRequestBody loyaltiesMembersTransactionsExportCreateRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling exportLoyaltyCardTransactions1(Async)");
        }

        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling exportLoyaltyCardTransactions1(Async)");
        }

        return exportLoyaltyCardTransactions1Call(campaignId, memberId, loyaltiesMembersTransactionsExportCreateRequestBody, _callback);

    }

    /**
     * Export Loyalty Card Transactions
     * Export transactions that are associated with point movements on a loyalty card.   
     * @param campaignId A unique identifier of the loyalty campaign containing the voucher whose transactions you would like to export. (required)
     * @param memberId A unique code identifying the loyalty card that you are looking to export transaction data for. (required)
     * @param loyaltiesMembersTransactionsExportCreateRequestBody Specify the parameters and filters for the transaction export. (optional)
     * @return LoyaltiesMembersTransactionsExportCreateResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoyaltiesMembersTransactionsExportCreateResponseBody exportLoyaltyCardTransactions1(String campaignId, String memberId, LoyaltiesMembersTransactionsExportCreateRequestBody loyaltiesMembersTransactionsExportCreateRequestBody) throws ApiException {
        ApiResponse<LoyaltiesMembersTransactionsExportCreateResponseBody> localVarResp = exportLoyaltyCardTransactions1WithHttpInfo(campaignId, memberId, loyaltiesMembersTransactionsExportCreateRequestBody);
        return localVarResp.getData();
    }

    /**
     * Export Loyalty Card Transactions
     * Export transactions that are associated with point movements on a loyalty card.   
     * @param campaignId A unique identifier of the loyalty campaign containing the voucher whose transactions you would like to export. (required)
     * @param memberId A unique code identifying the loyalty card that you are looking to export transaction data for. (required)
     * @param loyaltiesMembersTransactionsExportCreateRequestBody Specify the parameters and filters for the transaction export. (optional)
     * @return ApiResponse&lt;LoyaltiesMembersTransactionsExportCreateResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoyaltiesMembersTransactionsExportCreateResponseBody> exportLoyaltyCardTransactions1WithHttpInfo(String campaignId, String memberId, LoyaltiesMembersTransactionsExportCreateRequestBody loyaltiesMembersTransactionsExportCreateRequestBody) throws ApiException {
        okhttp3.Call localVarCall = exportLoyaltyCardTransactions1ValidateBeforeCall(campaignId, memberId, loyaltiesMembersTransactionsExportCreateRequestBody, null);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersTransactionsExportCreateResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Export Loyalty Card Transactions (asynchronously)
     * Export transactions that are associated with point movements on a loyalty card.   
     * @param campaignId A unique identifier of the loyalty campaign containing the voucher whose transactions you would like to export. (required)
     * @param memberId A unique code identifying the loyalty card that you are looking to export transaction data for. (required)
     * @param loyaltiesMembersTransactionsExportCreateRequestBody Specify the parameters and filters for the transaction export. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call exportLoyaltyCardTransactions1Async(String campaignId, String memberId, LoyaltiesMembersTransactionsExportCreateRequestBody loyaltiesMembersTransactionsExportCreateRequestBody, final ApiCallback<LoyaltiesMembersTransactionsExportCreateResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportLoyaltyCardTransactions1ValidateBeforeCall(campaignId, memberId, loyaltiesMembersTransactionsExportCreateRequestBody, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersTransactionsExportCreateResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEarningRule
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param earningRuleId A unique earning rule ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getEarningRuleCall(String campaignId, String earningRuleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/earning-rules/{earningRuleId}"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "earningRuleId" + "}", localVarApiClient.escapeString(earningRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEarningRuleValidateBeforeCall(String campaignId, String earningRuleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getEarningRule(Async)");
        }

        // verify the required parameter 'earningRuleId' is set
        if (earningRuleId == null) {
            throw new ApiException("Missing the required parameter 'earningRuleId' when calling getEarningRule(Async)");
        }

        return getEarningRuleCall(campaignId, earningRuleId, _callback);

    }

    /**
     * Get Earning Rule
     * Retrieves an earning rule assigned to a campaign.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param earningRuleId A unique earning rule ID. (required)
     * @return LoyaltiesEarningRulesGetResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoyaltiesEarningRulesGetResponseBody getEarningRule(String campaignId, String earningRuleId) throws ApiException {
        ApiResponse<LoyaltiesEarningRulesGetResponseBody> localVarResp = getEarningRuleWithHttpInfo(campaignId, earningRuleId);
        return localVarResp.getData();
    }

    /**
     * Get Earning Rule
     * Retrieves an earning rule assigned to a campaign.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param earningRuleId A unique earning rule ID. (required)
     * @return ApiResponse&lt;LoyaltiesEarningRulesGetResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoyaltiesEarningRulesGetResponseBody> getEarningRuleWithHttpInfo(String campaignId, String earningRuleId) throws ApiException {
        okhttp3.Call localVarCall = getEarningRuleValidateBeforeCall(campaignId, earningRuleId, null);
        Type localVarReturnType = new TypeToken<LoyaltiesEarningRulesGetResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Earning Rule (asynchronously)
     * Retrieves an earning rule assigned to a campaign.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param earningRuleId A unique earning rule ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getEarningRuleAsync(String campaignId, String earningRuleId, final ApiCallback<LoyaltiesEarningRulesGetResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEarningRuleValidateBeforeCall(campaignId, earningRuleId, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesEarningRulesGetResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLoyaltyProgram
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getLoyaltyProgramCall(String campaignId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLoyaltyProgramValidateBeforeCall(String campaignId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getLoyaltyProgram(Async)");
        }

        return getLoyaltyProgramCall(campaignId, _callback);

    }

    /**
     * Get Loyalty Campaign
     * Retrieve a specific loyalty campaign.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @return LoyaltiesGetCampaignResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoyaltiesGetCampaignResponseBody getLoyaltyProgram(String campaignId) throws ApiException {
        ApiResponse<LoyaltiesGetCampaignResponseBody> localVarResp = getLoyaltyProgramWithHttpInfo(campaignId);
        return localVarResp.getData();
    }

    /**
     * Get Loyalty Campaign
     * Retrieve a specific loyalty campaign.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @return ApiResponse&lt;LoyaltiesGetCampaignResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoyaltiesGetCampaignResponseBody> getLoyaltyProgramWithHttpInfo(String campaignId) throws ApiException {
        okhttp3.Call localVarCall = getLoyaltyProgramValidateBeforeCall(campaignId, null);
        Type localVarReturnType = new TypeToken<LoyaltiesGetCampaignResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Loyalty Campaign (asynchronously)
     * Retrieve a specific loyalty campaign.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getLoyaltyProgramAsync(String campaignId, final ApiCallback<LoyaltiesGetCampaignResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLoyaltyProgramValidateBeforeCall(campaignId, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesGetCampaignResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLoyaltyTier
     * @param campaignId Unique loyalty campaign ID or name. (required)
     * @param loyaltyTierId Unique loyalty tier ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getLoyaltyTierCall(String campaignId, String loyaltyTierId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/tiers/{loyaltyTierId}"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "loyaltyTierId" + "}", localVarApiClient.escapeString(loyaltyTierId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLoyaltyTierValidateBeforeCall(String campaignId, String loyaltyTierId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getLoyaltyTier(Async)");
        }

        // verify the required parameter 'loyaltyTierId' is set
        if (loyaltyTierId == null) {
            throw new ApiException("Missing the required parameter 'loyaltyTierId' when calling getLoyaltyTier(Async)");
        }

        return getLoyaltyTierCall(campaignId, loyaltyTierId, _callback);

    }

    /**
     * Get Loyalty Tier
     * Retrieve a loyalty tier from a loyalty campaign by the loyalty tier ID.
     * @param campaignId Unique loyalty campaign ID or name. (required)
     * @param loyaltyTierId Unique loyalty tier ID. (required)
     * @return LoyaltiesTiersGetResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoyaltiesTiersGetResponseBody getLoyaltyTier(String campaignId, String loyaltyTierId) throws ApiException {
        ApiResponse<LoyaltiesTiersGetResponseBody> localVarResp = getLoyaltyTierWithHttpInfo(campaignId, loyaltyTierId);
        return localVarResp.getData();
    }

    /**
     * Get Loyalty Tier
     * Retrieve a loyalty tier from a loyalty campaign by the loyalty tier ID.
     * @param campaignId Unique loyalty campaign ID or name. (required)
     * @param loyaltyTierId Unique loyalty tier ID. (required)
     * @return ApiResponse&lt;LoyaltiesTiersGetResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoyaltiesTiersGetResponseBody> getLoyaltyTierWithHttpInfo(String campaignId, String loyaltyTierId) throws ApiException {
        okhttp3.Call localVarCall = getLoyaltyTierValidateBeforeCall(campaignId, loyaltyTierId, null);
        Type localVarReturnType = new TypeToken<LoyaltiesTiersGetResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Loyalty Tier (asynchronously)
     * Retrieve a loyalty tier from a loyalty campaign by the loyalty tier ID.
     * @param campaignId Unique loyalty campaign ID or name. (required)
     * @param loyaltyTierId Unique loyalty tier ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getLoyaltyTierAsync(String campaignId, String loyaltyTierId, final ApiCallback<LoyaltiesTiersGetResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLoyaltyTierValidateBeforeCall(campaignId, loyaltyTierId, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesTiersGetResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMember
     * @param memberId Unique loyalty card code assigned to a particular customer. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getMemberCall(String memberId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/members/{memberId}"
            .replace("{" + "memberId" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMemberValidateBeforeCall(String memberId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling getMember(Async)");
        }

        return getMemberCall(memberId, _callback);

    }

    /**
     * Get Member
     * Retrieve loyalty card with the given member ID (i.e. voucher code).      📘 Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to allow you to retrieve loyalty card details without having to provide the campaignId as a path parameter.
     * @param memberId Unique loyalty card code assigned to a particular customer. (required)
     * @return LoyaltiesMembersGetResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoyaltiesMembersGetResponseBody getMember(String memberId) throws ApiException {
        ApiResponse<LoyaltiesMembersGetResponseBody> localVarResp = getMemberWithHttpInfo(memberId);
        return localVarResp.getData();
    }

    /**
     * Get Member
     * Retrieve loyalty card with the given member ID (i.e. voucher code).      📘 Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to allow you to retrieve loyalty card details without having to provide the campaignId as a path parameter.
     * @param memberId Unique loyalty card code assigned to a particular customer. (required)
     * @return ApiResponse&lt;LoyaltiesMembersGetResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoyaltiesMembersGetResponseBody> getMemberWithHttpInfo(String memberId) throws ApiException {
        okhttp3.Call localVarCall = getMemberValidateBeforeCall(memberId, null);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersGetResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Member (asynchronously)
     * Retrieve loyalty card with the given member ID (i.e. voucher code).      📘 Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to allow you to retrieve loyalty card details without having to provide the campaignId as a path parameter.
     * @param memberId Unique loyalty card code assigned to a particular customer. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getMemberAsync(String memberId, final ApiCallback<LoyaltiesMembersGetResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMemberValidateBeforeCall(memberId, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersGetResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMember1
     * @param campaignId Unique campaign ID. (required)
     * @param memberId Unique code that identifies the loyalty card. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getMember1Call(String campaignId, String memberId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/members/{memberId}"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "memberId" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMember1ValidateBeforeCall(String campaignId, String memberId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getMember1(Async)");
        }

        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling getMember1(Async)");
        }

        return getMember1Call(campaignId, memberId, _callback);

    }

    /**
     * Get Member
     * Retrieves the loyalty card with the given member ID (i.e. voucher code).
     * @param campaignId Unique campaign ID. (required)
     * @param memberId Unique code that identifies the loyalty card. (required)
     * @return LoyaltiesMembersGetResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoyaltiesMembersGetResponseBody getMember1(String campaignId, String memberId) throws ApiException {
        ApiResponse<LoyaltiesMembersGetResponseBody> localVarResp = getMember1WithHttpInfo(campaignId, memberId);
        return localVarResp.getData();
    }

    /**
     * Get Member
     * Retrieves the loyalty card with the given member ID (i.e. voucher code).
     * @param campaignId Unique campaign ID. (required)
     * @param memberId Unique code that identifies the loyalty card. (required)
     * @return ApiResponse&lt;LoyaltiesMembersGetResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoyaltiesMembersGetResponseBody> getMember1WithHttpInfo(String campaignId, String memberId) throws ApiException {
        okhttp3.Call localVarCall = getMember1ValidateBeforeCall(campaignId, memberId, null);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersGetResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Member (asynchronously)
     * Retrieves the loyalty card with the given member ID (i.e. voucher code).
     * @param campaignId Unique campaign ID. (required)
     * @param memberId Unique code that identifies the loyalty card. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getMember1Async(String campaignId, String memberId, final ApiCallback<LoyaltiesMembersGetResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMember1ValidateBeforeCall(campaignId, memberId, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersGetResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRewardAssignment1
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param assignmentId Unique reward assignment ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getRewardAssignment1Call(String campaignId, String assignmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/reward-assignments/{assignmentId}"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "assignmentId" + "}", localVarApiClient.escapeString(assignmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRewardAssignment1ValidateBeforeCall(String campaignId, String assignmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getRewardAssignment1(Async)");
        }

        // verify the required parameter 'assignmentId' is set
        if (assignmentId == null) {
            throw new ApiException("Missing the required parameter 'assignmentId' when calling getRewardAssignment1(Async)");
        }

        return getRewardAssignment1Call(campaignId, assignmentId, _callback);

    }

    /**
     * Get Reward Assignment
     * Retrieve specific reward assignment.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param assignmentId Unique reward assignment ID. (required)
     * @return LoyaltiesRewardAssignmentsGetResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoyaltiesRewardAssignmentsGetResponseBody getRewardAssignment1(String campaignId, String assignmentId) throws ApiException {
        ApiResponse<LoyaltiesRewardAssignmentsGetResponseBody> localVarResp = getRewardAssignment1WithHttpInfo(campaignId, assignmentId);
        return localVarResp.getData();
    }

    /**
     * Get Reward Assignment
     * Retrieve specific reward assignment.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param assignmentId Unique reward assignment ID. (required)
     * @return ApiResponse&lt;LoyaltiesRewardAssignmentsGetResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoyaltiesRewardAssignmentsGetResponseBody> getRewardAssignment1WithHttpInfo(String campaignId, String assignmentId) throws ApiException {
        okhttp3.Call localVarCall = getRewardAssignment1ValidateBeforeCall(campaignId, assignmentId, null);
        Type localVarReturnType = new TypeToken<LoyaltiesRewardAssignmentsGetResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Reward Assignment (asynchronously)
     * Retrieve specific reward assignment.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param assignmentId Unique reward assignment ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getRewardAssignment1Async(String campaignId, String assignmentId, final ApiCallback<LoyaltiesRewardAssignmentsGetResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRewardAssignment1ValidateBeforeCall(campaignId, assignmentId, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesRewardAssignmentsGetResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRewardAssignment2
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param assignmentId A unique reward assignment ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getRewardAssignment2Call(String campaignId, String assignmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/rewards/{assignmentId}"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "assignmentId" + "}", localVarApiClient.escapeString(assignmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRewardAssignment2ValidateBeforeCall(String campaignId, String assignmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getRewardAssignment2(Async)");
        }

        // verify the required parameter 'assignmentId' is set
        if (assignmentId == null) {
            throw new ApiException("Missing the required parameter 'assignmentId' when calling getRewardAssignment2(Async)");
        }

        return getRewardAssignment2Call(campaignId, assignmentId, _callback);

    }

    /**
     * Get Reward Assignment
     * Retrieve specific reward assignment.  📘 Alternative endpoint  This endpoint is an alternative to this endpoint. 
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param assignmentId A unique reward assignment ID. (required)
     * @return LoyaltiesRewardsGetResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoyaltiesRewardsGetResponseBody getRewardAssignment2(String campaignId, String assignmentId) throws ApiException {
        ApiResponse<LoyaltiesRewardsGetResponseBody> localVarResp = getRewardAssignment2WithHttpInfo(campaignId, assignmentId);
        return localVarResp.getData();
    }

    /**
     * Get Reward Assignment
     * Retrieve specific reward assignment.  📘 Alternative endpoint  This endpoint is an alternative to this endpoint. 
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param assignmentId A unique reward assignment ID. (required)
     * @return ApiResponse&lt;LoyaltiesRewardsGetResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoyaltiesRewardsGetResponseBody> getRewardAssignment2WithHttpInfo(String campaignId, String assignmentId) throws ApiException {
        okhttp3.Call localVarCall = getRewardAssignment2ValidateBeforeCall(campaignId, assignmentId, null);
        Type localVarReturnType = new TypeToken<LoyaltiesRewardsGetResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Reward Assignment (asynchronously)
     * Retrieve specific reward assignment.  📘 Alternative endpoint  This endpoint is an alternative to this endpoint. 
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param assignmentId A unique reward assignment ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getRewardAssignment2Async(String campaignId, String assignmentId, final ApiCallback<LoyaltiesRewardsGetResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRewardAssignment2ValidateBeforeCall(campaignId, assignmentId, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesRewardsGetResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRewardDetails
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param assignmentId Unique reward assignment ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getRewardDetailsCall(String campaignId, String assignmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/reward-assignments/{assignmentId}/reward"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "assignmentId" + "}", localVarApiClient.escapeString(assignmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRewardDetailsValidateBeforeCall(String campaignId, String assignmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getRewardDetails(Async)");
        }

        // verify the required parameter 'assignmentId' is set
        if (assignmentId == null) {
            throw new ApiException("Missing the required parameter 'assignmentId' when calling getRewardDetails(Async)");
        }

        return getRewardDetailsCall(campaignId, assignmentId, _callback);

    }

    /**
     * Get Reward Details
     * Get reward details in the context of a loyalty campaign and reward assignment ID.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param assignmentId Unique reward assignment ID. (required)
     * @return LoyaltiesRewardAssignmentsRewardGetResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoyaltiesRewardAssignmentsRewardGetResponseBody getRewardDetails(String campaignId, String assignmentId) throws ApiException {
        ApiResponse<LoyaltiesRewardAssignmentsRewardGetResponseBody> localVarResp = getRewardDetailsWithHttpInfo(campaignId, assignmentId);
        return localVarResp.getData();
    }

    /**
     * Get Reward Details
     * Get reward details in the context of a loyalty campaign and reward assignment ID.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param assignmentId Unique reward assignment ID. (required)
     * @return ApiResponse&lt;LoyaltiesRewardAssignmentsRewardGetResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoyaltiesRewardAssignmentsRewardGetResponseBody> getRewardDetailsWithHttpInfo(String campaignId, String assignmentId) throws ApiException {
        okhttp3.Call localVarCall = getRewardDetailsValidateBeforeCall(campaignId, assignmentId, null);
        Type localVarReturnType = new TypeToken<LoyaltiesRewardAssignmentsRewardGetResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Reward Details (asynchronously)
     * Get reward details in the context of a loyalty campaign and reward assignment ID.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param assignmentId Unique reward assignment ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getRewardDetailsAsync(String campaignId, String assignmentId, final ApiCallback<LoyaltiesRewardAssignmentsRewardGetResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRewardDetailsValidateBeforeCall(campaignId, assignmentId, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesRewardAssignmentsRewardGetResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCampaignPendingPoints
     * @param campaignId Unique campaign ID. (required)
     * @param limit Limit the number of the pending point entries that the API returns in the response. (optional)
     * @param order Orders the pending point entries according the pending point entry ID. The dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param startingAfterId A cursor for pagination. It retrieves the results starting after a result with the given ID. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call listCampaignPendingPointsCall(String campaignId, Integer limit, ParameterOrderListPendingPoints order, String startingAfterId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/pending-points"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (startingAfterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting_after_id", startingAfterId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCampaignPendingPointsValidateBeforeCall(String campaignId, Integer limit, ParameterOrderListPendingPoints order, String startingAfterId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling listCampaignPendingPoints(Async)");
        }

        return listCampaignPendingPointsCall(campaignId, limit, order, startingAfterId, _callback);

    }

    /**
     * List Campaign Pending Points
     * Lists all pending points that are currently assigned to all loyalty cards in a campaign. Once the points are added to the card, the entry is no longer returned. 👍 Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
     * @param campaignId Unique campaign ID. (required)
     * @param limit Limit the number of the pending point entries that the API returns in the response. (optional)
     * @param order Orders the pending point entries according the pending point entry ID. The dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param startingAfterId A cursor for pagination. It retrieves the results starting after a result with the given ID. (optional)
     * @return LoyaltiesPendingPointsListResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoyaltiesPendingPointsListResponseBody listCampaignPendingPoints(String campaignId, Integer limit, ParameterOrderListPendingPoints order, String startingAfterId) throws ApiException {
        ApiResponse<LoyaltiesPendingPointsListResponseBody> localVarResp = listCampaignPendingPointsWithHttpInfo(campaignId, limit, order, startingAfterId);
        return localVarResp.getData();
    }

    /**
     * List Campaign Pending Points
     * Lists all pending points that are currently assigned to all loyalty cards in a campaign. Once the points are added to the card, the entry is no longer returned. 👍 Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
     * @param campaignId Unique campaign ID. (required)
     * @param limit Limit the number of the pending point entries that the API returns in the response. (optional)
     * @param order Orders the pending point entries according the pending point entry ID. The dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param startingAfterId A cursor for pagination. It retrieves the results starting after a result with the given ID. (optional)
     * @return ApiResponse&lt;LoyaltiesPendingPointsListResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoyaltiesPendingPointsListResponseBody> listCampaignPendingPointsWithHttpInfo(String campaignId, Integer limit, ParameterOrderListPendingPoints order, String startingAfterId) throws ApiException {
        okhttp3.Call localVarCall = listCampaignPendingPointsValidateBeforeCall(campaignId, limit, order, startingAfterId, null);
        Type localVarReturnType = new TypeToken<LoyaltiesPendingPointsListResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Campaign Pending Points (asynchronously)
     * Lists all pending points that are currently assigned to all loyalty cards in a campaign. Once the points are added to the card, the entry is no longer returned. 👍 Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
     * @param campaignId Unique campaign ID. (required)
     * @param limit Limit the number of the pending point entries that the API returns in the response. (optional)
     * @param order Orders the pending point entries according the pending point entry ID. The dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param startingAfterId A cursor for pagination. It retrieves the results starting after a result with the given ID. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call listCampaignPendingPointsAsync(String campaignId, Integer limit, ParameterOrderListPendingPoints order, String startingAfterId, final ApiCallback<LoyaltiesPendingPointsListResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCampaignPendingPointsValidateBeforeCall(campaignId, limit, order, startingAfterId, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesPendingPointsListResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listEarningRules
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call listEarningRulesCall(String campaignId, Integer limit, Integer page, ParameterOrderListEarningRules order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/earning-rules"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEarningRulesValidateBeforeCall(String campaignId, Integer limit, Integer page, ParameterOrderListEarningRules order, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling listEarningRules(Async)");
        }

        return listEarningRulesCall(campaignId, limit, page, order, _callback);

    }

    /**
     * List Earning Rules
     * Returns a list of all earning rules within a given campaign.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @return LoyaltiesEarningRulesListResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoyaltiesEarningRulesListResponseBody listEarningRules(String campaignId, Integer limit, Integer page, ParameterOrderListEarningRules order) throws ApiException {
        ApiResponse<LoyaltiesEarningRulesListResponseBody> localVarResp = listEarningRulesWithHttpInfo(campaignId, limit, page, order);
        return localVarResp.getData();
    }

    /**
     * List Earning Rules
     * Returns a list of all earning rules within a given campaign.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @return ApiResponse&lt;LoyaltiesEarningRulesListResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoyaltiesEarningRulesListResponseBody> listEarningRulesWithHttpInfo(String campaignId, Integer limit, Integer page, ParameterOrderListEarningRules order) throws ApiException {
        okhttp3.Call localVarCall = listEarningRulesValidateBeforeCall(campaignId, limit, page, order, null);
        Type localVarReturnType = new TypeToken<LoyaltiesEarningRulesListResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Earning Rules (asynchronously)
     * Returns a list of all earning rules within a given campaign.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call listEarningRulesAsync(String campaignId, Integer limit, Integer page, ParameterOrderListEarningRules order, final ApiCallback<LoyaltiesEarningRulesListResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEarningRulesValidateBeforeCall(campaignId, limit, page, order, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesEarningRulesListResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listLoyaltyCampaignTransactions
     * @param campaignId You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param startingAfterId A cursor for pagination. It retrieves the transactions starting after a transaction with the given ID. (optional)
     * @param filters Filters for listing responses. The id filter denotes the unique transaction identifier. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call listLoyaltyCampaignTransactionsCall(String campaignId, Integer limit, ParameterOrderListTransactions order, String startingAfterId, ParametersFiltersListCampaignTransactions filters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/transactions"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (startingAfterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting_after_id", startingAfterId));
        }

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters", filters));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLoyaltyCampaignTransactionsValidateBeforeCall(String campaignId, Integer limit, ParameterOrderListTransactions order, String startingAfterId, ParametersFiltersListCampaignTransactions filters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling listLoyaltyCampaignTransactions(Async)");
        }

        return listLoyaltyCampaignTransactionsCall(campaignId, limit, order, startingAfterId, filters, _callback);

    }

    /**
     * List Loyalty Campaign Transactions
     * Retrieves all transactions for the campaign with the given campaign ID or campaign name.
     * @param campaignId You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param startingAfterId A cursor for pagination. It retrieves the transactions starting after a transaction with the given ID. (optional)
     * @param filters Filters for listing responses. The id filter denotes the unique transaction identifier. (optional)
     * @return LoyaltiesTransactionsListResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoyaltiesTransactionsListResponseBody listLoyaltyCampaignTransactions(String campaignId, Integer limit, ParameterOrderListTransactions order, String startingAfterId, ParametersFiltersListCampaignTransactions filters) throws ApiException {
        ApiResponse<LoyaltiesTransactionsListResponseBody> localVarResp = listLoyaltyCampaignTransactionsWithHttpInfo(campaignId, limit, order, startingAfterId, filters);
        return localVarResp.getData();
    }

    /**
     * List Loyalty Campaign Transactions
     * Retrieves all transactions for the campaign with the given campaign ID or campaign name.
     * @param campaignId You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param startingAfterId A cursor for pagination. It retrieves the transactions starting after a transaction with the given ID. (optional)
     * @param filters Filters for listing responses. The id filter denotes the unique transaction identifier. (optional)
     * @return ApiResponse&lt;LoyaltiesTransactionsListResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoyaltiesTransactionsListResponseBody> listLoyaltyCampaignTransactionsWithHttpInfo(String campaignId, Integer limit, ParameterOrderListTransactions order, String startingAfterId, ParametersFiltersListCampaignTransactions filters) throws ApiException {
        okhttp3.Call localVarCall = listLoyaltyCampaignTransactionsValidateBeforeCall(campaignId, limit, order, startingAfterId, filters, null);
        Type localVarReturnType = new TypeToken<LoyaltiesTransactionsListResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Loyalty Campaign Transactions (asynchronously)
     * Retrieves all transactions for the campaign with the given campaign ID or campaign name.
     * @param campaignId You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param startingAfterId A cursor for pagination. It retrieves the transactions starting after a transaction with the given ID. (optional)
     * @param filters Filters for listing responses. The id filter denotes the unique transaction identifier. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call listLoyaltyCampaignTransactionsAsync(String campaignId, Integer limit, ParameterOrderListTransactions order, String startingAfterId, ParametersFiltersListCampaignTransactions filters, final ApiCallback<LoyaltiesTransactionsListResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLoyaltyCampaignTransactionsValidateBeforeCall(campaignId, limit, order, startingAfterId, filters, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesTransactionsListResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listLoyaltyCardTransactions
     * @param memberId A unique code identifying the loyalty card that you are looking to retrieve transaction data for. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param filters Filters for listing member transactions. id is the unique identifier of the transaction. (optional)
     * @param startingAfterId A cursor for pagination. It retrieves the transactions starting after a transaction with the given ID. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call listLoyaltyCardTransactionsCall(String memberId, Integer limit, ParameterOrderListTransactions order, ParameterFiltersListMemberTransactions filters, String startingAfterId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/members/{memberId}/transactions"
            .replace("{" + "memberId" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters", filters));
        }

        if (startingAfterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting_after_id", startingAfterId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLoyaltyCardTransactionsValidateBeforeCall(String memberId, Integer limit, ParameterOrderListTransactions order, ParameterFiltersListMemberTransactions filters, String startingAfterId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling listLoyaltyCardTransactions(Async)");
        }

        return listLoyaltyCardTransactionsCall(memberId, limit, order, filters, startingAfterId, _callback);

    }

    /**
     * List Loyalty Card Transactions
     * Retrieve transaction data related to point movements for a specific loyalty card.
     * @param memberId A unique code identifying the loyalty card that you are looking to retrieve transaction data for. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param filters Filters for listing member transactions. id is the unique identifier of the transaction. (optional)
     * @param startingAfterId A cursor for pagination. It retrieves the transactions starting after a transaction with the given ID. (optional)
     * @return LoyaltiesMembersTransactionsListResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoyaltiesMembersTransactionsListResponseBody listLoyaltyCardTransactions(String memberId, Integer limit, ParameterOrderListTransactions order, ParameterFiltersListMemberTransactions filters, String startingAfterId) throws ApiException {
        ApiResponse<LoyaltiesMembersTransactionsListResponseBody> localVarResp = listLoyaltyCardTransactionsWithHttpInfo(memberId, limit, order, filters, startingAfterId);
        return localVarResp.getData();
    }

    /**
     * List Loyalty Card Transactions
     * Retrieve transaction data related to point movements for a specific loyalty card.
     * @param memberId A unique code identifying the loyalty card that you are looking to retrieve transaction data for. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param filters Filters for listing member transactions. id is the unique identifier of the transaction. (optional)
     * @param startingAfterId A cursor for pagination. It retrieves the transactions starting after a transaction with the given ID. (optional)
     * @return ApiResponse&lt;LoyaltiesMembersTransactionsListResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoyaltiesMembersTransactionsListResponseBody> listLoyaltyCardTransactionsWithHttpInfo(String memberId, Integer limit, ParameterOrderListTransactions order, ParameterFiltersListMemberTransactions filters, String startingAfterId) throws ApiException {
        okhttp3.Call localVarCall = listLoyaltyCardTransactionsValidateBeforeCall(memberId, limit, order, filters, startingAfterId, null);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersTransactionsListResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Loyalty Card Transactions (asynchronously)
     * Retrieve transaction data related to point movements for a specific loyalty card.
     * @param memberId A unique code identifying the loyalty card that you are looking to retrieve transaction data for. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param filters Filters for listing member transactions. id is the unique identifier of the transaction. (optional)
     * @param startingAfterId A cursor for pagination. It retrieves the transactions starting after a transaction with the given ID. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call listLoyaltyCardTransactionsAsync(String memberId, Integer limit, ParameterOrderListTransactions order, ParameterFiltersListMemberTransactions filters, String startingAfterId, final ApiCallback<LoyaltiesMembersTransactionsListResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLoyaltyCardTransactionsValidateBeforeCall(memberId, limit, order, filters, startingAfterId, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersTransactionsListResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listLoyaltyCardTransactions1
     * @param campaignId A unique identifier of the loyalty campaign containing the voucher whose transactions you would like to return. (required)
     * @param memberId A unique code identifying the loyalty card that you are looking to retrieve transaction data for. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param filters Filters for listing member transactions. id is the unique identifier of the transaction. (optional)
     * @param startingAfterId A cursor for pagination. It retrieves the transactions starting after a transaction with the given ID. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call listLoyaltyCardTransactions1Call(String campaignId, String memberId, Integer limit, ParameterOrderListTransactions order, ParameterFiltersListMemberTransactions filters, String startingAfterId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/members/{memberId}/transactions"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "memberId" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters", filters));
        }

        if (startingAfterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting_after_id", startingAfterId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLoyaltyCardTransactions1ValidateBeforeCall(String campaignId, String memberId, Integer limit, ParameterOrderListTransactions order, ParameterFiltersListMemberTransactions filters, String startingAfterId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling listLoyaltyCardTransactions1(Async)");
        }

        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling listLoyaltyCardTransactions1(Async)");
        }

        return listLoyaltyCardTransactions1Call(campaignId, memberId, limit, order, filters, startingAfterId, _callback);

    }

    /**
     * List Loyalty Card Transactions
     * Retrieve transaction data related to point movements for a specific loyalty card.
     * @param campaignId A unique identifier of the loyalty campaign containing the voucher whose transactions you would like to return. (required)
     * @param memberId A unique code identifying the loyalty card that you are looking to retrieve transaction data for. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param filters Filters for listing member transactions. id is the unique identifier of the transaction. (optional)
     * @param startingAfterId A cursor for pagination. It retrieves the transactions starting after a transaction with the given ID. (optional)
     * @return LoyaltiesMembersTransactionsListResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoyaltiesMembersTransactionsListResponseBody listLoyaltyCardTransactions1(String campaignId, String memberId, Integer limit, ParameterOrderListTransactions order, ParameterFiltersListMemberTransactions filters, String startingAfterId) throws ApiException {
        ApiResponse<LoyaltiesMembersTransactionsListResponseBody> localVarResp = listLoyaltyCardTransactions1WithHttpInfo(campaignId, memberId, limit, order, filters, startingAfterId);
        return localVarResp.getData();
    }

    /**
     * List Loyalty Card Transactions
     * Retrieve transaction data related to point movements for a specific loyalty card.
     * @param campaignId A unique identifier of the loyalty campaign containing the voucher whose transactions you would like to return. (required)
     * @param memberId A unique code identifying the loyalty card that you are looking to retrieve transaction data for. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param filters Filters for listing member transactions. id is the unique identifier of the transaction. (optional)
     * @param startingAfterId A cursor for pagination. It retrieves the transactions starting after a transaction with the given ID. (optional)
     * @return ApiResponse&lt;LoyaltiesMembersTransactionsListResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoyaltiesMembersTransactionsListResponseBody> listLoyaltyCardTransactions1WithHttpInfo(String campaignId, String memberId, Integer limit, ParameterOrderListTransactions order, ParameterFiltersListMemberTransactions filters, String startingAfterId) throws ApiException {
        okhttp3.Call localVarCall = listLoyaltyCardTransactions1ValidateBeforeCall(campaignId, memberId, limit, order, filters, startingAfterId, null);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersTransactionsListResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Loyalty Card Transactions (asynchronously)
     * Retrieve transaction data related to point movements for a specific loyalty card.
     * @param campaignId A unique identifier of the loyalty campaign containing the voucher whose transactions you would like to return. (required)
     * @param memberId A unique code identifying the loyalty card that you are looking to retrieve transaction data for. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param filters Filters for listing member transactions. id is the unique identifier of the transaction. (optional)
     * @param startingAfterId A cursor for pagination. It retrieves the transactions starting after a transaction with the given ID. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call listLoyaltyCardTransactions1Async(String campaignId, String memberId, Integer limit, ParameterOrderListTransactions order, ParameterFiltersListMemberTransactions filters, String startingAfterId, final ApiCallback<LoyaltiesMembersTransactionsListResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLoyaltyCardTransactions1ValidateBeforeCall(campaignId, memberId, limit, order, filters, startingAfterId, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersTransactionsListResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listLoyaltyPrograms
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param expand Includes an expanded categories object in the response. If the [Areas and Stores](https://support.voucherify.io/article/623-areas-and-stores) Enterprise feature is enabled, add access_settings_assignments to return assigned areas and stores. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call listLoyaltyProgramsCall(Integer limit, Integer page, ParameterExpandListCampaigns expand, ParameterOrderListCampaigns order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLoyaltyProgramsValidateBeforeCall(Integer limit, Integer page, ParameterExpandListCampaigns expand, ParameterOrderListCampaigns order, final ApiCallback _callback) throws ApiException {
        return listLoyaltyProgramsCall(limit, page, expand, order, _callback);

    }

    /**
     * List Loyalty Campaigns
     * Returns a list of your loyalty campaigns.
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param expand Includes an expanded categories object in the response. If the [Areas and Stores](https://support.voucherify.io/article/623-areas-and-stores) Enterprise feature is enabled, add access_settings_assignments to return assigned areas and stores. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @return LoyaltiesListCampaignsResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoyaltiesListCampaignsResponseBody listLoyaltyPrograms(Integer limit, Integer page, ParameterExpandListCampaigns expand, ParameterOrderListCampaigns order) throws ApiException {
        ApiResponse<LoyaltiesListCampaignsResponseBody> localVarResp = listLoyaltyProgramsWithHttpInfo(limit, page, expand, order);
        return localVarResp.getData();
    }

    /**
     * List Loyalty Campaigns
     * Returns a list of your loyalty campaigns.
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param expand Includes an expanded categories object in the response. If the [Areas and Stores](https://support.voucherify.io/article/623-areas-and-stores) Enterprise feature is enabled, add access_settings_assignments to return assigned areas and stores. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @return ApiResponse&lt;LoyaltiesListCampaignsResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoyaltiesListCampaignsResponseBody> listLoyaltyProgramsWithHttpInfo(Integer limit, Integer page, ParameterExpandListCampaigns expand, ParameterOrderListCampaigns order) throws ApiException {
        okhttp3.Call localVarCall = listLoyaltyProgramsValidateBeforeCall(limit, page, expand, order, null);
        Type localVarReturnType = new TypeToken<LoyaltiesListCampaignsResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Loyalty Campaigns (asynchronously)
     * Returns a list of your loyalty campaigns.
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param expand Includes an expanded categories object in the response. If the [Areas and Stores](https://support.voucherify.io/article/623-areas-and-stores) Enterprise feature is enabled, add access_settings_assignments to return assigned areas and stores. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call listLoyaltyProgramsAsync(Integer limit, Integer page, ParameterExpandListCampaigns expand, ParameterOrderListCampaigns order, final ApiCallback<LoyaltiesListCampaignsResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLoyaltyProgramsValidateBeforeCall(limit, page, expand, order, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesListCampaignsResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listLoyaltyTierEarningRules
     * @param campaignId Unique campaign ID or name. (required)
     * @param loyaltyTierId Unique loyalty tier ID. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call listLoyaltyTierEarningRulesCall(String campaignId, String loyaltyTierId, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/tiers/{loyaltyTierId}/earning-rules"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "loyaltyTierId" + "}", localVarApiClient.escapeString(loyaltyTierId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLoyaltyTierEarningRulesValidateBeforeCall(String campaignId, String loyaltyTierId, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling listLoyaltyTierEarningRules(Async)");
        }

        // verify the required parameter 'loyaltyTierId' is set
        if (loyaltyTierId == null) {
            throw new ApiException("Missing the required parameter 'loyaltyTierId' when calling listLoyaltyTierEarningRules(Async)");
        }

        return listLoyaltyTierEarningRulesCall(campaignId, loyaltyTierId, limit, page, _callback);

    }

    /**
     * List Loyalty Tier Earning Rules
     * Retrieve available earning rules for a given tier and the calculation method for earning points.
     * @param campaignId Unique campaign ID or name. (required)
     * @param loyaltyTierId Unique loyalty tier ID. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @return LoyaltiesTiersEarningRulesListResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoyaltiesTiersEarningRulesListResponseBody listLoyaltyTierEarningRules(String campaignId, String loyaltyTierId, Integer limit, Integer page) throws ApiException {
        ApiResponse<LoyaltiesTiersEarningRulesListResponseBody> localVarResp = listLoyaltyTierEarningRulesWithHttpInfo(campaignId, loyaltyTierId, limit, page);
        return localVarResp.getData();
    }

    /**
     * List Loyalty Tier Earning Rules
     * Retrieve available earning rules for a given tier and the calculation method for earning points.
     * @param campaignId Unique campaign ID or name. (required)
     * @param loyaltyTierId Unique loyalty tier ID. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @return ApiResponse&lt;LoyaltiesTiersEarningRulesListResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoyaltiesTiersEarningRulesListResponseBody> listLoyaltyTierEarningRulesWithHttpInfo(String campaignId, String loyaltyTierId, Integer limit, Integer page) throws ApiException {
        okhttp3.Call localVarCall = listLoyaltyTierEarningRulesValidateBeforeCall(campaignId, loyaltyTierId, limit, page, null);
        Type localVarReturnType = new TypeToken<LoyaltiesTiersEarningRulesListResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Loyalty Tier Earning Rules (asynchronously)
     * Retrieve available earning rules for a given tier and the calculation method for earning points.
     * @param campaignId Unique campaign ID or name. (required)
     * @param loyaltyTierId Unique loyalty tier ID. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call listLoyaltyTierEarningRulesAsync(String campaignId, String loyaltyTierId, Integer limit, Integer page, final ApiCallback<LoyaltiesTiersEarningRulesListResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLoyaltyTierEarningRulesValidateBeforeCall(campaignId, loyaltyTierId, limit, page, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesTiersEarningRulesListResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listLoyaltyTierRewards
     * @param campaignId Unique campaign ID or name. (required)
     * @param loyaltyTierId Unique loyalty tier ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call listLoyaltyTierRewardsCall(String campaignId, String loyaltyTierId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/tiers/{loyaltyTierId}/rewards"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "loyaltyTierId" + "}", localVarApiClient.escapeString(loyaltyTierId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLoyaltyTierRewardsValidateBeforeCall(String campaignId, String loyaltyTierId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling listLoyaltyTierRewards(Async)");
        }

        // verify the required parameter 'loyaltyTierId' is set
        if (loyaltyTierId == null) {
            throw new ApiException("Missing the required parameter 'loyaltyTierId' when calling listLoyaltyTierRewards(Async)");
        }

        return listLoyaltyTierRewardsCall(campaignId, loyaltyTierId, _callback);

    }

    /**
     * List Loyalty Tier Rewards
     * Get available rewards for a given tier.
     * @param campaignId Unique campaign ID or name. (required)
     * @param loyaltyTierId Unique loyalty tier ID. (required)
     * @return LoyaltiesTiersRewardsListResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoyaltiesTiersRewardsListResponseBody listLoyaltyTierRewards(String campaignId, String loyaltyTierId) throws ApiException {
        ApiResponse<LoyaltiesTiersRewardsListResponseBody> localVarResp = listLoyaltyTierRewardsWithHttpInfo(campaignId, loyaltyTierId);
        return localVarResp.getData();
    }

    /**
     * List Loyalty Tier Rewards
     * Get available rewards for a given tier.
     * @param campaignId Unique campaign ID or name. (required)
     * @param loyaltyTierId Unique loyalty tier ID. (required)
     * @return ApiResponse&lt;LoyaltiesTiersRewardsListResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoyaltiesTiersRewardsListResponseBody> listLoyaltyTierRewardsWithHttpInfo(String campaignId, String loyaltyTierId) throws ApiException {
        okhttp3.Call localVarCall = listLoyaltyTierRewardsValidateBeforeCall(campaignId, loyaltyTierId, null);
        Type localVarReturnType = new TypeToken<LoyaltiesTiersRewardsListResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Loyalty Tier Rewards (asynchronously)
     * Get available rewards for a given tier.
     * @param campaignId Unique campaign ID or name. (required)
     * @param loyaltyTierId Unique loyalty tier ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call listLoyaltyTierRewardsAsync(String campaignId, String loyaltyTierId, final ApiCallback<LoyaltiesTiersRewardsListResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLoyaltyTierRewardsValidateBeforeCall(campaignId, loyaltyTierId, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesTiersRewardsListResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listLoyaltyTiers
     * @param campaignId Unique loyalty campaign ID or name. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call listLoyaltyTiersCall(String campaignId, Integer limit, ParameterOrderListLoyaltyTiers order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/tiers"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLoyaltyTiersValidateBeforeCall(String campaignId, Integer limit, ParameterOrderListLoyaltyTiers order, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling listLoyaltyTiers(Async)");
        }

        return listLoyaltyTiersCall(campaignId, limit, order, _callback);

    }

    /**
     * List Loyalty Tiers
     * Retrieve a list of loyalty tiers which were added to the loyalty program.
     * @param campaignId Unique loyalty campaign ID or name. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @return LoyaltiesTiersListResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoyaltiesTiersListResponseBody listLoyaltyTiers(String campaignId, Integer limit, ParameterOrderListLoyaltyTiers order) throws ApiException {
        ApiResponse<LoyaltiesTiersListResponseBody> localVarResp = listLoyaltyTiersWithHttpInfo(campaignId, limit, order);
        return localVarResp.getData();
    }

    /**
     * List Loyalty Tiers
     * Retrieve a list of loyalty tiers which were added to the loyalty program.
     * @param campaignId Unique loyalty campaign ID or name. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @return ApiResponse&lt;LoyaltiesTiersListResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoyaltiesTiersListResponseBody> listLoyaltyTiersWithHttpInfo(String campaignId, Integer limit, ParameterOrderListLoyaltyTiers order) throws ApiException {
        okhttp3.Call localVarCall = listLoyaltyTiersValidateBeforeCall(campaignId, limit, order, null);
        Type localVarReturnType = new TypeToken<LoyaltiesTiersListResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Loyalty Tiers (asynchronously)
     * Retrieve a list of loyalty tiers which were added to the loyalty program.
     * @param campaignId Unique loyalty campaign ID or name. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call listLoyaltyTiersAsync(String campaignId, Integer limit, ParameterOrderListLoyaltyTiers order, final ApiCallback<LoyaltiesTiersListResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLoyaltyTiersValidateBeforeCall(campaignId, limit, order, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesTiersListResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMemberActivity
     * @param memberId Unique loyalty card assigned to a particular customer. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param order Apply this filter to order the events according the date and time when it was created. The dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param startingAfterId A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call listMemberActivityCall(String memberId, Integer limit, ParameterOrderCreatedAt order, String startingAfterId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/members/{memberId}/activity"
            .replace("{" + "memberId" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (startingAfterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting_after_id", startingAfterId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMemberActivityValidateBeforeCall(String memberId, Integer limit, ParameterOrderCreatedAt order, String startingAfterId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling listMemberActivity(Async)");
        }

        return listMemberActivityCall(memberId, limit, order, startingAfterId, _callback);

    }

    /**
     * List Member Activity
     *   📘 Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to allow you to get member activities without having to provide the campaignId as a path parameter. Retrieves the list of activities for the given member ID related to a voucher and customer who is the holder of the voucher.
     * @param memberId Unique loyalty card assigned to a particular customer. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param order Apply this filter to order the events according the date and time when it was created. The dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param startingAfterId A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)
     * @return LoyaltiesMemberActivityListResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoyaltiesMemberActivityListResponseBody listMemberActivity(String memberId, Integer limit, ParameterOrderCreatedAt order, String startingAfterId) throws ApiException {
        ApiResponse<LoyaltiesMemberActivityListResponseBody> localVarResp = listMemberActivityWithHttpInfo(memberId, limit, order, startingAfterId);
        return localVarResp.getData();
    }

    /**
     * List Member Activity
     *   📘 Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to allow you to get member activities without having to provide the campaignId as a path parameter. Retrieves the list of activities for the given member ID related to a voucher and customer who is the holder of the voucher.
     * @param memberId Unique loyalty card assigned to a particular customer. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param order Apply this filter to order the events according the date and time when it was created. The dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param startingAfterId A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)
     * @return ApiResponse&lt;LoyaltiesMemberActivityListResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoyaltiesMemberActivityListResponseBody> listMemberActivityWithHttpInfo(String memberId, Integer limit, ParameterOrderCreatedAt order, String startingAfterId) throws ApiException {
        okhttp3.Call localVarCall = listMemberActivityValidateBeforeCall(memberId, limit, order, startingAfterId, null);
        Type localVarReturnType = new TypeToken<LoyaltiesMemberActivityListResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Member Activity (asynchronously)
     *   📘 Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to allow you to get member activities without having to provide the campaignId as a path parameter. Retrieves the list of activities for the given member ID related to a voucher and customer who is the holder of the voucher.
     * @param memberId Unique loyalty card assigned to a particular customer. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param order Apply this filter to order the events according the date and time when it was created. The dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param startingAfterId A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call listMemberActivityAsync(String memberId, Integer limit, ParameterOrderCreatedAt order, String startingAfterId, final ApiCallback<LoyaltiesMemberActivityListResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMemberActivityValidateBeforeCall(memberId, limit, order, startingAfterId, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesMemberActivityListResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMemberActivity1
     * @param campaignId Unique campaign ID. (required)
     * @param memberId A code that identifies the loyalty card. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param order Apply this filter to order the events according the date and time when it was created. The dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param startingAfterId A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call listMemberActivity1Call(String campaignId, String memberId, Integer limit, ParameterOrderCreatedAt order, String startingAfterId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/members/{memberId}/activity"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "memberId" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (startingAfterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting_after_id", startingAfterId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMemberActivity1ValidateBeforeCall(String campaignId, String memberId, Integer limit, ParameterOrderCreatedAt order, String startingAfterId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling listMemberActivity1(Async)");
        }

        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling listMemberActivity1(Async)");
        }

        return listMemberActivity1Call(campaignId, memberId, limit, order, startingAfterId, _callback);

    }

    /**
     * List Member Activity
     * Retrieves the list of activities for the given member ID related to a voucher and customer who is the holder of the voucher.
     * @param campaignId Unique campaign ID. (required)
     * @param memberId A code that identifies the loyalty card. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param order Apply this filter to order the events according the date and time when it was created. The dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param startingAfterId A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)
     * @return LoyaltiesMemberActivityListResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoyaltiesMemberActivityListResponseBody listMemberActivity1(String campaignId, String memberId, Integer limit, ParameterOrderCreatedAt order, String startingAfterId) throws ApiException {
        ApiResponse<LoyaltiesMemberActivityListResponseBody> localVarResp = listMemberActivity1WithHttpInfo(campaignId, memberId, limit, order, startingAfterId);
        return localVarResp.getData();
    }

    /**
     * List Member Activity
     * Retrieves the list of activities for the given member ID related to a voucher and customer who is the holder of the voucher.
     * @param campaignId Unique campaign ID. (required)
     * @param memberId A code that identifies the loyalty card. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param order Apply this filter to order the events according the date and time when it was created. The dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param startingAfterId A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)
     * @return ApiResponse&lt;LoyaltiesMemberActivityListResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoyaltiesMemberActivityListResponseBody> listMemberActivity1WithHttpInfo(String campaignId, String memberId, Integer limit, ParameterOrderCreatedAt order, String startingAfterId) throws ApiException {
        okhttp3.Call localVarCall = listMemberActivity1ValidateBeforeCall(campaignId, memberId, limit, order, startingAfterId, null);
        Type localVarReturnType = new TypeToken<LoyaltiesMemberActivityListResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Member Activity (asynchronously)
     * Retrieves the list of activities for the given member ID related to a voucher and customer who is the holder of the voucher.
     * @param campaignId Unique campaign ID. (required)
     * @param memberId A code that identifies the loyalty card. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param order Apply this filter to order the events according the date and time when it was created. The dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param startingAfterId A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call listMemberActivity1Async(String campaignId, String memberId, Integer limit, ParameterOrderCreatedAt order, String startingAfterId, final ApiCallback<LoyaltiesMemberActivityListResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMemberActivity1ValidateBeforeCall(campaignId, memberId, limit, order, startingAfterId, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesMemberActivityListResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMemberLoyaltyTier
     * @param memberId Unique loyalty card assigned to a particular customer. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call listMemberLoyaltyTierCall(String memberId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/members/{memberId}/tiers"
            .replace("{" + "memberId" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMemberLoyaltyTierValidateBeforeCall(String memberId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling listMemberLoyaltyTier(Async)");
        }

        return listMemberLoyaltyTierCall(memberId, _callback);

    }

    /**
     * List Member&#39;s Loyalty Tiers
     * Retrieve member tiers using the loyalty card ID.
     * @param memberId Unique loyalty card assigned to a particular customer. (required)
     * @return LoyaltiesMembersTiersListResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoyaltiesMembersTiersListResponseBody listMemberLoyaltyTier(String memberId) throws ApiException {
        ApiResponse<LoyaltiesMembersTiersListResponseBody> localVarResp = listMemberLoyaltyTierWithHttpInfo(memberId);
        return localVarResp.getData();
    }

    /**
     * List Member&#39;s Loyalty Tiers
     * Retrieve member tiers using the loyalty card ID.
     * @param memberId Unique loyalty card assigned to a particular customer. (required)
     * @return ApiResponse&lt;LoyaltiesMembersTiersListResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoyaltiesMembersTiersListResponseBody> listMemberLoyaltyTierWithHttpInfo(String memberId) throws ApiException {
        okhttp3.Call localVarCall = listMemberLoyaltyTierValidateBeforeCall(memberId, null);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersTiersListResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Member&#39;s Loyalty Tiers (asynchronously)
     * Retrieve member tiers using the loyalty card ID.
     * @param memberId Unique loyalty card assigned to a particular customer. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call listMemberLoyaltyTierAsync(String memberId, final ApiCallback<LoyaltiesMembersTiersListResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMemberLoyaltyTierValidateBeforeCall(memberId, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersTiersListResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMemberPendingPoints
     * @param memberId Unique loyalty card code assigned to a particular customer. (required)
     * @param limit Limit the number of the pending point entries that the API returns in the response. (optional)
     * @param order Orders the pending point entries according the pending point entry ID. The dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param startingAfterId A cursor for pagination. It retrieves the results starting after a result with the given ID. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call listMemberPendingPointsCall(String memberId, Integer limit, ParameterOrderListPendingPoints order, String startingAfterId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/members/{memberId}/pending-points"
            .replace("{" + "memberId" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (startingAfterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting_after_id", startingAfterId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMemberPendingPointsValidateBeforeCall(String memberId, Integer limit, ParameterOrderListPendingPoints order, String startingAfterId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling listMemberPendingPoints(Async)");
        }

        return listMemberPendingPointsCall(memberId, limit, order, startingAfterId, _callback);

    }

    /**
     * List Member Pending Points
     *   📘 Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to list member pending points without having to provide the campaignId as a path parameter. Lists all pending points that are currently assigned to the loyalty card. Once the points are added to the card, the entry is no longer returned. 👍 Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
     * @param memberId Unique loyalty card code assigned to a particular customer. (required)
     * @param limit Limit the number of the pending point entries that the API returns in the response. (optional)
     * @param order Orders the pending point entries according the pending point entry ID. The dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param startingAfterId A cursor for pagination. It retrieves the results starting after a result with the given ID. (optional)
     * @return LoyaltiesMembersPendingPointsListResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoyaltiesMembersPendingPointsListResponseBody listMemberPendingPoints(String memberId, Integer limit, ParameterOrderListPendingPoints order, String startingAfterId) throws ApiException {
        ApiResponse<LoyaltiesMembersPendingPointsListResponseBody> localVarResp = listMemberPendingPointsWithHttpInfo(memberId, limit, order, startingAfterId);
        return localVarResp.getData();
    }

    /**
     * List Member Pending Points
     *   📘 Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to list member pending points without having to provide the campaignId as a path parameter. Lists all pending points that are currently assigned to the loyalty card. Once the points are added to the card, the entry is no longer returned. 👍 Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
     * @param memberId Unique loyalty card code assigned to a particular customer. (required)
     * @param limit Limit the number of the pending point entries that the API returns in the response. (optional)
     * @param order Orders the pending point entries according the pending point entry ID. The dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param startingAfterId A cursor for pagination. It retrieves the results starting after a result with the given ID. (optional)
     * @return ApiResponse&lt;LoyaltiesMembersPendingPointsListResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoyaltiesMembersPendingPointsListResponseBody> listMemberPendingPointsWithHttpInfo(String memberId, Integer limit, ParameterOrderListPendingPoints order, String startingAfterId) throws ApiException {
        okhttp3.Call localVarCall = listMemberPendingPointsValidateBeforeCall(memberId, limit, order, startingAfterId, null);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersPendingPointsListResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Member Pending Points (asynchronously)
     *   📘 Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to list member pending points without having to provide the campaignId as a path parameter. Lists all pending points that are currently assigned to the loyalty card. Once the points are added to the card, the entry is no longer returned. 👍 Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
     * @param memberId Unique loyalty card code assigned to a particular customer. (required)
     * @param limit Limit the number of the pending point entries that the API returns in the response. (optional)
     * @param order Orders the pending point entries according the pending point entry ID. The dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param startingAfterId A cursor for pagination. It retrieves the results starting after a result with the given ID. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call listMemberPendingPointsAsync(String memberId, Integer limit, ParameterOrderListPendingPoints order, String startingAfterId, final ApiCallback<LoyaltiesMembersPendingPointsListResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMemberPendingPointsValidateBeforeCall(memberId, limit, order, startingAfterId, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersPendingPointsListResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMemberPendingPoints1
     * @param campaignId Unique campaign ID. (required)
     * @param memberId Unique loyalty card code assigned to a particular customer. (required)
     * @param limit Limit the number of the pending point entries that the API returns in the response. (optional)
     * @param order Orders the pending point entries according the pending point entry ID. The dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param startingAfterId A cursor for pagination. It retrieves the results starting after a result with the given ID. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call listMemberPendingPoints1Call(String campaignId, String memberId, Integer limit, ParameterOrderListPendingPoints order, String startingAfterId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/members/{memberId}/pending-points"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "memberId" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (startingAfterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting_after_id", startingAfterId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMemberPendingPoints1ValidateBeforeCall(String campaignId, String memberId, Integer limit, ParameterOrderListPendingPoints order, String startingAfterId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling listMemberPendingPoints1(Async)");
        }

        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling listMemberPendingPoints1(Async)");
        }

        return listMemberPendingPoints1Call(campaignId, memberId, limit, order, startingAfterId, _callback);

    }

    /**
     * List Member Pending Points
     * Lists all pending points that are currently assigned to the loyalty card. Once the points are added to the card, the entry is no longer returned. 👍 Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
     * @param campaignId Unique campaign ID. (required)
     * @param memberId Unique loyalty card code assigned to a particular customer. (required)
     * @param limit Limit the number of the pending point entries that the API returns in the response. (optional)
     * @param order Orders the pending point entries according the pending point entry ID. The dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param startingAfterId A cursor for pagination. It retrieves the results starting after a result with the given ID. (optional)
     * @return LoyaltiesMembersPendingPointsListResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoyaltiesMembersPendingPointsListResponseBody listMemberPendingPoints1(String campaignId, String memberId, Integer limit, ParameterOrderListPendingPoints order, String startingAfterId) throws ApiException {
        ApiResponse<LoyaltiesMembersPendingPointsListResponseBody> localVarResp = listMemberPendingPoints1WithHttpInfo(campaignId, memberId, limit, order, startingAfterId);
        return localVarResp.getData();
    }

    /**
     * List Member Pending Points
     * Lists all pending points that are currently assigned to the loyalty card. Once the points are added to the card, the entry is no longer returned. 👍 Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
     * @param campaignId Unique campaign ID. (required)
     * @param memberId Unique loyalty card code assigned to a particular customer. (required)
     * @param limit Limit the number of the pending point entries that the API returns in the response. (optional)
     * @param order Orders the pending point entries according the pending point entry ID. The dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param startingAfterId A cursor for pagination. It retrieves the results starting after a result with the given ID. (optional)
     * @return ApiResponse&lt;LoyaltiesMembersPendingPointsListResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoyaltiesMembersPendingPointsListResponseBody> listMemberPendingPoints1WithHttpInfo(String campaignId, String memberId, Integer limit, ParameterOrderListPendingPoints order, String startingAfterId) throws ApiException {
        okhttp3.Call localVarCall = listMemberPendingPoints1ValidateBeforeCall(campaignId, memberId, limit, order, startingAfterId, null);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersPendingPointsListResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Member Pending Points (asynchronously)
     * Lists all pending points that are currently assigned to the loyalty card. Once the points are added to the card, the entry is no longer returned. 👍 Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
     * @param campaignId Unique campaign ID. (required)
     * @param memberId Unique loyalty card code assigned to a particular customer. (required)
     * @param limit Limit the number of the pending point entries that the API returns in the response. (optional)
     * @param order Orders the pending point entries according the pending point entry ID. The dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param startingAfterId A cursor for pagination. It retrieves the results starting after a result with the given ID. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call listMemberPendingPoints1Async(String campaignId, String memberId, Integer limit, ParameterOrderListPendingPoints order, String startingAfterId, final ApiCallback<LoyaltiesMembersPendingPointsListResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMemberPendingPoints1ValidateBeforeCall(campaignId, memberId, limit, order, startingAfterId, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersPendingPointsListResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMemberRewards
     * @param memberId Unique loyalty card assigned to a particular customer. (required)
     * @param affordableOnly Limit the results to rewards that the customer can actually afford (only rewards whose price in points is not higher than the loyalty points balance on a loyalty card). Set this flag to true to return rewards which the customer can actually afford. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call listMemberRewardsCall(String memberId, Boolean affordableOnly, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/members/{memberId}/rewards"
            .replace("{" + "memberId" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (affordableOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("affordable_only", affordableOnly));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMemberRewardsValidateBeforeCall(String memberId, Boolean affordableOnly, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling listMemberRewards(Async)");
        }

        return listMemberRewardsCall(memberId, affordableOnly, _callback);

    }

    /**
     * List Member Rewards
     * Retrieves the list of rewards that the given customer (identified by member_id, which is a loyalty card assigned to a particular customer) **can get in exchange for loyalty points**.   You can use the affordable_only parameter to limit the results to rewards that the customer can actually afford (only rewards whose price in points is not higher than the loyalty points balance on a loyalty card).   Please note that rewards that are disabled (i.e. set to Not Available in the Dashboard) for a given loyalty tier reward mapping will not be returned in this endpoint.
     * @param memberId Unique loyalty card assigned to a particular customer. (required)
     * @param affordableOnly Limit the results to rewards that the customer can actually afford (only rewards whose price in points is not higher than the loyalty points balance on a loyalty card). Set this flag to true to return rewards which the customer can actually afford. (optional)
     * @return LoyaltiesMembersRewardsListResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoyaltiesMembersRewardsListResponseBody listMemberRewards(String memberId, Boolean affordableOnly) throws ApiException {
        ApiResponse<LoyaltiesMembersRewardsListResponseBody> localVarResp = listMemberRewardsWithHttpInfo(memberId, affordableOnly);
        return localVarResp.getData();
    }

    /**
     * List Member Rewards
     * Retrieves the list of rewards that the given customer (identified by member_id, which is a loyalty card assigned to a particular customer) **can get in exchange for loyalty points**.   You can use the affordable_only parameter to limit the results to rewards that the customer can actually afford (only rewards whose price in points is not higher than the loyalty points balance on a loyalty card).   Please note that rewards that are disabled (i.e. set to Not Available in the Dashboard) for a given loyalty tier reward mapping will not be returned in this endpoint.
     * @param memberId Unique loyalty card assigned to a particular customer. (required)
     * @param affordableOnly Limit the results to rewards that the customer can actually afford (only rewards whose price in points is not higher than the loyalty points balance on a loyalty card). Set this flag to true to return rewards which the customer can actually afford. (optional)
     * @return ApiResponse&lt;LoyaltiesMembersRewardsListResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoyaltiesMembersRewardsListResponseBody> listMemberRewardsWithHttpInfo(String memberId, Boolean affordableOnly) throws ApiException {
        okhttp3.Call localVarCall = listMemberRewardsValidateBeforeCall(memberId, affordableOnly, null);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersRewardsListResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Member Rewards (asynchronously)
     * Retrieves the list of rewards that the given customer (identified by member_id, which is a loyalty card assigned to a particular customer) **can get in exchange for loyalty points**.   You can use the affordable_only parameter to limit the results to rewards that the customer can actually afford (only rewards whose price in points is not higher than the loyalty points balance on a loyalty card).   Please note that rewards that are disabled (i.e. set to Not Available in the Dashboard) for a given loyalty tier reward mapping will not be returned in this endpoint.
     * @param memberId Unique loyalty card assigned to a particular customer. (required)
     * @param affordableOnly Limit the results to rewards that the customer can actually afford (only rewards whose price in points is not higher than the loyalty points balance on a loyalty card). Set this flag to true to return rewards which the customer can actually afford. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call listMemberRewardsAsync(String memberId, Boolean affordableOnly, final ApiCallback<LoyaltiesMembersRewardsListResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMemberRewardsValidateBeforeCall(memberId, affordableOnly, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersRewardsListResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMembers
     * @param campaignId Unique campaign ID of the loyalty program. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param customer A tracking identifier of a customer who is the holder of the vouchers. It can be an id generated by Voucherify or the source_id. Remember to use the proper URL escape codes if the source_id contains special characters. (optional)
     * @param createdAt A filter on the list based on the object created_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z (optional)
     * @param updatedAt A filter on the list based on the object updated_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [updated_at][before] 2017-09-08T13:52:18.227Z (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param code  (optional)
     * @param ids  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call listMembersCall(String campaignId, Integer limit, Integer page, String customer, ParameterCreatedBeforeAfter createdAt, ParameterUpdatedBeforeAfter updatedAt, ParameterOrderVouchers order, String code, List<String> ids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/members"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (customer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customer", customer));
        }

        if (createdAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at", createdAt));
        }

        if (updatedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updated_at", updatedAt));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (code != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code", code));
        }

        if (ids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMembersValidateBeforeCall(String campaignId, Integer limit, Integer page, String customer, ParameterCreatedBeforeAfter createdAt, ParameterUpdatedBeforeAfter updatedAt, ParameterOrderVouchers order, String code, List<String> ids, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling listMembers(Async)");
        }

        return listMembersCall(campaignId, limit, page, customer, createdAt, updatedAt, order, code, ids, _callback);

    }

    /**
     * List Members
     * Returns a list of your loyalty cards. The loyalty cards are sorted by creation date, with the most recent loyalty cards appearing first.
     * @param campaignId Unique campaign ID of the loyalty program. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param customer A tracking identifier of a customer who is the holder of the vouchers. It can be an id generated by Voucherify or the source_id. Remember to use the proper URL escape codes if the source_id contains special characters. (optional)
     * @param createdAt A filter on the list based on the object created_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z (optional)
     * @param updatedAt A filter on the list based on the object updated_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [updated_at][before] 2017-09-08T13:52:18.227Z (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param code  (optional)
     * @param ids  (optional)
     * @return LoyaltiesListMembersResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoyaltiesListMembersResponseBody listMembers(String campaignId, Integer limit, Integer page, String customer, ParameterCreatedBeforeAfter createdAt, ParameterUpdatedBeforeAfter updatedAt, ParameterOrderVouchers order, String code, List<String> ids) throws ApiException {
        ApiResponse<LoyaltiesListMembersResponseBody> localVarResp = listMembersWithHttpInfo(campaignId, limit, page, customer, createdAt, updatedAt, order, code, ids);
        return localVarResp.getData();
    }

    /**
     * List Members
     * Returns a list of your loyalty cards. The loyalty cards are sorted by creation date, with the most recent loyalty cards appearing first.
     * @param campaignId Unique campaign ID of the loyalty program. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param customer A tracking identifier of a customer who is the holder of the vouchers. It can be an id generated by Voucherify or the source_id. Remember to use the proper URL escape codes if the source_id contains special characters. (optional)
     * @param createdAt A filter on the list based on the object created_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z (optional)
     * @param updatedAt A filter on the list based on the object updated_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [updated_at][before] 2017-09-08T13:52:18.227Z (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param code  (optional)
     * @param ids  (optional)
     * @return ApiResponse&lt;LoyaltiesListMembersResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoyaltiesListMembersResponseBody> listMembersWithHttpInfo(String campaignId, Integer limit, Integer page, String customer, ParameterCreatedBeforeAfter createdAt, ParameterUpdatedBeforeAfter updatedAt, ParameterOrderVouchers order, String code, List<String> ids) throws ApiException {
        okhttp3.Call localVarCall = listMembersValidateBeforeCall(campaignId, limit, page, customer, createdAt, updatedAt, order, code, ids, null);
        Type localVarReturnType = new TypeToken<LoyaltiesListMembersResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Members (asynchronously)
     * Returns a list of your loyalty cards. The loyalty cards are sorted by creation date, with the most recent loyalty cards appearing first.
     * @param campaignId Unique campaign ID of the loyalty program. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param customer A tracking identifier of a customer who is the holder of the vouchers. It can be an id generated by Voucherify or the source_id. Remember to use the proper URL escape codes if the source_id contains special characters. (optional)
     * @param createdAt A filter on the list based on the object created_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z (optional)
     * @param updatedAt A filter on the list based on the object updated_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [updated_at][before] 2017-09-08T13:52:18.227Z (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param code  (optional)
     * @param ids  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call listMembersAsync(String campaignId, Integer limit, Integer page, String customer, ParameterCreatedBeforeAfter createdAt, ParameterUpdatedBeforeAfter updatedAt, ParameterOrderVouchers order, String code, List<String> ids, final ApiCallback<LoyaltiesListMembersResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMembersValidateBeforeCall(campaignId, limit, page, customer, createdAt, updatedAt, order, code, ids, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesListMembersResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPointsExpiration
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param memberId Loyalty card code. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call listPointsExpirationCall(String campaignId, String memberId, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/members/{memberId}/points-expiration"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "memberId" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPointsExpirationValidateBeforeCall(String campaignId, String memberId, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling listPointsExpiration(Async)");
        }

        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling listPointsExpiration(Async)");
        }

        return listPointsExpirationCall(campaignId, memberId, limit, page, _callback);

    }

    /**
     * List Loyalty Card Point Expiration
     * Retrieve loyalty point expiration buckets for a given loyalty card. Expired point buckets are not returned in this endpoint. You can use the Exports API to retrieve a list of both ACTIVE and EXPIRED point buckets.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param memberId Loyalty card code. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @return LoyaltiesMembersPointsExpirationListResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoyaltiesMembersPointsExpirationListResponseBody listPointsExpiration(String campaignId, String memberId, Integer limit, Integer page) throws ApiException {
        ApiResponse<LoyaltiesMembersPointsExpirationListResponseBody> localVarResp = listPointsExpirationWithHttpInfo(campaignId, memberId, limit, page);
        return localVarResp.getData();
    }

    /**
     * List Loyalty Card Point Expiration
     * Retrieve loyalty point expiration buckets for a given loyalty card. Expired point buckets are not returned in this endpoint. You can use the Exports API to retrieve a list of both ACTIVE and EXPIRED point buckets.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param memberId Loyalty card code. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @return ApiResponse&lt;LoyaltiesMembersPointsExpirationListResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoyaltiesMembersPointsExpirationListResponseBody> listPointsExpirationWithHttpInfo(String campaignId, String memberId, Integer limit, Integer page) throws ApiException {
        okhttp3.Call localVarCall = listPointsExpirationValidateBeforeCall(campaignId, memberId, limit, page, null);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersPointsExpirationListResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Loyalty Card Point Expiration (asynchronously)
     * Retrieve loyalty point expiration buckets for a given loyalty card. Expired point buckets are not returned in this endpoint. You can use the Exports API to retrieve a list of both ACTIVE and EXPIRED point buckets.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param memberId Loyalty card code. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call listPointsExpirationAsync(String campaignId, String memberId, Integer limit, Integer page, final ApiCallback<LoyaltiesMembersPointsExpirationListResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPointsExpirationValidateBeforeCall(campaignId, memberId, limit, page, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersPointsExpirationListResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listRewardAssignments1
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param assignmentId A unique reward assignment ID. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call listRewardAssignments1Call(String campaignId, Integer limit, Integer page, String assignmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/reward-assignments"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (assignmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assignmentId", assignmentId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRewardAssignments1ValidateBeforeCall(String campaignId, Integer limit, Integer page, String assignmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling listRewardAssignments1(Async)");
        }

        return listRewardAssignments1Call(campaignId, limit, page, assignmentId, _callback);

    }

    /**
     * List Reward Assignments
     * Returns reward assignments from a given loyalty campaign.  📘 Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to be more contextual to the type of data returned in the response.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param assignmentId A unique reward assignment ID. (optional)
     * @return LoyaltiesRewardAssignmentsListResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoyaltiesRewardAssignmentsListResponseBody listRewardAssignments1(String campaignId, Integer limit, Integer page, String assignmentId) throws ApiException {
        ApiResponse<LoyaltiesRewardAssignmentsListResponseBody> localVarResp = listRewardAssignments1WithHttpInfo(campaignId, limit, page, assignmentId);
        return localVarResp.getData();
    }

    /**
     * List Reward Assignments
     * Returns reward assignments from a given loyalty campaign.  📘 Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to be more contextual to the type of data returned in the response.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param assignmentId A unique reward assignment ID. (optional)
     * @return ApiResponse&lt;LoyaltiesRewardAssignmentsListResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoyaltiesRewardAssignmentsListResponseBody> listRewardAssignments1WithHttpInfo(String campaignId, Integer limit, Integer page, String assignmentId) throws ApiException {
        okhttp3.Call localVarCall = listRewardAssignments1ValidateBeforeCall(campaignId, limit, page, assignmentId, null);
        Type localVarReturnType = new TypeToken<LoyaltiesRewardAssignmentsListResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Reward Assignments (asynchronously)
     * Returns reward assignments from a given loyalty campaign.  📘 Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to be more contextual to the type of data returned in the response.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param assignmentId A unique reward assignment ID. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call listRewardAssignments1Async(String campaignId, Integer limit, Integer page, String assignmentId, final ApiCallback<LoyaltiesRewardAssignmentsListResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRewardAssignments1ValidateBeforeCall(campaignId, limit, page, assignmentId, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesRewardAssignmentsListResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listRewardAssignments2
     * @param campaignId Unique campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param assignmentId A unique reward assignment ID. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call listRewardAssignments2Call(String campaignId, Integer limit, Integer page, String assignmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/rewards"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (assignmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assignment_id", assignmentId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRewardAssignments2ValidateBeforeCall(String campaignId, Integer limit, Integer page, String assignmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling listRewardAssignments2(Async)");
        }

        return listRewardAssignments2Call(campaignId, limit, page, assignmentId, _callback);

    }

    /**
     * List Reward Assignments
     * Returns active rewards from a given loyalty campaign.
     * @param campaignId Unique campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param assignmentId A unique reward assignment ID. (optional)
     * @return LoyaltiesRewardsListAssignmentsResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoyaltiesRewardsListAssignmentsResponseBody listRewardAssignments2(String campaignId, Integer limit, Integer page, String assignmentId) throws ApiException {
        ApiResponse<LoyaltiesRewardsListAssignmentsResponseBody> localVarResp = listRewardAssignments2WithHttpInfo(campaignId, limit, page, assignmentId);
        return localVarResp.getData();
    }

    /**
     * List Reward Assignments
     * Returns active rewards from a given loyalty campaign.
     * @param campaignId Unique campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param assignmentId A unique reward assignment ID. (optional)
     * @return ApiResponse&lt;LoyaltiesRewardsListAssignmentsResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoyaltiesRewardsListAssignmentsResponseBody> listRewardAssignments2WithHttpInfo(String campaignId, Integer limit, Integer page, String assignmentId) throws ApiException {
        okhttp3.Call localVarCall = listRewardAssignments2ValidateBeforeCall(campaignId, limit, page, assignmentId, null);
        Type localVarReturnType = new TypeToken<LoyaltiesRewardsListAssignmentsResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Reward Assignments (asynchronously)
     * Returns active rewards from a given loyalty campaign.
     * @param campaignId Unique campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param assignmentId A unique reward assignment ID. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call listRewardAssignments2Async(String campaignId, Integer limit, Integer page, String assignmentId, final ApiCallback<LoyaltiesRewardsListAssignmentsResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRewardAssignments2ValidateBeforeCall(campaignId, limit, page, assignmentId, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesRewardsListAssignmentsResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for redeemReward
     * @param memberId Unique loyalty card assigned to a particular customer. (required)
     * @param loyaltiesMembersRedemptionRedeemRequestBody Specify the reward to be redeemed. In case of a pay with points reward, specify the order and the number of points to be applied to the order. Please note that if you do not specify the amount of points, the application will default to applying the number of points to pay for the remainder of the order. If the limit of available points on the card is reached, then only the available points on the card will be applied to the order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call redeemRewardCall(String memberId, LoyaltiesMembersRedemptionRedeemRequestBody loyaltiesMembersRedemptionRedeemRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = loyaltiesMembersRedemptionRedeemRequestBody;

        // create path and map variables
        String localVarPath = "/v1/loyalties/members/{memberId}/redemption"
            .replace("{" + "memberId" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call redeemRewardValidateBeforeCall(String memberId, LoyaltiesMembersRedemptionRedeemRequestBody loyaltiesMembersRedemptionRedeemRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling redeemReward(Async)");
        }

        return redeemRewardCall(memberId, loyaltiesMembersRedemptionRedeemRequestBody, _callback);

    }

    /**
     * Redeem Reward
     *   📘 Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to allow you to redeem a reward without having to provide the campaignId as a path parameter.
     * @param memberId Unique loyalty card assigned to a particular customer. (required)
     * @param loyaltiesMembersRedemptionRedeemRequestBody Specify the reward to be redeemed. In case of a pay with points reward, specify the order and the number of points to be applied to the order. Please note that if you do not specify the amount of points, the application will default to applying the number of points to pay for the remainder of the order. If the limit of available points on the card is reached, then only the available points on the card will be applied to the order. (optional)
     * @return LoyaltiesMembersRedemptionRedeemResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoyaltiesMembersRedemptionRedeemResponseBody redeemReward(String memberId, LoyaltiesMembersRedemptionRedeemRequestBody loyaltiesMembersRedemptionRedeemRequestBody) throws ApiException {
        ApiResponse<LoyaltiesMembersRedemptionRedeemResponseBody> localVarResp = redeemRewardWithHttpInfo(memberId, loyaltiesMembersRedemptionRedeemRequestBody);
        return localVarResp.getData();
    }

    /**
     * Redeem Reward
     *   📘 Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to allow you to redeem a reward without having to provide the campaignId as a path parameter.
     * @param memberId Unique loyalty card assigned to a particular customer. (required)
     * @param loyaltiesMembersRedemptionRedeemRequestBody Specify the reward to be redeemed. In case of a pay with points reward, specify the order and the number of points to be applied to the order. Please note that if you do not specify the amount of points, the application will default to applying the number of points to pay for the remainder of the order. If the limit of available points on the card is reached, then only the available points on the card will be applied to the order. (optional)
     * @return ApiResponse&lt;LoyaltiesMembersRedemptionRedeemResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoyaltiesMembersRedemptionRedeemResponseBody> redeemRewardWithHttpInfo(String memberId, LoyaltiesMembersRedemptionRedeemRequestBody loyaltiesMembersRedemptionRedeemRequestBody) throws ApiException {
        okhttp3.Call localVarCall = redeemRewardValidateBeforeCall(memberId, loyaltiesMembersRedemptionRedeemRequestBody, null);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersRedemptionRedeemResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Redeem Reward (asynchronously)
     *   📘 Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to allow you to redeem a reward without having to provide the campaignId as a path parameter.
     * @param memberId Unique loyalty card assigned to a particular customer. (required)
     * @param loyaltiesMembersRedemptionRedeemRequestBody Specify the reward to be redeemed. In case of a pay with points reward, specify the order and the number of points to be applied to the order. Please note that if you do not specify the amount of points, the application will default to applying the number of points to pay for the remainder of the order. If the limit of available points on the card is reached, then only the available points on the card will be applied to the order. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call redeemRewardAsync(String memberId, LoyaltiesMembersRedemptionRedeemRequestBody loyaltiesMembersRedemptionRedeemRequestBody, final ApiCallback<LoyaltiesMembersRedemptionRedeemResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = redeemRewardValidateBeforeCall(memberId, loyaltiesMembersRedemptionRedeemRequestBody, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersRedemptionRedeemResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for redeemReward1
     * @param campaignId Unique campaign ID. (required)
     * @param memberId A code that identifies the loyalty card. (required)
     * @param loyaltiesMembersRedemptionRedeemRequestBody Specify the reward to be redeemed. In case of a pay with points reward, specify the order and the number of points to be applied to the order. Please note that if you do not specify the amount of points, the application will default to applying the number of points to pay for the remainder of the order. If the limit of available points on the card is reached, then only the available points on the card will be applied to the order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call redeemReward1Call(String campaignId, String memberId, LoyaltiesMembersRedemptionRedeemRequestBody loyaltiesMembersRedemptionRedeemRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = loyaltiesMembersRedemptionRedeemRequestBody;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/members/{memberId}/redemption"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "memberId" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call redeemReward1ValidateBeforeCall(String campaignId, String memberId, LoyaltiesMembersRedemptionRedeemRequestBody loyaltiesMembersRedemptionRedeemRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling redeemReward1(Async)");
        }

        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling redeemReward1(Async)");
        }

        return redeemReward1Call(campaignId, memberId, loyaltiesMembersRedemptionRedeemRequestBody, _callback);

    }

    /**
     * Redeem Reward
     * Exchange points from a loyalty card for a specified reward. This API method returns an assigned award in the response. It means that if a requesting customer gets a coupon code with a discount for the next order, that discount code will be visible in response as part of the reward object definition.
     * @param campaignId Unique campaign ID. (required)
     * @param memberId A code that identifies the loyalty card. (required)
     * @param loyaltiesMembersRedemptionRedeemRequestBody Specify the reward to be redeemed. In case of a pay with points reward, specify the order and the number of points to be applied to the order. Please note that if you do not specify the amount of points, the application will default to applying the number of points to pay for the remainder of the order. If the limit of available points on the card is reached, then only the available points on the card will be applied to the order. (optional)
     * @return LoyaltiesMembersRedemptionRedeemResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoyaltiesMembersRedemptionRedeemResponseBody redeemReward1(String campaignId, String memberId, LoyaltiesMembersRedemptionRedeemRequestBody loyaltiesMembersRedemptionRedeemRequestBody) throws ApiException {
        ApiResponse<LoyaltiesMembersRedemptionRedeemResponseBody> localVarResp = redeemReward1WithHttpInfo(campaignId, memberId, loyaltiesMembersRedemptionRedeemRequestBody);
        return localVarResp.getData();
    }

    /**
     * Redeem Reward
     * Exchange points from a loyalty card for a specified reward. This API method returns an assigned award in the response. It means that if a requesting customer gets a coupon code with a discount for the next order, that discount code will be visible in response as part of the reward object definition.
     * @param campaignId Unique campaign ID. (required)
     * @param memberId A code that identifies the loyalty card. (required)
     * @param loyaltiesMembersRedemptionRedeemRequestBody Specify the reward to be redeemed. In case of a pay with points reward, specify the order and the number of points to be applied to the order. Please note that if you do not specify the amount of points, the application will default to applying the number of points to pay for the remainder of the order. If the limit of available points on the card is reached, then only the available points on the card will be applied to the order. (optional)
     * @return ApiResponse&lt;LoyaltiesMembersRedemptionRedeemResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoyaltiesMembersRedemptionRedeemResponseBody> redeemReward1WithHttpInfo(String campaignId, String memberId, LoyaltiesMembersRedemptionRedeemRequestBody loyaltiesMembersRedemptionRedeemRequestBody) throws ApiException {
        okhttp3.Call localVarCall = redeemReward1ValidateBeforeCall(campaignId, memberId, loyaltiesMembersRedemptionRedeemRequestBody, null);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersRedemptionRedeemResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Redeem Reward (asynchronously)
     * Exchange points from a loyalty card for a specified reward. This API method returns an assigned award in the response. It means that if a requesting customer gets a coupon code with a discount for the next order, that discount code will be visible in response as part of the reward object definition.
     * @param campaignId Unique campaign ID. (required)
     * @param memberId A code that identifies the loyalty card. (required)
     * @param loyaltiesMembersRedemptionRedeemRequestBody Specify the reward to be redeemed. In case of a pay with points reward, specify the order and the number of points to be applied to the order. Please note that if you do not specify the amount of points, the application will default to applying the number of points to pay for the remainder of the order. If the limit of available points on the card is reached, then only the available points on the card will be applied to the order. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call redeemReward1Async(String campaignId, String memberId, LoyaltiesMembersRedemptionRedeemRequestBody loyaltiesMembersRedemptionRedeemRequestBody, final ApiCallback<LoyaltiesMembersRedemptionRedeemResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = redeemReward1ValidateBeforeCall(campaignId, memberId, loyaltiesMembersRedemptionRedeemRequestBody, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersRedemptionRedeemResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferPoints
     * @param campaignId A unique identifier of the loyalty campaign containing the voucher to which the loyalty points will be sent (destination). (required)
     * @param memberId A unique code identifying the loyalty card to which the user wants to transfer loyalty points (destination). (required)
     * @param loyaltiesTransferPoints Provide the loyalty cards you want the points to be transferred from and the number of points to transfer from each card. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call transferPointsCall(String campaignId, String memberId, List<LoyaltiesTransferPoints> loyaltiesTransferPoints, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = loyaltiesTransferPoints;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/members/{memberId}/transfers"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "memberId" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferPointsValidateBeforeCall(String campaignId, String memberId, List<LoyaltiesTransferPoints> loyaltiesTransferPoints, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling transferPoints(Async)");
        }

        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling transferPoints(Async)");
        }

        return transferPointsCall(campaignId, memberId, loyaltiesTransferPoints, _callback);

    }

    /**
     * Transfer Loyalty Points
     * Transfer points between different loyalty cards which have holders. You need to provide the campaign ID and the loyalty card ID you want the points to be transferred to as path parameters in the URL. In the request body, you provide the loyalty cards you want the points to be transferred from and the number of points to transfer from each card. Transfer works only for loyalty cards that have holders, meaning they were published to customers.
     * @param campaignId A unique identifier of the loyalty campaign containing the voucher to which the loyalty points will be sent (destination). (required)
     * @param memberId A unique code identifying the loyalty card to which the user wants to transfer loyalty points (destination). (required)
     * @param loyaltiesTransferPoints Provide the loyalty cards you want the points to be transferred from and the number of points to transfer from each card. (optional)
     * @return LoyaltiesMembersTransfersCreateResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoyaltiesMembersTransfersCreateResponseBody transferPoints(String campaignId, String memberId, List<LoyaltiesTransferPoints> loyaltiesTransferPoints) throws ApiException {
        ApiResponse<LoyaltiesMembersTransfersCreateResponseBody> localVarResp = transferPointsWithHttpInfo(campaignId, memberId, loyaltiesTransferPoints);
        return localVarResp.getData();
    }

    /**
     * Transfer Loyalty Points
     * Transfer points between different loyalty cards which have holders. You need to provide the campaign ID and the loyalty card ID you want the points to be transferred to as path parameters in the URL. In the request body, you provide the loyalty cards you want the points to be transferred from and the number of points to transfer from each card. Transfer works only for loyalty cards that have holders, meaning they were published to customers.
     * @param campaignId A unique identifier of the loyalty campaign containing the voucher to which the loyalty points will be sent (destination). (required)
     * @param memberId A unique code identifying the loyalty card to which the user wants to transfer loyalty points (destination). (required)
     * @param loyaltiesTransferPoints Provide the loyalty cards you want the points to be transferred from and the number of points to transfer from each card. (optional)
     * @return ApiResponse&lt;LoyaltiesMembersTransfersCreateResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoyaltiesMembersTransfersCreateResponseBody> transferPointsWithHttpInfo(String campaignId, String memberId, List<LoyaltiesTransferPoints> loyaltiesTransferPoints) throws ApiException {
        okhttp3.Call localVarCall = transferPointsValidateBeforeCall(campaignId, memberId, loyaltiesTransferPoints, null);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersTransfersCreateResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Transfer Loyalty Points (asynchronously)
     * Transfer points between different loyalty cards which have holders. You need to provide the campaign ID and the loyalty card ID you want the points to be transferred to as path parameters in the URL. In the request body, you provide the loyalty cards you want the points to be transferred from and the number of points to transfer from each card. Transfer works only for loyalty cards that have holders, meaning they were published to customers.
     * @param campaignId A unique identifier of the loyalty campaign containing the voucher to which the loyalty points will be sent (destination). (required)
     * @param memberId A unique code identifying the loyalty card to which the user wants to transfer loyalty points (destination). (required)
     * @param loyaltiesTransferPoints Provide the loyalty cards you want the points to be transferred from and the number of points to transfer from each card. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call transferPointsAsync(String campaignId, String memberId, List<LoyaltiesTransferPoints> loyaltiesTransferPoints, final ApiCallback<LoyaltiesMembersTransfersCreateResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferPointsValidateBeforeCall(campaignId, memberId, loyaltiesTransferPoints, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersTransfersCreateResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateEarningRule
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param earningRuleId A unique earning rule ID. (required)
     * @param loyaltiesEarningRulesUpdateRequestBody Specify the parameters that you would like to update for the given earning rule. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call updateEarningRuleCall(String campaignId, String earningRuleId, LoyaltiesEarningRulesUpdateRequestBody loyaltiesEarningRulesUpdateRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = loyaltiesEarningRulesUpdateRequestBody;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/earning-rules/{earningRuleId}"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "earningRuleId" + "}", localVarApiClient.escapeString(earningRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEarningRuleValidateBeforeCall(String campaignId, String earningRuleId, LoyaltiesEarningRulesUpdateRequestBody loyaltiesEarningRulesUpdateRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling updateEarningRule(Async)");
        }

        // verify the required parameter 'earningRuleId' is set
        if (earningRuleId == null) {
            throw new ApiException("Missing the required parameter 'earningRuleId' when calling updateEarningRule(Async)");
        }

        return updateEarningRuleCall(campaignId, earningRuleId, loyaltiesEarningRulesUpdateRequestBody, _callback);

    }

    /**
     * Update Earning Rule
     * Update an earning rule definition.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param earningRuleId A unique earning rule ID. (required)
     * @param loyaltiesEarningRulesUpdateRequestBody Specify the parameters that you would like to update for the given earning rule. (optional)
     * @return LoyaltiesEarningRulesUpdateResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoyaltiesEarningRulesUpdateResponseBody updateEarningRule(String campaignId, String earningRuleId, LoyaltiesEarningRulesUpdateRequestBody loyaltiesEarningRulesUpdateRequestBody) throws ApiException {
        ApiResponse<LoyaltiesEarningRulesUpdateResponseBody> localVarResp = updateEarningRuleWithHttpInfo(campaignId, earningRuleId, loyaltiesEarningRulesUpdateRequestBody);
        return localVarResp.getData();
    }

    /**
     * Update Earning Rule
     * Update an earning rule definition.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param earningRuleId A unique earning rule ID. (required)
     * @param loyaltiesEarningRulesUpdateRequestBody Specify the parameters that you would like to update for the given earning rule. (optional)
     * @return ApiResponse&lt;LoyaltiesEarningRulesUpdateResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoyaltiesEarningRulesUpdateResponseBody> updateEarningRuleWithHttpInfo(String campaignId, String earningRuleId, LoyaltiesEarningRulesUpdateRequestBody loyaltiesEarningRulesUpdateRequestBody) throws ApiException {
        okhttp3.Call localVarCall = updateEarningRuleValidateBeforeCall(campaignId, earningRuleId, loyaltiesEarningRulesUpdateRequestBody, null);
        Type localVarReturnType = new TypeToken<LoyaltiesEarningRulesUpdateResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Earning Rule (asynchronously)
     * Update an earning rule definition.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param earningRuleId A unique earning rule ID. (required)
     * @param loyaltiesEarningRulesUpdateRequestBody Specify the parameters that you would like to update for the given earning rule. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call updateEarningRuleAsync(String campaignId, String earningRuleId, LoyaltiesEarningRulesUpdateRequestBody loyaltiesEarningRulesUpdateRequestBody, final ApiCallback<LoyaltiesEarningRulesUpdateResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEarningRuleValidateBeforeCall(campaignId, earningRuleId, loyaltiesEarningRulesUpdateRequestBody, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesEarningRulesUpdateResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateLoyaltyCardBalance
     * @param memberId Unique loyalty card assigned to a particular customer. (required)
     * @param loyaltiesMembersBalanceUpdateRequestBody Specify the point adjustment along with the expiration mechanism. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call updateLoyaltyCardBalanceCall(String memberId, LoyaltiesMembersBalanceUpdateRequestBody loyaltiesMembersBalanceUpdateRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = loyaltiesMembersBalanceUpdateRequestBody;

        // create path and map variables
        String localVarPath = "/v1/loyalties/members/{memberId}/balance"
            .replace("{" + "memberId" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLoyaltyCardBalanceValidateBeforeCall(String memberId, LoyaltiesMembersBalanceUpdateRequestBody loyaltiesMembersBalanceUpdateRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling updateLoyaltyCardBalance(Async)");
        }

        return updateLoyaltyCardBalanceCall(memberId, loyaltiesMembersBalanceUpdateRequestBody, _callback);

    }

    /**
     * Adjust Loyalty Card Balance
     * This method gives adds or removes balance to an existing loyalty card that is assigned to a holder. The removal of points will consume the points that expire the soonest.   &gt;🚧 Async Action    This is an async action. If you want to perform several add or remove loyalty card balance actions in a short time and their order matters, set up sufficient time-out between the calls.  📘 Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to allow you to add or remove loyalty card balance without having to provide the campaignId as a path parameter.
     * @param memberId Unique loyalty card assigned to a particular customer. (required)
     * @param loyaltiesMembersBalanceUpdateRequestBody Specify the point adjustment along with the expiration mechanism. (optional)
     * @return LoyaltiesMembersBalanceUpdateResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoyaltiesMembersBalanceUpdateResponseBody updateLoyaltyCardBalance(String memberId, LoyaltiesMembersBalanceUpdateRequestBody loyaltiesMembersBalanceUpdateRequestBody) throws ApiException {
        ApiResponse<LoyaltiesMembersBalanceUpdateResponseBody> localVarResp = updateLoyaltyCardBalanceWithHttpInfo(memberId, loyaltiesMembersBalanceUpdateRequestBody);
        return localVarResp.getData();
    }

    /**
     * Adjust Loyalty Card Balance
     * This method gives adds or removes balance to an existing loyalty card that is assigned to a holder. The removal of points will consume the points that expire the soonest.   &gt;🚧 Async Action    This is an async action. If you want to perform several add or remove loyalty card balance actions in a short time and their order matters, set up sufficient time-out between the calls.  📘 Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to allow you to add or remove loyalty card balance without having to provide the campaignId as a path parameter.
     * @param memberId Unique loyalty card assigned to a particular customer. (required)
     * @param loyaltiesMembersBalanceUpdateRequestBody Specify the point adjustment along with the expiration mechanism. (optional)
     * @return ApiResponse&lt;LoyaltiesMembersBalanceUpdateResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoyaltiesMembersBalanceUpdateResponseBody> updateLoyaltyCardBalanceWithHttpInfo(String memberId, LoyaltiesMembersBalanceUpdateRequestBody loyaltiesMembersBalanceUpdateRequestBody) throws ApiException {
        okhttp3.Call localVarCall = updateLoyaltyCardBalanceValidateBeforeCall(memberId, loyaltiesMembersBalanceUpdateRequestBody, null);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersBalanceUpdateResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adjust Loyalty Card Balance (asynchronously)
     * This method gives adds or removes balance to an existing loyalty card that is assigned to a holder. The removal of points will consume the points that expire the soonest.   &gt;🚧 Async Action    This is an async action. If you want to perform several add or remove loyalty card balance actions in a short time and their order matters, set up sufficient time-out between the calls.  📘 Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to allow you to add or remove loyalty card balance without having to provide the campaignId as a path parameter.
     * @param memberId Unique loyalty card assigned to a particular customer. (required)
     * @param loyaltiesMembersBalanceUpdateRequestBody Specify the point adjustment along with the expiration mechanism. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call updateLoyaltyCardBalanceAsync(String memberId, LoyaltiesMembersBalanceUpdateRequestBody loyaltiesMembersBalanceUpdateRequestBody, final ApiCallback<LoyaltiesMembersBalanceUpdateResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLoyaltyCardBalanceValidateBeforeCall(memberId, loyaltiesMembersBalanceUpdateRequestBody, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersBalanceUpdateResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateLoyaltyCardBalance1
     * @param campaignId Unique campaign ID. (required)
     * @param memberId A code that identifies the loyalty card. (required)
     * @param loyaltiesMembersBalanceUpdateRequestBody Specify the point adjustment along with the expiration mechanism. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call updateLoyaltyCardBalance1Call(String campaignId, String memberId, LoyaltiesMembersBalanceUpdateRequestBody loyaltiesMembersBalanceUpdateRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = loyaltiesMembersBalanceUpdateRequestBody;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/members/{memberId}/balance"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "memberId" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLoyaltyCardBalance1ValidateBeforeCall(String campaignId, String memberId, LoyaltiesMembersBalanceUpdateRequestBody loyaltiesMembersBalanceUpdateRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling updateLoyaltyCardBalance1(Async)");
        }

        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling updateLoyaltyCardBalance1(Async)");
        }

        return updateLoyaltyCardBalance1Call(campaignId, memberId, loyaltiesMembersBalanceUpdateRequestBody, _callback);

    }

    /**
     * Adjust Loyalty Card Balance
     * This method adds or removes balance to an existing loyalty card that is assigned to a holder. The removal of points will consume the points that expire the soonest.   &gt;🚧 Async Action    This is an async action. If you want to perform several add or remove loyalty card balance actions in a short time and their order matters, set up sufficient time-out between the calls.
     * @param campaignId Unique campaign ID. (required)
     * @param memberId A code that identifies the loyalty card. (required)
     * @param loyaltiesMembersBalanceUpdateRequestBody Specify the point adjustment along with the expiration mechanism. (optional)
     * @return LoyaltiesMembersBalanceUpdateResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoyaltiesMembersBalanceUpdateResponseBody updateLoyaltyCardBalance1(String campaignId, String memberId, LoyaltiesMembersBalanceUpdateRequestBody loyaltiesMembersBalanceUpdateRequestBody) throws ApiException {
        ApiResponse<LoyaltiesMembersBalanceUpdateResponseBody> localVarResp = updateLoyaltyCardBalance1WithHttpInfo(campaignId, memberId, loyaltiesMembersBalanceUpdateRequestBody);
        return localVarResp.getData();
    }

    /**
     * Adjust Loyalty Card Balance
     * This method adds or removes balance to an existing loyalty card that is assigned to a holder. The removal of points will consume the points that expire the soonest.   &gt;🚧 Async Action    This is an async action. If you want to perform several add or remove loyalty card balance actions in a short time and their order matters, set up sufficient time-out between the calls.
     * @param campaignId Unique campaign ID. (required)
     * @param memberId A code that identifies the loyalty card. (required)
     * @param loyaltiesMembersBalanceUpdateRequestBody Specify the point adjustment along with the expiration mechanism. (optional)
     * @return ApiResponse&lt;LoyaltiesMembersBalanceUpdateResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoyaltiesMembersBalanceUpdateResponseBody> updateLoyaltyCardBalance1WithHttpInfo(String campaignId, String memberId, LoyaltiesMembersBalanceUpdateRequestBody loyaltiesMembersBalanceUpdateRequestBody) throws ApiException {
        okhttp3.Call localVarCall = updateLoyaltyCardBalance1ValidateBeforeCall(campaignId, memberId, loyaltiesMembersBalanceUpdateRequestBody, null);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersBalanceUpdateResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adjust Loyalty Card Balance (asynchronously)
     * This method adds or removes balance to an existing loyalty card that is assigned to a holder. The removal of points will consume the points that expire the soonest.   &gt;🚧 Async Action    This is an async action. If you want to perform several add or remove loyalty card balance actions in a short time and their order matters, set up sufficient time-out between the calls.
     * @param campaignId Unique campaign ID. (required)
     * @param memberId A code that identifies the loyalty card. (required)
     * @param loyaltiesMembersBalanceUpdateRequestBody Specify the point adjustment along with the expiration mechanism. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call updateLoyaltyCardBalance1Async(String campaignId, String memberId, LoyaltiesMembersBalanceUpdateRequestBody loyaltiesMembersBalanceUpdateRequestBody, final ApiCallback<LoyaltiesMembersBalanceUpdateResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLoyaltyCardBalance1ValidateBeforeCall(campaignId, memberId, loyaltiesMembersBalanceUpdateRequestBody, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesMembersBalanceUpdateResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateLoyaltyProgram
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param loyaltiesUpdateCampaignRequestBody Specify the new values for the parameters that you would like to update for the given loyalty campaign. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call updateLoyaltyProgramCall(String campaignId, LoyaltiesUpdateCampaignRequestBody loyaltiesUpdateCampaignRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = loyaltiesUpdateCampaignRequestBody;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLoyaltyProgramValidateBeforeCall(String campaignId, LoyaltiesUpdateCampaignRequestBody loyaltiesUpdateCampaignRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling updateLoyaltyProgram(Async)");
        }

        return updateLoyaltyProgramCall(campaignId, loyaltiesUpdateCampaignRequestBody, _callback);

    }

    /**
     * Update Loyalty Campaign
     * Updates a loyalty program.  Fields other than those specified in the allowed request body payload wont be modified (even if provided they are silently skipped). Any parameters not provided will be left unchanged.  This method will update the loyalty cards which have not been published or redeemed yet.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param loyaltiesUpdateCampaignRequestBody Specify the new values for the parameters that you would like to update for the given loyalty campaign. (optional)
     * @return LoyaltiesUpdateCampaignResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoyaltiesUpdateCampaignResponseBody updateLoyaltyProgram(String campaignId, LoyaltiesUpdateCampaignRequestBody loyaltiesUpdateCampaignRequestBody) throws ApiException {
        ApiResponse<LoyaltiesUpdateCampaignResponseBody> localVarResp = updateLoyaltyProgramWithHttpInfo(campaignId, loyaltiesUpdateCampaignRequestBody);
        return localVarResp.getData();
    }

    /**
     * Update Loyalty Campaign
     * Updates a loyalty program.  Fields other than those specified in the allowed request body payload wont be modified (even if provided they are silently skipped). Any parameters not provided will be left unchanged.  This method will update the loyalty cards which have not been published or redeemed yet.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param loyaltiesUpdateCampaignRequestBody Specify the new values for the parameters that you would like to update for the given loyalty campaign. (optional)
     * @return ApiResponse&lt;LoyaltiesUpdateCampaignResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoyaltiesUpdateCampaignResponseBody> updateLoyaltyProgramWithHttpInfo(String campaignId, LoyaltiesUpdateCampaignRequestBody loyaltiesUpdateCampaignRequestBody) throws ApiException {
        okhttp3.Call localVarCall = updateLoyaltyProgramValidateBeforeCall(campaignId, loyaltiesUpdateCampaignRequestBody, null);
        Type localVarReturnType = new TypeToken<LoyaltiesUpdateCampaignResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Loyalty Campaign (asynchronously)
     * Updates a loyalty program.  Fields other than those specified in the allowed request body payload wont be modified (even if provided they are silently skipped). Any parameters not provided will be left unchanged.  This method will update the loyalty cards which have not been published or redeemed yet.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param loyaltiesUpdateCampaignRequestBody Specify the new values for the parameters that you would like to update for the given loyalty campaign. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call updateLoyaltyProgramAsync(String campaignId, LoyaltiesUpdateCampaignRequestBody loyaltiesUpdateCampaignRequestBody, final ApiCallback<LoyaltiesUpdateCampaignResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLoyaltyProgramValidateBeforeCall(campaignId, loyaltiesUpdateCampaignRequestBody, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesUpdateCampaignResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRewardAssignment1
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param assignmentId A unique reward assignment ID. (required)
     * @param loyaltiesRewardsUpdateAssignmentRequestBody Update the points cost for the reward assignment. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call updateRewardAssignment1Call(String campaignId, String assignmentId, LoyaltiesRewardsUpdateAssignmentRequestBody loyaltiesRewardsUpdateAssignmentRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = loyaltiesRewardsUpdateAssignmentRequestBody;

        // create path and map variables
        String localVarPath = "/v1/loyalties/{campaignId}/rewards/{assignmentId}"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "assignmentId" + "}", localVarApiClient.escapeString(assignmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRewardAssignment1ValidateBeforeCall(String campaignId, String assignmentId, LoyaltiesRewardsUpdateAssignmentRequestBody loyaltiesRewardsUpdateAssignmentRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling updateRewardAssignment1(Async)");
        }

        // verify the required parameter 'assignmentId' is set
        if (assignmentId == null) {
            throw new ApiException("Missing the required parameter 'assignmentId' when calling updateRewardAssignment1(Async)");
        }

        return updateRewardAssignment1Call(campaignId, assignmentId, loyaltiesRewardsUpdateAssignmentRequestBody, _callback);

    }

    /**
     * Update Reward Assignment
     * Updates rewards parameters, i.e. the points cost for the specific reward.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param assignmentId A unique reward assignment ID. (required)
     * @param loyaltiesRewardsUpdateAssignmentRequestBody Update the points cost for the reward assignment. (optional)
     * @return LoyaltiesRewardsUpdateAssignmentResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoyaltiesRewardsUpdateAssignmentResponseBody updateRewardAssignment1(String campaignId, String assignmentId, LoyaltiesRewardsUpdateAssignmentRequestBody loyaltiesRewardsUpdateAssignmentRequestBody) throws ApiException {
        ApiResponse<LoyaltiesRewardsUpdateAssignmentResponseBody> localVarResp = updateRewardAssignment1WithHttpInfo(campaignId, assignmentId, loyaltiesRewardsUpdateAssignmentRequestBody);
        return localVarResp.getData();
    }

    /**
     * Update Reward Assignment
     * Updates rewards parameters, i.e. the points cost for the specific reward.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param assignmentId A unique reward assignment ID. (required)
     * @param loyaltiesRewardsUpdateAssignmentRequestBody Update the points cost for the reward assignment. (optional)
     * @return ApiResponse&lt;LoyaltiesRewardsUpdateAssignmentResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoyaltiesRewardsUpdateAssignmentResponseBody> updateRewardAssignment1WithHttpInfo(String campaignId, String assignmentId, LoyaltiesRewardsUpdateAssignmentRequestBody loyaltiesRewardsUpdateAssignmentRequestBody) throws ApiException {
        okhttp3.Call localVarCall = updateRewardAssignment1ValidateBeforeCall(campaignId, assignmentId, loyaltiesRewardsUpdateAssignmentRequestBody, null);
        Type localVarReturnType = new TypeToken<LoyaltiesRewardsUpdateAssignmentResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Reward Assignment (asynchronously)
     * Updates rewards parameters, i.e. the points cost for the specific reward.
     * @param campaignId The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign.  (required)
     * @param assignmentId A unique reward assignment ID. (required)
     * @param loyaltiesRewardsUpdateAssignmentRequestBody Update the points cost for the reward assignment. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call updateRewardAssignment1Async(String campaignId, String assignmentId, LoyaltiesRewardsUpdateAssignmentRequestBody loyaltiesRewardsUpdateAssignmentRequestBody, final ApiCallback<LoyaltiesRewardsUpdateAssignmentResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRewardAssignment1ValidateBeforeCall(campaignId, assignmentId, loyaltiesRewardsUpdateAssignmentRequestBody, _callback);
        Type localVarReturnType = new TypeToken<LoyaltiesRewardsUpdateAssignmentResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
