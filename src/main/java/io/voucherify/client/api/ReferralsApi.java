/*
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.voucherify.client.api;

import io.voucherify.client.ApiCallback;
import io.voucherify.client.ApiClient;
import io.voucherify.client.ApiException;
import io.voucherify.client.ApiResponse;
import io.voucherify.client.Configuration;
import io.voucherify.client.Pair;
import io.voucherify.client.ProgressRequestBody;
import io.voucherify.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.voucherify.client.model.ParameterFiltersListReferralsRedeemableHolders;
import io.voucherify.client.model.ParameterOrderListRedeemables;
import io.voucherify.client.model.ReferralsMembersHoldersCreateInBulkRequestBody;
import io.voucherify.client.model.ReferralsMembersHoldersCreateInBulkResponseBody;
import io.voucherify.client.model.ReferralsMembersHoldersListResponseBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReferralsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReferralsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReferralsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for referralsAddHolders
     * @param memberId Unique referral code or its identifier. (required)
     * @param referralsMembersHoldersCreateInBulkRequestBody Specify the customer data to be upserted as redeemable holders. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call referralsAddHoldersCall(String memberId, ReferralsMembersHoldersCreateInBulkRequestBody referralsMembersHoldersCreateInBulkRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = referralsMembersHoldersCreateInBulkRequestBody;

        // create path and map variables
        String localVarPath = "/v1/referrals/members/{memberId}/holders"
            .replace("{" + "memberId" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call referralsAddHoldersValidateBeforeCall(String memberId, ReferralsMembersHoldersCreateInBulkRequestBody referralsMembersHoldersCreateInBulkRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling referralsAddHolders(Async)");
        }

        return referralsAddHoldersCall(memberId, referralsMembersHoldersCreateInBulkRequestBody, _callback);

    }

    /**
     * Add Referral Code Holders
     * Adds new holders to a referral code as **referees**. The data sent in the request is upserted into the customer data. If the request returns an error even for one customer, you have to resend the whole request. Customer data is upserted if the data for all customers is correct. To use this endpoint, you must have the following permissions: - Create and modify Customers and Segments (customers.modify) - Publish Voucher (vouchers.publish)  üëç To add a holder as a referer, use the Create Publication endpoint.  üìò Alternative endpoint This endpoint is an alternative to the Add Referral Code Holders endpoint. The URL was re-designed to retrieve the referral member holders without providing the campaignId as a path paremeter.
     * @param memberId Unique referral code or its identifier. (required)
     * @param referralsMembersHoldersCreateInBulkRequestBody Specify the customer data to be upserted as redeemable holders. (optional)
     * @return ReferralsMembersHoldersCreateInBulkResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReferralsMembersHoldersCreateInBulkResponseBody referralsAddHolders(String memberId, ReferralsMembersHoldersCreateInBulkRequestBody referralsMembersHoldersCreateInBulkRequestBody) throws ApiException {
        ApiResponse<ReferralsMembersHoldersCreateInBulkResponseBody> localVarResp = referralsAddHoldersWithHttpInfo(memberId, referralsMembersHoldersCreateInBulkRequestBody);
        return localVarResp.getData();
    }

    /**
     * Add Referral Code Holders
     * Adds new holders to a referral code as **referees**. The data sent in the request is upserted into the customer data. If the request returns an error even for one customer, you have to resend the whole request. Customer data is upserted if the data for all customers is correct. To use this endpoint, you must have the following permissions: - Create and modify Customers and Segments (customers.modify) - Publish Voucher (vouchers.publish)  üëç To add a holder as a referer, use the Create Publication endpoint.  üìò Alternative endpoint This endpoint is an alternative to the Add Referral Code Holders endpoint. The URL was re-designed to retrieve the referral member holders without providing the campaignId as a path paremeter.
     * @param memberId Unique referral code or its identifier. (required)
     * @param referralsMembersHoldersCreateInBulkRequestBody Specify the customer data to be upserted as redeemable holders. (optional)
     * @return ApiResponse&lt;ReferralsMembersHoldersCreateInBulkResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReferralsMembersHoldersCreateInBulkResponseBody> referralsAddHoldersWithHttpInfo(String memberId, ReferralsMembersHoldersCreateInBulkRequestBody referralsMembersHoldersCreateInBulkRequestBody) throws ApiException {
        okhttp3.Call localVarCall = referralsAddHoldersValidateBeforeCall(memberId, referralsMembersHoldersCreateInBulkRequestBody, null);
        Type localVarReturnType = new TypeToken<ReferralsMembersHoldersCreateInBulkResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Referral Code Holders (asynchronously)
     * Adds new holders to a referral code as **referees**. The data sent in the request is upserted into the customer data. If the request returns an error even for one customer, you have to resend the whole request. Customer data is upserted if the data for all customers is correct. To use this endpoint, you must have the following permissions: - Create and modify Customers and Segments (customers.modify) - Publish Voucher (vouchers.publish)  üëç To add a holder as a referer, use the Create Publication endpoint.  üìò Alternative endpoint This endpoint is an alternative to the Add Referral Code Holders endpoint. The URL was re-designed to retrieve the referral member holders without providing the campaignId as a path paremeter.
     * @param memberId Unique referral code or its identifier. (required)
     * @param referralsMembersHoldersCreateInBulkRequestBody Specify the customer data to be upserted as redeemable holders. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call referralsAddHoldersAsync(String memberId, ReferralsMembersHoldersCreateInBulkRequestBody referralsMembersHoldersCreateInBulkRequestBody, final ApiCallback<ReferralsMembersHoldersCreateInBulkResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = referralsAddHoldersValidateBeforeCall(memberId, referralsMembersHoldersCreateInBulkRequestBody, _callback);
        Type localVarReturnType = new TypeToken<ReferralsMembersHoldersCreateInBulkResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for referralsAddHolders1
     * @param campaignId Unique identifier of a referral program campaign. (required)
     * @param memberId Unique referral code or its identifier. (required)
     * @param referralsMembersHoldersCreateInBulkRequestBody Specify the customer data to be upserted as redeemable holders. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call referralsAddHolders1Call(String campaignId, String memberId, ReferralsMembersHoldersCreateInBulkRequestBody referralsMembersHoldersCreateInBulkRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = referralsMembersHoldersCreateInBulkRequestBody;

        // create path and map variables
        String localVarPath = "/v1/referrals/{campaignId}/members/{memberId}/holders"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "memberId" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call referralsAddHolders1ValidateBeforeCall(String campaignId, String memberId, ReferralsMembersHoldersCreateInBulkRequestBody referralsMembersHoldersCreateInBulkRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling referralsAddHolders1(Async)");
        }

        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling referralsAddHolders1(Async)");
        }

        return referralsAddHolders1Call(campaignId, memberId, referralsMembersHoldersCreateInBulkRequestBody, _callback);

    }

    /**
     * Add Referral Code Holders
     * Adds new holders to a referral code as **referees**. The data sent in the request is upserted into the customer data. If the request returns an error even for one customer, you have to resend the whole request. Customer data is upserted if the data for all customers is correct. To use this endpoint, you must have the following permissions: - Create and modify Customers and Segments (customers.modify) - Publish Voucher (vouchers.publish)  üëç To add a holder as a referer, use the Create Publication endpoint.
     * @param campaignId Unique identifier of a referral program campaign. (required)
     * @param memberId Unique referral code or its identifier. (required)
     * @param referralsMembersHoldersCreateInBulkRequestBody Specify the customer data to be upserted as redeemable holders. (optional)
     * @return ReferralsMembersHoldersCreateInBulkResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReferralsMembersHoldersCreateInBulkResponseBody referralsAddHolders1(String campaignId, String memberId, ReferralsMembersHoldersCreateInBulkRequestBody referralsMembersHoldersCreateInBulkRequestBody) throws ApiException {
        ApiResponse<ReferralsMembersHoldersCreateInBulkResponseBody> localVarResp = referralsAddHolders1WithHttpInfo(campaignId, memberId, referralsMembersHoldersCreateInBulkRequestBody);
        return localVarResp.getData();
    }

    /**
     * Add Referral Code Holders
     * Adds new holders to a referral code as **referees**. The data sent in the request is upserted into the customer data. If the request returns an error even for one customer, you have to resend the whole request. Customer data is upserted if the data for all customers is correct. To use this endpoint, you must have the following permissions: - Create and modify Customers and Segments (customers.modify) - Publish Voucher (vouchers.publish)  üëç To add a holder as a referer, use the Create Publication endpoint.
     * @param campaignId Unique identifier of a referral program campaign. (required)
     * @param memberId Unique referral code or its identifier. (required)
     * @param referralsMembersHoldersCreateInBulkRequestBody Specify the customer data to be upserted as redeemable holders. (optional)
     * @return ApiResponse&lt;ReferralsMembersHoldersCreateInBulkResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReferralsMembersHoldersCreateInBulkResponseBody> referralsAddHolders1WithHttpInfo(String campaignId, String memberId, ReferralsMembersHoldersCreateInBulkRequestBody referralsMembersHoldersCreateInBulkRequestBody) throws ApiException {
        okhttp3.Call localVarCall = referralsAddHolders1ValidateBeforeCall(campaignId, memberId, referralsMembersHoldersCreateInBulkRequestBody, null);
        Type localVarReturnType = new TypeToken<ReferralsMembersHoldersCreateInBulkResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Referral Code Holders (asynchronously)
     * Adds new holders to a referral code as **referees**. The data sent in the request is upserted into the customer data. If the request returns an error even for one customer, you have to resend the whole request. Customer data is upserted if the data for all customers is correct. To use this endpoint, you must have the following permissions: - Create and modify Customers and Segments (customers.modify) - Publish Voucher (vouchers.publish)  üëç To add a holder as a referer, use the Create Publication endpoint.
     * @param campaignId Unique identifier of a referral program campaign. (required)
     * @param memberId Unique referral code or its identifier. (required)
     * @param referralsMembersHoldersCreateInBulkRequestBody Specify the customer data to be upserted as redeemable holders. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call referralsAddHolders1Async(String campaignId, String memberId, ReferralsMembersHoldersCreateInBulkRequestBody referralsMembersHoldersCreateInBulkRequestBody, final ApiCallback<ReferralsMembersHoldersCreateInBulkResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = referralsAddHolders1ValidateBeforeCall(campaignId, memberId, referralsMembersHoldersCreateInBulkRequestBody, _callback);
        Type localVarReturnType = new TypeToken<ReferralsMembersHoldersCreateInBulkResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for referralsCodeHolders
     * @param campaignId Unique identifier of a referral program campaign. (required)
     * @param memberId Unique referral code or its identifier. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param startingAfterId A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)
     * @param filters Filters for listing customer redeemables. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call referralsCodeHoldersCall(String campaignId, String memberId, Integer limit, ParameterOrderListRedeemables order, String startingAfterId, ParameterFiltersListReferralsRedeemableHolders filters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/referrals/{campaignId}/members/{memberId}/holders"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "memberId" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (startingAfterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting_after_id", startingAfterId));
        }

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters", filters));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call referralsCodeHoldersValidateBeforeCall(String campaignId, String memberId, Integer limit, ParameterOrderListRedeemables order, String startingAfterId, ParameterFiltersListReferralsRedeemableHolders filters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling referralsCodeHolders(Async)");
        }

        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling referralsCodeHolders(Async)");
        }

        return referralsCodeHoldersCall(campaignId, memberId, limit, order, startingAfterId, filters, _callback);

    }

    /**
     * List Referral Code Holders
     * Retrieves all the redeemables that have been assigned to the customer. To use this endpoint, you must have the following permissions: - Read Customers (customers.details.read)
     * @param campaignId Unique identifier of a referral program campaign. (required)
     * @param memberId Unique referral code or its identifier. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param startingAfterId A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)
     * @param filters Filters for listing customer redeemables. (optional)
     * @return ReferralsMembersHoldersListResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReferralsMembersHoldersListResponseBody referralsCodeHolders(String campaignId, String memberId, Integer limit, ParameterOrderListRedeemables order, String startingAfterId, ParameterFiltersListReferralsRedeemableHolders filters) throws ApiException {
        ApiResponse<ReferralsMembersHoldersListResponseBody> localVarResp = referralsCodeHoldersWithHttpInfo(campaignId, memberId, limit, order, startingAfterId, filters);
        return localVarResp.getData();
    }

    /**
     * List Referral Code Holders
     * Retrieves all the redeemables that have been assigned to the customer. To use this endpoint, you must have the following permissions: - Read Customers (customers.details.read)
     * @param campaignId Unique identifier of a referral program campaign. (required)
     * @param memberId Unique referral code or its identifier. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param startingAfterId A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)
     * @param filters Filters for listing customer redeemables. (optional)
     * @return ApiResponse&lt;ReferralsMembersHoldersListResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReferralsMembersHoldersListResponseBody> referralsCodeHoldersWithHttpInfo(String campaignId, String memberId, Integer limit, ParameterOrderListRedeemables order, String startingAfterId, ParameterFiltersListReferralsRedeemableHolders filters) throws ApiException {
        okhttp3.Call localVarCall = referralsCodeHoldersValidateBeforeCall(campaignId, memberId, limit, order, startingAfterId, filters, null);
        Type localVarReturnType = new TypeToken<ReferralsMembersHoldersListResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Referral Code Holders (asynchronously)
     * Retrieves all the redeemables that have been assigned to the customer. To use this endpoint, you must have the following permissions: - Read Customers (customers.details.read)
     * @param campaignId Unique identifier of a referral program campaign. (required)
     * @param memberId Unique referral code or its identifier. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param startingAfterId A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)
     * @param filters Filters for listing customer redeemables. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call referralsCodeHoldersAsync(String campaignId, String memberId, Integer limit, ParameterOrderListRedeemables order, String startingAfterId, ParameterFiltersListReferralsRedeemableHolders filters, final ApiCallback<ReferralsMembersHoldersListResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = referralsCodeHoldersValidateBeforeCall(campaignId, memberId, limit, order, startingAfterId, filters, _callback);
        Type localVarReturnType = new TypeToken<ReferralsMembersHoldersListResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for referralsCodeHolders1
     * @param memberId Unique referral code or its identifier. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param startingAfterId A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)
     * @param filters Filters for listing customer redeemables. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call referralsCodeHolders1Call(String memberId, Integer limit, ParameterOrderListRedeemables order, String startingAfterId, ParameterFiltersListReferralsRedeemableHolders filters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/referrals/members/{memberId}/holders"
            .replace("{" + "memberId" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (startingAfterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting_after_id", startingAfterId));
        }

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters", filters));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call referralsCodeHolders1ValidateBeforeCall(String memberId, Integer limit, ParameterOrderListRedeemables order, String startingAfterId, ParameterFiltersListReferralsRedeemableHolders filters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling referralsCodeHolders1(Async)");
        }

        return referralsCodeHolders1Call(memberId, limit, order, startingAfterId, filters, _callback);

    }

    /**
     * List Referral Code Holders
     * Retrieves the holders of the referral code from a referral campaign. To use this endpoint, you must have the following permissions: - Read Customers (customers.details.read)  üìò Alternative endpoint This endpoint is an alternative to the List Member Holders endpoint. The URL was re-designed to retrieve the referral member holders without providing the campaignId as a path paremeter.
     * @param memberId Unique referral code or its identifier. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param startingAfterId A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)
     * @param filters Filters for listing customer redeemables. (optional)
     * @return ReferralsMembersHoldersListResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReferralsMembersHoldersListResponseBody referralsCodeHolders1(String memberId, Integer limit, ParameterOrderListRedeemables order, String startingAfterId, ParameterFiltersListReferralsRedeemableHolders filters) throws ApiException {
        ApiResponse<ReferralsMembersHoldersListResponseBody> localVarResp = referralsCodeHolders1WithHttpInfo(memberId, limit, order, startingAfterId, filters);
        return localVarResp.getData();
    }

    /**
     * List Referral Code Holders
     * Retrieves the holders of the referral code from a referral campaign. To use this endpoint, you must have the following permissions: - Read Customers (customers.details.read)  üìò Alternative endpoint This endpoint is an alternative to the List Member Holders endpoint. The URL was re-designed to retrieve the referral member holders without providing the campaignId as a path paremeter.
     * @param memberId Unique referral code or its identifier. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param startingAfterId A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)
     * @param filters Filters for listing customer redeemables. (optional)
     * @return ApiResponse&lt;ReferralsMembersHoldersListResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReferralsMembersHoldersListResponseBody> referralsCodeHolders1WithHttpInfo(String memberId, Integer limit, ParameterOrderListRedeemables order, String startingAfterId, ParameterFiltersListReferralsRedeemableHolders filters) throws ApiException {
        okhttp3.Call localVarCall = referralsCodeHolders1ValidateBeforeCall(memberId, limit, order, startingAfterId, filters, null);
        Type localVarReturnType = new TypeToken<ReferralsMembersHoldersListResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Referral Code Holders (asynchronously)
     * Retrieves the holders of the referral code from a referral campaign. To use this endpoint, you must have the following permissions: - Read Customers (customers.details.read)  üìò Alternative endpoint This endpoint is an alternative to the List Member Holders endpoint. The URL was re-designed to retrieve the referral member holders without providing the campaignId as a path paremeter.
     * @param memberId Unique referral code or its identifier. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param startingAfterId A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)
     * @param filters Filters for listing customer redeemables. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call referralsCodeHolders1Async(String memberId, Integer limit, ParameterOrderListRedeemables order, String startingAfterId, ParameterFiltersListReferralsRedeemableHolders filters, final ApiCallback<ReferralsMembersHoldersListResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = referralsCodeHolders1ValidateBeforeCall(memberId, limit, order, startingAfterId, filters, _callback);
        Type localVarReturnType = new TypeToken<ReferralsMembersHoldersListResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for referralsRemoveHolder
     * @param memberId Unique referral code or its identifier. (required)
     * @param holderId Unique identifier of a redeemable holder. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call referralsRemoveHolderCall(String memberId, String holderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/referrals/members/{memberId}/holders/{holderId}"
            .replace("{" + "memberId" + "}", localVarApiClient.escapeString(memberId.toString()))
            .replace("{" + "holderId" + "}", localVarApiClient.escapeString(holderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call referralsRemoveHolderValidateBeforeCall(String memberId, String holderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling referralsRemoveHolder(Async)");
        }

        // verify the required parameter 'holderId' is set
        if (holderId == null) {
            throw new ApiException("Missing the required parameter 'holderId' when calling referralsRemoveHolder(Async)");
        }

        return referralsRemoveHolderCall(memberId, holderId, _callback);

    }

    /**
     * Remove Referral Card Holder
     * Removes the holder from a referral card. You can remove a referee only. To use this endpoint, you must have the following permissions: - Create and modify Customers and Segments (customers.modify) - Publish Voucher (vouchers.publish)  üìò Alternative endpoint This endpoint is an alternative to the Remove Referral Card Holder endpoint. The URL was re-designed to retrieve the referral member holders without providing the campaignId as a path paremeter.
     * @param memberId Unique referral code or its identifier. (required)
     * @param holderId Unique identifier of a redeemable holder. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void referralsRemoveHolder(String memberId, String holderId) throws ApiException {
        referralsRemoveHolderWithHttpInfo(memberId, holderId);
    }

    /**
     * Remove Referral Card Holder
     * Removes the holder from a referral card. You can remove a referee only. To use this endpoint, you must have the following permissions: - Create and modify Customers and Segments (customers.modify) - Publish Voucher (vouchers.publish)  üìò Alternative endpoint This endpoint is an alternative to the Remove Referral Card Holder endpoint. The URL was re-designed to retrieve the referral member holders without providing the campaignId as a path paremeter.
     * @param memberId Unique referral code or its identifier. (required)
     * @param holderId Unique identifier of a redeemable holder. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> referralsRemoveHolderWithHttpInfo(String memberId, String holderId) throws ApiException {
        okhttp3.Call localVarCall = referralsRemoveHolderValidateBeforeCall(memberId, holderId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove Referral Card Holder (asynchronously)
     * Removes the holder from a referral card. You can remove a referee only. To use this endpoint, you must have the following permissions: - Create and modify Customers and Segments (customers.modify) - Publish Voucher (vouchers.publish)  üìò Alternative endpoint This endpoint is an alternative to the Remove Referral Card Holder endpoint. The URL was re-designed to retrieve the referral member holders without providing the campaignId as a path paremeter.
     * @param memberId Unique referral code or its identifier. (required)
     * @param holderId Unique identifier of a redeemable holder. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call referralsRemoveHolderAsync(String memberId, String holderId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = referralsRemoveHolderValidateBeforeCall(memberId, holderId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for referralsRemoveHolder1
     * @param campaignId Unique identifier of a referral program campaign. (required)
     * @param memberId Unique referral code or its identifier. (required)
     * @param holderId Unique identifier of a redeemable holder. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call referralsRemoveHolder1Call(String campaignId, String memberId, String holderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/referrals/{campaignId}/members/{memberId}/holders/{holderId}"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "memberId" + "}", localVarApiClient.escapeString(memberId.toString()))
            .replace("{" + "holderId" + "}", localVarApiClient.escapeString(holderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call referralsRemoveHolder1ValidateBeforeCall(String campaignId, String memberId, String holderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling referralsRemoveHolder1(Async)");
        }

        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling referralsRemoveHolder1(Async)");
        }

        // verify the required parameter 'holderId' is set
        if (holderId == null) {
            throw new ApiException("Missing the required parameter 'holderId' when calling referralsRemoveHolder1(Async)");
        }

        return referralsRemoveHolder1Call(campaignId, memberId, holderId, _callback);

    }

    /**
     * Remove Referral Card Holder
     * Removes the holder from a referral card. You can remove a referee only. To use this endpoint, you must have the following permissions: - Create and modify Customers and Segments (customers.modify) - Publish Voucher (vouchers.publish)
     * @param campaignId Unique identifier of a referral program campaign. (required)
     * @param memberId Unique referral code or its identifier. (required)
     * @param holderId Unique identifier of a redeemable holder. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void referralsRemoveHolder1(String campaignId, String memberId, String holderId) throws ApiException {
        referralsRemoveHolder1WithHttpInfo(campaignId, memberId, holderId);
    }

    /**
     * Remove Referral Card Holder
     * Removes the holder from a referral card. You can remove a referee only. To use this endpoint, you must have the following permissions: - Create and modify Customers and Segments (customers.modify) - Publish Voucher (vouchers.publish)
     * @param campaignId Unique identifier of a referral program campaign. (required)
     * @param memberId Unique referral code or its identifier. (required)
     * @param holderId Unique identifier of a redeemable holder. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> referralsRemoveHolder1WithHttpInfo(String campaignId, String memberId, String holderId) throws ApiException {
        okhttp3.Call localVarCall = referralsRemoveHolder1ValidateBeforeCall(campaignId, memberId, holderId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove Referral Card Holder (asynchronously)
     * Removes the holder from a referral card. You can remove a referee only. To use this endpoint, you must have the following permissions: - Create and modify Customers and Segments (customers.modify) - Publish Voucher (vouchers.publish)
     * @param campaignId Unique identifier of a referral program campaign. (required)
     * @param memberId Unique referral code or its identifier. (required)
     * @param holderId Unique identifier of a redeemable holder. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call referralsRemoveHolder1Async(String campaignId, String memberId, String holderId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = referralsRemoveHolder1ValidateBeforeCall(campaignId, memberId, holderId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
