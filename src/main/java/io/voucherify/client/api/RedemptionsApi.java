/*
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.voucherify.client.api;

import io.voucherify.client.ApiCallback;
import io.voucherify.client.ApiClient;
import io.voucherify.client.ApiException;
import io.voucherify.client.ApiResponse;
import io.voucherify.client.Configuration;
import io.voucherify.client.Pair;
import io.voucherify.client.ProgressRequestBody;
import io.voucherify.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.voucherify.client.model.ParameterCreatedBeforeAfter;
import io.voucherify.client.model.ParameterFiltersListRedemptions;
import io.voucherify.client.model.ParameterOrderListRedemptions;
import io.voucherify.client.model.RedemptionsGetResponseBody;
import io.voucherify.client.model.RedemptionsListResponseBody;
import io.voucherify.client.model.RedemptionsRedeemRequestBody;
import io.voucherify.client.model.RedemptionsRedeemResponseBody;
import io.voucherify.client.model.RedemptionsRollbackCreateRequestBody;
import io.voucherify.client.model.RedemptionsRollbackCreateResponseBody;
import io.voucherify.client.model.RedemptionsRollbacksCreateRequestBody;
import io.voucherify.client.model.RedemptionsRollbacksCreateResponseBody;
import io.voucherify.client.model.VouchersRedemptionGetResponseBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RedemptionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RedemptionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RedemptionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getRedemption
     * @param redemptionId ID of previously created redemption. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getRedemptionCall(String redemptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/redemptions/{redemptionId}"
            .replace("{" + "redemptionId" + "}", localVarApiClient.escapeString(redemptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRedemptionValidateBeforeCall(String redemptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'redemptionId' is set
        if (redemptionId == null) {
            throw new ApiException("Missing the required parameter 'redemptionId' when calling getRedemption(Async)");
        }

        return getRedemptionCall(redemptionId, _callback);

    }

    /**
     * Get Redemption
     * Return a redemption or redemption rollback object. This object can either be a successfull or failed redemption or redemption rollback.
     * @param redemptionId ID of previously created redemption. (required)
     * @return RedemptionsGetResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RedemptionsGetResponseBody getRedemption(String redemptionId) throws ApiException {
        ApiResponse<RedemptionsGetResponseBody> localVarResp = getRedemptionWithHttpInfo(redemptionId);
        return localVarResp.getData();
    }

    /**
     * Get Redemption
     * Return a redemption or redemption rollback object. This object can either be a successfull or failed redemption or redemption rollback.
     * @param redemptionId ID of previously created redemption. (required)
     * @return ApiResponse&lt;RedemptionsGetResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RedemptionsGetResponseBody> getRedemptionWithHttpInfo(String redemptionId) throws ApiException {
        okhttp3.Call localVarCall = getRedemptionValidateBeforeCall(redemptionId, null);
        Type localVarReturnType = new TypeToken<RedemptionsGetResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Redemption (asynchronously)
     * Return a redemption or redemption rollback object. This object can either be a successfull or failed redemption or redemption rollback.
     * @param redemptionId ID of previously created redemption. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getRedemptionAsync(String redemptionId, final ApiCallback<RedemptionsGetResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRedemptionValidateBeforeCall(redemptionId, _callback);
        Type localVarReturnType = new TypeToken<RedemptionsGetResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVoucherRedemptions
     * @param code A **code** that identifies the voucher. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getVoucherRedemptionsCall(String code, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/vouchers/{code}/redemption"
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVoucherRedemptionsValidateBeforeCall(String code, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getVoucherRedemptions(Async)");
        }

        return getVoucherRedemptionsCall(code, _callback);

    }

    /**
     * Get Voucher&#39;s Redemptions
     * Retrieve the number of times a voucher was redeemed and each of the redemption details.
     * @param code A **code** that identifies the voucher. (required)
     * @return VouchersRedemptionGetResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VouchersRedemptionGetResponseBody getVoucherRedemptions(String code) throws ApiException {
        ApiResponse<VouchersRedemptionGetResponseBody> localVarResp = getVoucherRedemptionsWithHttpInfo(code);
        return localVarResp.getData();
    }

    /**
     * Get Voucher&#39;s Redemptions
     * Retrieve the number of times a voucher was redeemed and each of the redemption details.
     * @param code A **code** that identifies the voucher. (required)
     * @return ApiResponse&lt;VouchersRedemptionGetResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VouchersRedemptionGetResponseBody> getVoucherRedemptionsWithHttpInfo(String code) throws ApiException {
        okhttp3.Call localVarCall = getVoucherRedemptionsValidateBeforeCall(code, null);
        Type localVarReturnType = new TypeToken<VouchersRedemptionGetResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Voucher&#39;s Redemptions (asynchronously)
     * Retrieve the number of times a voucher was redeemed and each of the redemption details.
     * @param code A **code** that identifies the voucher. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getVoucherRedemptionsAsync(String code, final ApiCallback<VouchersRedemptionGetResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVoucherRedemptionsValidateBeforeCall(code, _callback);
        Type localVarReturnType = new TypeToken<VouchersRedemptionGetResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listRedemptions
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param result A filter on the list based on the redemption result. Available options are: SUCCESS, FAILURE. You can provide multiple values by repeating the param. (optional)
     * @param campaign A filter by the campaign **name** that the redemption resources originate from. (optional)
     * @param customer Return redemptions performed by the customer with given id or source_id. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param createdAt A filter on the list based on the object created_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z (optional)
     * @param filters Filters for listing responses. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call listRedemptionsCall(Integer limit, Integer page, String result, String campaign, String customer, ParameterOrderListRedemptions order, ParameterCreatedBeforeAfter createdAt, ParameterFiltersListRedemptions filters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/redemptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (result != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("result", result));
        }

        if (campaign != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("campaign", campaign));
        }

        if (customer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customer", customer));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (createdAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at", createdAt));
        }

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters", filters));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRedemptionsValidateBeforeCall(Integer limit, Integer page, String result, String campaign, String customer, ParameterOrderListRedemptions order, ParameterCreatedBeforeAfter createdAt, ParameterFiltersListRedemptions filters, final ApiCallback _callback) throws ApiException {
        return listRedemptionsCall(limit, page, result, campaign, customer, order, createdAt, filters, _callback);

    }

    /**
     * List Redemptions
     * Returns a list of redemptions previously created. The redemptions are returned in a sorted order, with the most recent redemptions appearing first. The response returns a list of redemptions of all vouchers.  # Filtering results The result can be narrowed according to specified (or default) filters, for example, you can sort redemptions by date: https://api.voucherify.io/v1/redemptions?limit 3&amp;[created_at][before] 2017-09-08T13:52:18.227Z. A filter based on the object created_at field narrows down the results and lists redemptions done before or after a particular date time. You can use the following options: [created_at][after], [created_at][before]. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z. # Failed Redemptions A redemption may fail for various reasons. You can figure out an exact reason from the failure_code: - resource_not_found - voucher with given code does not exist - voucher_not_active - voucher is not active yet (before start date) - voucher_expired - voucher has already expired (after expiration date) - voucher_disabled -  voucher has been disabled (active: false) - quantity_exceeded - vouchers redemptions limit has been exceeded - gift_amount_exceeded - gift amount has been exceeded - customer_rules_violated - customer did not match the segment - order_rules_violated - order did not match validation rules - invalid_order - order was specified incorrectly - invalid_amount - order amount was specified incorrectly - missing_amount - order amount was not specified - missing_order_items - order items were not specified - missing_customer - customer was not specified
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param result A filter on the list based on the redemption result. Available options are: SUCCESS, FAILURE. You can provide multiple values by repeating the param. (optional)
     * @param campaign A filter by the campaign **name** that the redemption resources originate from. (optional)
     * @param customer Return redemptions performed by the customer with given id or source_id. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param createdAt A filter on the list based on the object created_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z (optional)
     * @param filters Filters for listing responses. (optional)
     * @return RedemptionsListResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RedemptionsListResponseBody listRedemptions(Integer limit, Integer page, String result, String campaign, String customer, ParameterOrderListRedemptions order, ParameterCreatedBeforeAfter createdAt, ParameterFiltersListRedemptions filters) throws ApiException {
        ApiResponse<RedemptionsListResponseBody> localVarResp = listRedemptionsWithHttpInfo(limit, page, result, campaign, customer, order, createdAt, filters);
        return localVarResp.getData();
    }

    /**
     * List Redemptions
     * Returns a list of redemptions previously created. The redemptions are returned in a sorted order, with the most recent redemptions appearing first. The response returns a list of redemptions of all vouchers.  # Filtering results The result can be narrowed according to specified (or default) filters, for example, you can sort redemptions by date: https://api.voucherify.io/v1/redemptions?limit 3&amp;[created_at][before] 2017-09-08T13:52:18.227Z. A filter based on the object created_at field narrows down the results and lists redemptions done before or after a particular date time. You can use the following options: [created_at][after], [created_at][before]. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z. # Failed Redemptions A redemption may fail for various reasons. You can figure out an exact reason from the failure_code: - resource_not_found - voucher with given code does not exist - voucher_not_active - voucher is not active yet (before start date) - voucher_expired - voucher has already expired (after expiration date) - voucher_disabled -  voucher has been disabled (active: false) - quantity_exceeded - vouchers redemptions limit has been exceeded - gift_amount_exceeded - gift amount has been exceeded - customer_rules_violated - customer did not match the segment - order_rules_violated - order did not match validation rules - invalid_order - order was specified incorrectly - invalid_amount - order amount was specified incorrectly - missing_amount - order amount was not specified - missing_order_items - order items were not specified - missing_customer - customer was not specified
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param result A filter on the list based on the redemption result. Available options are: SUCCESS, FAILURE. You can provide multiple values by repeating the param. (optional)
     * @param campaign A filter by the campaign **name** that the redemption resources originate from. (optional)
     * @param customer Return redemptions performed by the customer with given id or source_id. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param createdAt A filter on the list based on the object created_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z (optional)
     * @param filters Filters for listing responses. (optional)
     * @return ApiResponse&lt;RedemptionsListResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RedemptionsListResponseBody> listRedemptionsWithHttpInfo(Integer limit, Integer page, String result, String campaign, String customer, ParameterOrderListRedemptions order, ParameterCreatedBeforeAfter createdAt, ParameterFiltersListRedemptions filters) throws ApiException {
        okhttp3.Call localVarCall = listRedemptionsValidateBeforeCall(limit, page, result, campaign, customer, order, createdAt, filters, null);
        Type localVarReturnType = new TypeToken<RedemptionsListResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Redemptions (asynchronously)
     * Returns a list of redemptions previously created. The redemptions are returned in a sorted order, with the most recent redemptions appearing first. The response returns a list of redemptions of all vouchers.  # Filtering results The result can be narrowed according to specified (or default) filters, for example, you can sort redemptions by date: https://api.voucherify.io/v1/redemptions?limit 3&amp;[created_at][before] 2017-09-08T13:52:18.227Z. A filter based on the object created_at field narrows down the results and lists redemptions done before or after a particular date time. You can use the following options: [created_at][after], [created_at][before]. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z. # Failed Redemptions A redemption may fail for various reasons. You can figure out an exact reason from the failure_code: - resource_not_found - voucher with given code does not exist - voucher_not_active - voucher is not active yet (before start date) - voucher_expired - voucher has already expired (after expiration date) - voucher_disabled -  voucher has been disabled (active: false) - quantity_exceeded - vouchers redemptions limit has been exceeded - gift_amount_exceeded - gift amount has been exceeded - customer_rules_violated - customer did not match the segment - order_rules_violated - order did not match validation rules - invalid_order - order was specified incorrectly - invalid_amount - order amount was specified incorrectly - missing_amount - order amount was not specified - missing_order_items - order items were not specified - missing_customer - customer was not specified
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param result A filter on the list based on the redemption result. Available options are: SUCCESS, FAILURE. You can provide multiple values by repeating the param. (optional)
     * @param campaign A filter by the campaign **name** that the redemption resources originate from. (optional)
     * @param customer Return redemptions performed by the customer with given id or source_id. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param createdAt A filter on the list based on the object created_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z (optional)
     * @param filters Filters for listing responses. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call listRedemptionsAsync(Integer limit, Integer page, String result, String campaign, String customer, ParameterOrderListRedemptions order, ParameterCreatedBeforeAfter createdAt, ParameterFiltersListRedemptions filters, final ApiCallback<RedemptionsListResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRedemptionsValidateBeforeCall(limit, page, result, campaign, customer, order, createdAt, filters, _callback);
        Type localVarReturnType = new TypeToken<RedemptionsListResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for redeemStackedDiscounts
     * @param redemptionsRedeemRequestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call redeemStackedDiscountsCall(RedemptionsRedeemRequestBody redemptionsRedeemRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = redemptionsRedeemRequestBody;

        // create path and map variables
        String localVarPath = "/v1/redemptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call redeemStackedDiscountsValidateBeforeCall(RedemptionsRedeemRequestBody redemptionsRedeemRequestBody, final ApiCallback _callback) throws ApiException {
        return redeemStackedDiscountsCall(redemptionsRedeemRequestBody, _callback);

    }

    /**
     * Redeem Stackable Discounts
     * # How API returns calculated discounts and order amounts in the response In the table below, you can see the logic the API follows to calculate discounts and amounts:    📘 Rollbacks  You cant roll back a child redemption. When you call rollback on a stacked redemption, all child redemptions will be rolled back. You need to refer to a parent redemption ID in your rollback request.      📘 Also available on client-side  This method is also accessible through public keys which you can use in client-side​ apps: mobile and web browser apps. Go to the dedicated endpoint to learn more.  - Use X-Client-Application-Id as the application ID header.  - Use X-Client-Token as the appliction secret key header.  - Use client-side base URL.  - Use an origin header for your custom domain.
     * @param redemptionsRedeemRequestBody  (optional)
     * @return RedemptionsRedeemResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RedemptionsRedeemResponseBody redeemStackedDiscounts(RedemptionsRedeemRequestBody redemptionsRedeemRequestBody) throws ApiException {
        ApiResponse<RedemptionsRedeemResponseBody> localVarResp = redeemStackedDiscountsWithHttpInfo(redemptionsRedeemRequestBody);
        return localVarResp.getData();
    }

    /**
     * Redeem Stackable Discounts
     * # How API returns calculated discounts and order amounts in the response In the table below, you can see the logic the API follows to calculate discounts and amounts:    📘 Rollbacks  You cant roll back a child redemption. When you call rollback on a stacked redemption, all child redemptions will be rolled back. You need to refer to a parent redemption ID in your rollback request.      📘 Also available on client-side  This method is also accessible through public keys which you can use in client-side​ apps: mobile and web browser apps. Go to the dedicated endpoint to learn more.  - Use X-Client-Application-Id as the application ID header.  - Use X-Client-Token as the appliction secret key header.  - Use client-side base URL.  - Use an origin header for your custom domain.
     * @param redemptionsRedeemRequestBody  (optional)
     * @return ApiResponse&lt;RedemptionsRedeemResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RedemptionsRedeemResponseBody> redeemStackedDiscountsWithHttpInfo(RedemptionsRedeemRequestBody redemptionsRedeemRequestBody) throws ApiException {
        okhttp3.Call localVarCall = redeemStackedDiscountsValidateBeforeCall(redemptionsRedeemRequestBody, null);
        Type localVarReturnType = new TypeToken<RedemptionsRedeemResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Redeem Stackable Discounts (asynchronously)
     * # How API returns calculated discounts and order amounts in the response In the table below, you can see the logic the API follows to calculate discounts and amounts:    📘 Rollbacks  You cant roll back a child redemption. When you call rollback on a stacked redemption, all child redemptions will be rolled back. You need to refer to a parent redemption ID in your rollback request.      📘 Also available on client-side  This method is also accessible through public keys which you can use in client-side​ apps: mobile and web browser apps. Go to the dedicated endpoint to learn more.  - Use X-Client-Application-Id as the application ID header.  - Use X-Client-Token as the appliction secret key header.  - Use client-side base URL.  - Use an origin header for your custom domain.
     * @param redemptionsRedeemRequestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call redeemStackedDiscountsAsync(RedemptionsRedeemRequestBody redemptionsRedeemRequestBody, final ApiCallback<RedemptionsRedeemResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = redeemStackedDiscountsValidateBeforeCall(redemptionsRedeemRequestBody, _callback);
        Type localVarReturnType = new TypeToken<RedemptionsRedeemResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rollbackRedemption
     * @param redemptionId The original redemption ID to be rolled back (undone). (required)
     * @param reason Reason for the rollback. (optional)
     * @param trackingId Customers source_id. (optional)
     * @param redemptionsRollbackCreateRequestBody Add information about the original customer and order. Customer data and Redemption metadata can be updated in Voucherify when passing the customer data in the request body. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call rollbackRedemptionCall(String redemptionId, String reason, String trackingId, RedemptionsRollbackCreateRequestBody redemptionsRollbackCreateRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = redemptionsRollbackCreateRequestBody;

        // create path and map variables
        String localVarPath = "/v1/redemptions/{redemptionId}/rollback"
            .replace("{" + "redemptionId" + "}", localVarApiClient.escapeString(redemptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (reason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reason", reason));
        }

        if (trackingId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tracking_id", trackingId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rollbackRedemptionValidateBeforeCall(String redemptionId, String reason, String trackingId, RedemptionsRollbackCreateRequestBody redemptionsRollbackCreateRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'redemptionId' is set
        if (redemptionId == null) {
            throw new ApiException("Missing the required parameter 'redemptionId' when calling rollbackRedemption(Async)");
        }

        return rollbackRedemptionCall(redemptionId, reason, trackingId, redemptionsRollbackCreateRequestBody, _callback);

    }

    /**
     * Rollback Redemption
     * Your business logic may include a case when you need to undo a redemption. You can revert a redemption by calling this API endpoint.  🚧  You can roll back a redemption up to 3 months back.   # Effect  The operation  - creates a rollback entry in vouchers redemption history (redemption.redemption_entries) and  - gives 1 redemption back to the pool (decreases redeemed_quantity by 1).  # Returned funds  In case of *gift card vouchers*, this method returns funds back according to the source redemption. In case of *loyalty card vouchers*, this method returns points back according to the source redemption.
     * @param redemptionId The original redemption ID to be rolled back (undone). (required)
     * @param reason Reason for the rollback. (optional)
     * @param trackingId Customers source_id. (optional)
     * @param redemptionsRollbackCreateRequestBody Add information about the original customer and order. Customer data and Redemption metadata can be updated in Voucherify when passing the customer data in the request body. (optional)
     * @return RedemptionsRollbackCreateResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RedemptionsRollbackCreateResponseBody rollbackRedemption(String redemptionId, String reason, String trackingId, RedemptionsRollbackCreateRequestBody redemptionsRollbackCreateRequestBody) throws ApiException {
        ApiResponse<RedemptionsRollbackCreateResponseBody> localVarResp = rollbackRedemptionWithHttpInfo(redemptionId, reason, trackingId, redemptionsRollbackCreateRequestBody);
        return localVarResp.getData();
    }

    /**
     * Rollback Redemption
     * Your business logic may include a case when you need to undo a redemption. You can revert a redemption by calling this API endpoint.  🚧  You can roll back a redemption up to 3 months back.   # Effect  The operation  - creates a rollback entry in vouchers redemption history (redemption.redemption_entries) and  - gives 1 redemption back to the pool (decreases redeemed_quantity by 1).  # Returned funds  In case of *gift card vouchers*, this method returns funds back according to the source redemption. In case of *loyalty card vouchers*, this method returns points back according to the source redemption.
     * @param redemptionId The original redemption ID to be rolled back (undone). (required)
     * @param reason Reason for the rollback. (optional)
     * @param trackingId Customers source_id. (optional)
     * @param redemptionsRollbackCreateRequestBody Add information about the original customer and order. Customer data and Redemption metadata can be updated in Voucherify when passing the customer data in the request body. (optional)
     * @return ApiResponse&lt;RedemptionsRollbackCreateResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RedemptionsRollbackCreateResponseBody> rollbackRedemptionWithHttpInfo(String redemptionId, String reason, String trackingId, RedemptionsRollbackCreateRequestBody redemptionsRollbackCreateRequestBody) throws ApiException {
        okhttp3.Call localVarCall = rollbackRedemptionValidateBeforeCall(redemptionId, reason, trackingId, redemptionsRollbackCreateRequestBody, null);
        Type localVarReturnType = new TypeToken<RedemptionsRollbackCreateResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rollback Redemption (asynchronously)
     * Your business logic may include a case when you need to undo a redemption. You can revert a redemption by calling this API endpoint.  🚧  You can roll back a redemption up to 3 months back.   # Effect  The operation  - creates a rollback entry in vouchers redemption history (redemption.redemption_entries) and  - gives 1 redemption back to the pool (decreases redeemed_quantity by 1).  # Returned funds  In case of *gift card vouchers*, this method returns funds back according to the source redemption. In case of *loyalty card vouchers*, this method returns points back according to the source redemption.
     * @param redemptionId The original redemption ID to be rolled back (undone). (required)
     * @param reason Reason for the rollback. (optional)
     * @param trackingId Customers source_id. (optional)
     * @param redemptionsRollbackCreateRequestBody Add information about the original customer and order. Customer data and Redemption metadata can be updated in Voucherify when passing the customer data in the request body. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call rollbackRedemptionAsync(String redemptionId, String reason, String trackingId, RedemptionsRollbackCreateRequestBody redemptionsRollbackCreateRequestBody, final ApiCallback<RedemptionsRollbackCreateResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = rollbackRedemptionValidateBeforeCall(redemptionId, reason, trackingId, redemptionsRollbackCreateRequestBody, _callback);
        Type localVarReturnType = new TypeToken<RedemptionsRollbackCreateResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rollbackStackedRedemptions
     * @param parentRedemptionId Unique identifier of a parent redemption, e.g. r_JQfm73zWSJFQxs3bGxweYjgm. (required)
     * @param reason Reason for the rollback. (optional)
     * @param trackingId Customers source_id. (optional)
     * @param redemptionsRollbacksCreateRequestBody Add information about the original customer and order. Customer data and Redemption metadata can be updated in Voucherify when passing the customer data in the request body. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call rollbackStackedRedemptionsCall(String parentRedemptionId, String reason, String trackingId, RedemptionsRollbacksCreateRequestBody redemptionsRollbacksCreateRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = redemptionsRollbacksCreateRequestBody;

        // create path and map variables
        String localVarPath = "/v1/redemptions/{parentRedemptionId}/rollbacks"
            .replace("{" + "parentRedemptionId" + "}", localVarApiClient.escapeString(parentRedemptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (reason != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reason", reason));
        }

        if (trackingId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tracking_id", trackingId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rollbackStackedRedemptionsValidateBeforeCall(String parentRedemptionId, String reason, String trackingId, RedemptionsRollbacksCreateRequestBody redemptionsRollbacksCreateRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'parentRedemptionId' is set
        if (parentRedemptionId == null) {
            throw new ApiException("Missing the required parameter 'parentRedemptionId' when calling rollbackStackedRedemptions(Async)");
        }

        return rollbackStackedRedemptionsCall(parentRedemptionId, reason, trackingId, redemptionsRollbacksCreateRequestBody, _callback);

    }

    /**
     * Rollback Stackable Redemptions
     * Rollback a stackable redemption. When you rollback a stacked redemption, all child redemptions will be rolled back. Provide the parent redemption ID as the path parameter.  🚧   You can roll back a redemption up to 3 months back.
     * @param parentRedemptionId Unique identifier of a parent redemption, e.g. r_JQfm73zWSJFQxs3bGxweYjgm. (required)
     * @param reason Reason for the rollback. (optional)
     * @param trackingId Customers source_id. (optional)
     * @param redemptionsRollbacksCreateRequestBody Add information about the original customer and order. Customer data and Redemption metadata can be updated in Voucherify when passing the customer data in the request body. (optional)
     * @return RedemptionsRollbacksCreateResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RedemptionsRollbacksCreateResponseBody rollbackStackedRedemptions(String parentRedemptionId, String reason, String trackingId, RedemptionsRollbacksCreateRequestBody redemptionsRollbacksCreateRequestBody) throws ApiException {
        ApiResponse<RedemptionsRollbacksCreateResponseBody> localVarResp = rollbackStackedRedemptionsWithHttpInfo(parentRedemptionId, reason, trackingId, redemptionsRollbacksCreateRequestBody);
        return localVarResp.getData();
    }

    /**
     * Rollback Stackable Redemptions
     * Rollback a stackable redemption. When you rollback a stacked redemption, all child redemptions will be rolled back. Provide the parent redemption ID as the path parameter.  🚧   You can roll back a redemption up to 3 months back.
     * @param parentRedemptionId Unique identifier of a parent redemption, e.g. r_JQfm73zWSJFQxs3bGxweYjgm. (required)
     * @param reason Reason for the rollback. (optional)
     * @param trackingId Customers source_id. (optional)
     * @param redemptionsRollbacksCreateRequestBody Add information about the original customer and order. Customer data and Redemption metadata can be updated in Voucherify when passing the customer data in the request body. (optional)
     * @return ApiResponse&lt;RedemptionsRollbacksCreateResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RedemptionsRollbacksCreateResponseBody> rollbackStackedRedemptionsWithHttpInfo(String parentRedemptionId, String reason, String trackingId, RedemptionsRollbacksCreateRequestBody redemptionsRollbacksCreateRequestBody) throws ApiException {
        okhttp3.Call localVarCall = rollbackStackedRedemptionsValidateBeforeCall(parentRedemptionId, reason, trackingId, redemptionsRollbacksCreateRequestBody, null);
        Type localVarReturnType = new TypeToken<RedemptionsRollbacksCreateResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rollback Stackable Redemptions (asynchronously)
     * Rollback a stackable redemption. When you rollback a stacked redemption, all child redemptions will be rolled back. Provide the parent redemption ID as the path parameter.  🚧   You can roll back a redemption up to 3 months back.
     * @param parentRedemptionId Unique identifier of a parent redemption, e.g. r_JQfm73zWSJFQxs3bGxweYjgm. (required)
     * @param reason Reason for the rollback. (optional)
     * @param trackingId Customers source_id. (optional)
     * @param redemptionsRollbacksCreateRequestBody Add information about the original customer and order. Customer data and Redemption metadata can be updated in Voucherify when passing the customer data in the request body. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call rollbackStackedRedemptionsAsync(String parentRedemptionId, String reason, String trackingId, RedemptionsRollbacksCreateRequestBody redemptionsRollbacksCreateRequestBody, final ApiCallback<RedemptionsRollbacksCreateResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = rollbackStackedRedemptionsValidateBeforeCall(parentRedemptionId, reason, trackingId, redemptionsRollbacksCreateRequestBody, _callback);
        Type localVarReturnType = new TypeToken<RedemptionsRollbacksCreateResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
