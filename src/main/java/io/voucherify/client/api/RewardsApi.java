/*
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.voucherify.client.api;

import io.voucherify.client.ApiCallback;
import io.voucherify.client.ApiClient;
import io.voucherify.client.ApiException;
import io.voucherify.client.ApiResponse;
import io.voucherify.client.Configuration;
import io.voucherify.client.Pair;
import io.voucherify.client.ProgressRequestBody;
import io.voucherify.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.voucherify.client.model.RewardsAssignmentsCreateRequestBody;
import io.voucherify.client.model.RewardsAssignmentsCreateResponseBody;
import io.voucherify.client.model.RewardsAssignmentsGetResponseBody;
import io.voucherify.client.model.RewardsAssignmentsListResponseBody;
import io.voucherify.client.model.RewardsAssignmentsUpdateRequestBody;
import io.voucherify.client.model.RewardsAssignmentsUpdateResponseBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RewardsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RewardsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RewardsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createRewardAssignment
     * @param rewardId A unique reward ID. (required)
     * @param rewardsAssignmentsCreateRequestBody Provide the campaign ID of the campaign to which the reward is to be assigned and define the cost of the reward in terms of loyalty points. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call createRewardAssignmentCall(String rewardId, RewardsAssignmentsCreateRequestBody rewardsAssignmentsCreateRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rewardsAssignmentsCreateRequestBody;

        // create path and map variables
        String localVarPath = "/v1/rewards/{rewardId}/assignments"
            .replace("{" + "rewardId" + "}", localVarApiClient.escapeString(rewardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRewardAssignmentValidateBeforeCall(String rewardId, RewardsAssignmentsCreateRequestBody rewardsAssignmentsCreateRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rewardId' is set
        if (rewardId == null) {
            throw new ApiException("Missing the required parameter 'rewardId' when calling createRewardAssignment(Async)");
        }

        return createRewardAssignmentCall(rewardId, rewardsAssignmentsCreateRequestBody, _callback);

    }

    /**
     * Create Reward Assignment
     * Assigns a reward to a specified loyalty campaign.
     * @param rewardId A unique reward ID. (required)
     * @param rewardsAssignmentsCreateRequestBody Provide the campaign ID of the campaign to which the reward is to be assigned and define the cost of the reward in terms of loyalty points. (optional)
     * @return RewardsAssignmentsCreateResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RewardsAssignmentsCreateResponseBody createRewardAssignment(String rewardId, RewardsAssignmentsCreateRequestBody rewardsAssignmentsCreateRequestBody) throws ApiException {
        ApiResponse<RewardsAssignmentsCreateResponseBody> localVarResp = createRewardAssignmentWithHttpInfo(rewardId, rewardsAssignmentsCreateRequestBody);
        return localVarResp.getData();
    }

    /**
     * Create Reward Assignment
     * Assigns a reward to a specified loyalty campaign.
     * @param rewardId A unique reward ID. (required)
     * @param rewardsAssignmentsCreateRequestBody Provide the campaign ID of the campaign to which the reward is to be assigned and define the cost of the reward in terms of loyalty points. (optional)
     * @return ApiResponse&lt;RewardsAssignmentsCreateResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RewardsAssignmentsCreateResponseBody> createRewardAssignmentWithHttpInfo(String rewardId, RewardsAssignmentsCreateRequestBody rewardsAssignmentsCreateRequestBody) throws ApiException {
        okhttp3.Call localVarCall = createRewardAssignmentValidateBeforeCall(rewardId, rewardsAssignmentsCreateRequestBody, null);
        Type localVarReturnType = new TypeToken<RewardsAssignmentsCreateResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Reward Assignment (asynchronously)
     * Assigns a reward to a specified loyalty campaign.
     * @param rewardId A unique reward ID. (required)
     * @param rewardsAssignmentsCreateRequestBody Provide the campaign ID of the campaign to which the reward is to be assigned and define the cost of the reward in terms of loyalty points. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call createRewardAssignmentAsync(String rewardId, RewardsAssignmentsCreateRequestBody rewardsAssignmentsCreateRequestBody, final ApiCallback<RewardsAssignmentsCreateResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRewardAssignmentValidateBeforeCall(rewardId, rewardsAssignmentsCreateRequestBody, _callback);
        Type localVarReturnType = new TypeToken<RewardsAssignmentsCreateResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteReward
     * @param rewardId A unique reward ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call deleteRewardCall(String rewardId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/rewards/{rewardId}"
            .replace("{" + "rewardId" + "}", localVarApiClient.escapeString(rewardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRewardValidateBeforeCall(String rewardId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rewardId' is set
        if (rewardId == null) {
            throw new ApiException("Missing the required parameter 'rewardId' when calling deleteReward(Async)");
        }

        return deleteRewardCall(rewardId, _callback);

    }

    /**
     * Delete Reward
     * Delete a reward.
     * @param rewardId A unique reward ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteReward(String rewardId) throws ApiException {
        deleteRewardWithHttpInfo(rewardId);
    }

    /**
     * Delete Reward
     * Delete a reward.
     * @param rewardId A unique reward ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteRewardWithHttpInfo(String rewardId) throws ApiException {
        okhttp3.Call localVarCall = deleteRewardValidateBeforeCall(rewardId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Reward (asynchronously)
     * Delete a reward.
     * @param rewardId A unique reward ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call deleteRewardAsync(String rewardId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRewardValidateBeforeCall(rewardId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRewardAssignment
     * @param rewardId A unique reward ID. (required)
     * @param assignmentId A unique reward assignment ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call deleteRewardAssignmentCall(String rewardId, String assignmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/rewards/{rewardId}/assignments/{assignmentId}"
            .replace("{" + "rewardId" + "}", localVarApiClient.escapeString(rewardId.toString()))
            .replace("{" + "assignmentId" + "}", localVarApiClient.escapeString(assignmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRewardAssignmentValidateBeforeCall(String rewardId, String assignmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rewardId' is set
        if (rewardId == null) {
            throw new ApiException("Missing the required parameter 'rewardId' when calling deleteRewardAssignment(Async)");
        }

        // verify the required parameter 'assignmentId' is set
        if (assignmentId == null) {
            throw new ApiException("Missing the required parameter 'assignmentId' when calling deleteRewardAssignment(Async)");
        }

        return deleteRewardAssignmentCall(rewardId, assignmentId, _callback);

    }

    /**
     * Delete Reward Assignment
     * This method deletes a reward assignment for a particular reward.
     * @param rewardId A unique reward ID. (required)
     * @param assignmentId A unique reward assignment ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteRewardAssignment(String rewardId, String assignmentId) throws ApiException {
        deleteRewardAssignmentWithHttpInfo(rewardId, assignmentId);
    }

    /**
     * Delete Reward Assignment
     * This method deletes a reward assignment for a particular reward.
     * @param rewardId A unique reward ID. (required)
     * @param assignmentId A unique reward assignment ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteRewardAssignmentWithHttpInfo(String rewardId, String assignmentId) throws ApiException {
        okhttp3.Call localVarCall = deleteRewardAssignmentValidateBeforeCall(rewardId, assignmentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Reward Assignment (asynchronously)
     * This method deletes a reward assignment for a particular reward.
     * @param rewardId A unique reward ID. (required)
     * @param assignmentId A unique reward assignment ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call deleteRewardAssignmentAsync(String rewardId, String assignmentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRewardAssignmentValidateBeforeCall(rewardId, assignmentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRewardAssignment
     * @param rewardId A unique reward ID. (required)
     * @param assignmentId A unique reward assignment ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getRewardAssignmentCall(String rewardId, String assignmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/rewards/{rewardId}/assignments/{assignmentId}"
            .replace("{" + "rewardId" + "}", localVarApiClient.escapeString(rewardId.toString()))
            .replace("{" + "assignmentId" + "}", localVarApiClient.escapeString(assignmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRewardAssignmentValidateBeforeCall(String rewardId, String assignmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rewardId' is set
        if (rewardId == null) {
            throw new ApiException("Missing the required parameter 'rewardId' when calling getRewardAssignment(Async)");
        }

        // verify the required parameter 'assignmentId' is set
        if (assignmentId == null) {
            throw new ApiException("Missing the required parameter 'assignmentId' when calling getRewardAssignment(Async)");
        }

        return getRewardAssignmentCall(rewardId, assignmentId, _callback);

    }

    /**
     * Get Reward Assignment
     * Retrieve a reward assignment.
     * @param rewardId A unique reward ID. (required)
     * @param assignmentId A unique reward assignment ID. (required)
     * @return RewardsAssignmentsGetResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RewardsAssignmentsGetResponseBody getRewardAssignment(String rewardId, String assignmentId) throws ApiException {
        ApiResponse<RewardsAssignmentsGetResponseBody> localVarResp = getRewardAssignmentWithHttpInfo(rewardId, assignmentId);
        return localVarResp.getData();
    }

    /**
     * Get Reward Assignment
     * Retrieve a reward assignment.
     * @param rewardId A unique reward ID. (required)
     * @param assignmentId A unique reward assignment ID. (required)
     * @return ApiResponse&lt;RewardsAssignmentsGetResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RewardsAssignmentsGetResponseBody> getRewardAssignmentWithHttpInfo(String rewardId, String assignmentId) throws ApiException {
        okhttp3.Call localVarCall = getRewardAssignmentValidateBeforeCall(rewardId, assignmentId, null);
        Type localVarReturnType = new TypeToken<RewardsAssignmentsGetResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Reward Assignment (asynchronously)
     * Retrieve a reward assignment.
     * @param rewardId A unique reward ID. (required)
     * @param assignmentId A unique reward assignment ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getRewardAssignmentAsync(String rewardId, String assignmentId, final ApiCallback<RewardsAssignmentsGetResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRewardAssignmentValidateBeforeCall(rewardId, assignmentId, _callback);
        Type localVarReturnType = new TypeToken<RewardsAssignmentsGetResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listRewardAssignments
     * @param rewardId A unique reward ID. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call listRewardAssignmentsCall(String rewardId, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/rewards/{rewardId}/assignments"
            .replace("{" + "rewardId" + "}", localVarApiClient.escapeString(rewardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRewardAssignmentsValidateBeforeCall(String rewardId, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rewardId' is set
        if (rewardId == null) {
            throw new ApiException("Missing the required parameter 'rewardId' when calling listRewardAssignments(Async)");
        }

        return listRewardAssignmentsCall(rewardId, limit, page, _callback);

    }

    /**
     * List Reward Assignments
     * Retrieve reward assignments by the reward ID.
     * @param rewardId A unique reward ID. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @return RewardsAssignmentsListResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RewardsAssignmentsListResponseBody listRewardAssignments(String rewardId, Integer limit, Integer page) throws ApiException {
        ApiResponse<RewardsAssignmentsListResponseBody> localVarResp = listRewardAssignmentsWithHttpInfo(rewardId, limit, page);
        return localVarResp.getData();
    }

    /**
     * List Reward Assignments
     * Retrieve reward assignments by the reward ID.
     * @param rewardId A unique reward ID. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @return ApiResponse&lt;RewardsAssignmentsListResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RewardsAssignmentsListResponseBody> listRewardAssignmentsWithHttpInfo(String rewardId, Integer limit, Integer page) throws ApiException {
        okhttp3.Call localVarCall = listRewardAssignmentsValidateBeforeCall(rewardId, limit, page, null);
        Type localVarReturnType = new TypeToken<RewardsAssignmentsListResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Reward Assignments (asynchronously)
     * Retrieve reward assignments by the reward ID.
     * @param rewardId A unique reward ID. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call listRewardAssignmentsAsync(String rewardId, Integer limit, Integer page, final ApiCallback<RewardsAssignmentsListResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRewardAssignmentsValidateBeforeCall(rewardId, limit, page, _callback);
        Type localVarReturnType = new TypeToken<RewardsAssignmentsListResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRewardAssignment
     * @param rewardId A unique reward ID. (required)
     * @param assignmentId A unique reward assignment ID. (required)
     * @param rewardsAssignmentsUpdateRequestBody Define the number of points required to exchange for the reward. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call updateRewardAssignmentCall(String rewardId, String assignmentId, RewardsAssignmentsUpdateRequestBody rewardsAssignmentsUpdateRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rewardsAssignmentsUpdateRequestBody;

        // create path and map variables
        String localVarPath = "/v1/rewards/{rewardId}/assignments/{assignmentId}"
            .replace("{" + "rewardId" + "}", localVarApiClient.escapeString(rewardId.toString()))
            .replace("{" + "assignmentId" + "}", localVarApiClient.escapeString(assignmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRewardAssignmentValidateBeforeCall(String rewardId, String assignmentId, RewardsAssignmentsUpdateRequestBody rewardsAssignmentsUpdateRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rewardId' is set
        if (rewardId == null) {
            throw new ApiException("Missing the required parameter 'rewardId' when calling updateRewardAssignment(Async)");
        }

        // verify the required parameter 'assignmentId' is set
        if (assignmentId == null) {
            throw new ApiException("Missing the required parameter 'assignmentId' when calling updateRewardAssignment(Async)");
        }

        return updateRewardAssignmentCall(rewardId, assignmentId, rewardsAssignmentsUpdateRequestBody, _callback);

    }

    /**
     * Update Reward Assignment
     * Update the number of points needed to successfully redeem the reward.
     * @param rewardId A unique reward ID. (required)
     * @param assignmentId A unique reward assignment ID. (required)
     * @param rewardsAssignmentsUpdateRequestBody Define the number of points required to exchange for the reward. (optional)
     * @return RewardsAssignmentsUpdateResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RewardsAssignmentsUpdateResponseBody updateRewardAssignment(String rewardId, String assignmentId, RewardsAssignmentsUpdateRequestBody rewardsAssignmentsUpdateRequestBody) throws ApiException {
        ApiResponse<RewardsAssignmentsUpdateResponseBody> localVarResp = updateRewardAssignmentWithHttpInfo(rewardId, assignmentId, rewardsAssignmentsUpdateRequestBody);
        return localVarResp.getData();
    }

    /**
     * Update Reward Assignment
     * Update the number of points needed to successfully redeem the reward.
     * @param rewardId A unique reward ID. (required)
     * @param assignmentId A unique reward assignment ID. (required)
     * @param rewardsAssignmentsUpdateRequestBody Define the number of points required to exchange for the reward. (optional)
     * @return ApiResponse&lt;RewardsAssignmentsUpdateResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RewardsAssignmentsUpdateResponseBody> updateRewardAssignmentWithHttpInfo(String rewardId, String assignmentId, RewardsAssignmentsUpdateRequestBody rewardsAssignmentsUpdateRequestBody) throws ApiException {
        okhttp3.Call localVarCall = updateRewardAssignmentValidateBeforeCall(rewardId, assignmentId, rewardsAssignmentsUpdateRequestBody, null);
        Type localVarReturnType = new TypeToken<RewardsAssignmentsUpdateResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Reward Assignment (asynchronously)
     * Update the number of points needed to successfully redeem the reward.
     * @param rewardId A unique reward ID. (required)
     * @param assignmentId A unique reward assignment ID. (required)
     * @param rewardsAssignmentsUpdateRequestBody Define the number of points required to exchange for the reward. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call updateRewardAssignmentAsync(String rewardId, String assignmentId, RewardsAssignmentsUpdateRequestBody rewardsAssignmentsUpdateRequestBody, final ApiCallback<RewardsAssignmentsUpdateResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRewardAssignmentValidateBeforeCall(rewardId, assignmentId, rewardsAssignmentsUpdateRequestBody, _callback);
        Type localVarReturnType = new TypeToken<RewardsAssignmentsUpdateResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
