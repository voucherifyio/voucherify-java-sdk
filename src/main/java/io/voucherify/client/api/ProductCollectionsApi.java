/*
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.voucherify.client.api;

import io.voucherify.client.ApiCallback;
import io.voucherify.client.ApiClient;
import io.voucherify.client.ApiException;
import io.voucherify.client.ApiResponse;
import io.voucherify.client.Configuration;
import io.voucherify.client.Pair;
import io.voucherify.client.ProgressRequestBody;
import io.voucherify.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import io.voucherify.client.model.ParameterOrder;
import io.voucherify.client.model.ProductCollectionsCreateRequestBody;
import io.voucherify.client.model.ProductCollectionsCreateResponseBody;
import io.voucherify.client.model.ProductCollectionsGetResponseBody;
import io.voucherify.client.model.ProductCollectionsListResponseBody;
import io.voucherify.client.model.ProductCollectionsProductsListResponseBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProductCollectionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProductCollectionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductCollectionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createProductCollection
     * @param productCollectionsCreateRequestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call createProductCollectionCall(ProductCollectionsCreateRequestBody productCollectionsCreateRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productCollectionsCreateRequestBody;

        // create path and map variables
        String localVarPath = "/v1/product-collections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProductCollectionValidateBeforeCall(ProductCollectionsCreateRequestBody productCollectionsCreateRequestBody, final ApiCallback _callback) throws ApiException {
        return createProductCollectionCall(productCollectionsCreateRequestBody, _callback);

    }

    /**
     * Create Product Collection
     * This method creates a new product collection.
     * @param productCollectionsCreateRequestBody  (optional)
     * @return ProductCollectionsCreateResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProductCollectionsCreateResponseBody createProductCollection(ProductCollectionsCreateRequestBody productCollectionsCreateRequestBody) throws ApiException {
        ApiResponse<ProductCollectionsCreateResponseBody> localVarResp = createProductCollectionWithHttpInfo(productCollectionsCreateRequestBody);
        return localVarResp.getData();
    }

    /**
     * Create Product Collection
     * This method creates a new product collection.
     * @param productCollectionsCreateRequestBody  (optional)
     * @return ApiResponse&lt;ProductCollectionsCreateResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProductCollectionsCreateResponseBody> createProductCollectionWithHttpInfo(ProductCollectionsCreateRequestBody productCollectionsCreateRequestBody) throws ApiException {
        okhttp3.Call localVarCall = createProductCollectionValidateBeforeCall(productCollectionsCreateRequestBody, null);
        Type localVarReturnType = new TypeToken<ProductCollectionsCreateResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Product Collection (asynchronously)
     * This method creates a new product collection.
     * @param productCollectionsCreateRequestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call createProductCollectionAsync(ProductCollectionsCreateRequestBody productCollectionsCreateRequestBody, final ApiCallback<ProductCollectionsCreateResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProductCollectionValidateBeforeCall(productCollectionsCreateRequestBody, _callback);
        Type localVarReturnType = new TypeToken<ProductCollectionsCreateResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProductCollection
     * @param productCollectionId A unique product collection ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call deleteProductCollectionCall(String productCollectionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/product-collections/{productCollectionId}"
            .replace("{" + "productCollectionId" + "}", localVarApiClient.escapeString(productCollectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProductCollectionValidateBeforeCall(String productCollectionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productCollectionId' is set
        if (productCollectionId == null) {
            throw new ApiException("Missing the required parameter 'productCollectionId' when calling deleteProductCollection(Async)");
        }

        return deleteProductCollectionCall(productCollectionId, _callback);

    }

    /**
     * Delete Product Collection
     * This method deletes a product collection.
     * @param productCollectionId A unique product collection ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteProductCollection(String productCollectionId) throws ApiException {
        deleteProductCollectionWithHttpInfo(productCollectionId);
    }

    /**
     * Delete Product Collection
     * This method deletes a product collection.
     * @param productCollectionId A unique product collection ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteProductCollectionWithHttpInfo(String productCollectionId) throws ApiException {
        okhttp3.Call localVarCall = deleteProductCollectionValidateBeforeCall(productCollectionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Product Collection (asynchronously)
     * This method deletes a product collection.
     * @param productCollectionId A unique product collection ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call deleteProductCollectionAsync(String productCollectionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProductCollectionValidateBeforeCall(productCollectionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProductCollection
     * @param productCollectionId A unique product collection ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getProductCollectionCall(String productCollectionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/product-collections/{productCollectionId}"
            .replace("{" + "productCollectionId" + "}", localVarApiClient.escapeString(productCollectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductCollectionValidateBeforeCall(String productCollectionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productCollectionId' is set
        if (productCollectionId == null) {
            throw new ApiException("Missing the required parameter 'productCollectionId' when calling getProductCollection(Async)");
        }

        return getProductCollectionCall(productCollectionId, _callback);

    }

    /**
     * Get Product Collection
     * Retrieves the product collection.
     * @param productCollectionId A unique product collection ID. (required)
     * @return ProductCollectionsGetResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProductCollectionsGetResponseBody getProductCollection(String productCollectionId) throws ApiException {
        ApiResponse<ProductCollectionsGetResponseBody> localVarResp = getProductCollectionWithHttpInfo(productCollectionId);
        return localVarResp.getData();
    }

    /**
     * Get Product Collection
     * Retrieves the product collection.
     * @param productCollectionId A unique product collection ID. (required)
     * @return ApiResponse&lt;ProductCollectionsGetResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProductCollectionsGetResponseBody> getProductCollectionWithHttpInfo(String productCollectionId) throws ApiException {
        okhttp3.Call localVarCall = getProductCollectionValidateBeforeCall(productCollectionId, null);
        Type localVarReturnType = new TypeToken<ProductCollectionsGetResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Product Collection (asynchronously)
     * Retrieves the product collection.
     * @param productCollectionId A unique product collection ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getProductCollectionAsync(String productCollectionId, final ApiCallback<ProductCollectionsGetResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductCollectionValidateBeforeCall(productCollectionId, _callback);
        Type localVarReturnType = new TypeToken<ProductCollectionsGetResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listProductCollections
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call listProductCollectionsCall(Integer limit, Integer page, ParameterOrder order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/product-collections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listProductCollectionsValidateBeforeCall(Integer limit, Integer page, ParameterOrder order, final ApiCallback _callback) throws ApiException {
        return listProductCollectionsCall(limit, page, order, _callback);

    }

    /**
     * List Product Collections
     * This method returns a list of product collections.
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @return ProductCollectionsListResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProductCollectionsListResponseBody listProductCollections(Integer limit, Integer page, ParameterOrder order) throws ApiException {
        ApiResponse<ProductCollectionsListResponseBody> localVarResp = listProductCollectionsWithHttpInfo(limit, page, order);
        return localVarResp.getData();
    }

    /**
     * List Product Collections
     * This method returns a list of product collections.
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @return ApiResponse&lt;ProductCollectionsListResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProductCollectionsListResponseBody> listProductCollectionsWithHttpInfo(Integer limit, Integer page, ParameterOrder order) throws ApiException {
        okhttp3.Call localVarCall = listProductCollectionsValidateBeforeCall(limit, page, order, null);
        Type localVarReturnType = new TypeToken<ProductCollectionsListResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Product Collections (asynchronously)
     * This method returns a list of product collections.
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call listProductCollectionsAsync(Integer limit, Integer page, ParameterOrder order, final ApiCallback<ProductCollectionsListResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listProductCollectionsValidateBeforeCall(limit, page, order, _callback);
        Type localVarReturnType = new TypeToken<ProductCollectionsListResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listProductsInCollection
     * @param productCollectionId Unique product collection ID. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param startingAfter Timestamp representing the date and time to use in starting_after cursor to get more data. Represented in ISO 8601 format. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call listProductsInCollectionCall(String productCollectionId, Integer limit, Integer page, ParameterOrder order, OffsetDateTime startingAfter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/product-collections/{productCollectionId}/products"
            .replace("{" + "productCollectionId" + "}", localVarApiClient.escapeString(productCollectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (startingAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting_after", startingAfter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listProductsInCollectionValidateBeforeCall(String productCollectionId, Integer limit, Integer page, ParameterOrder order, OffsetDateTime startingAfter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productCollectionId' is set
        if (productCollectionId == null) {
            throw new ApiException("Missing the required parameter 'productCollectionId' when calling listProductsInCollection(Async)");
        }

        return listProductsInCollectionCall(productCollectionId, limit, page, order, startingAfter, _callback);

    }

    /**
     * List Products in Collection
     * Retrieves list of products from a product collection; works for both dynamic and static product collections.
     * @param productCollectionId Unique product collection ID. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param startingAfter Timestamp representing the date and time to use in starting_after cursor to get more data. Represented in ISO 8601 format. (optional)
     * @return ProductCollectionsProductsListResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProductCollectionsProductsListResponseBody listProductsInCollection(String productCollectionId, Integer limit, Integer page, ParameterOrder order, OffsetDateTime startingAfter) throws ApiException {
        ApiResponse<ProductCollectionsProductsListResponseBody> localVarResp = listProductsInCollectionWithHttpInfo(productCollectionId, limit, page, order, startingAfter);
        return localVarResp.getData();
    }

    /**
     * List Products in Collection
     * Retrieves list of products from a product collection; works for both dynamic and static product collections.
     * @param productCollectionId Unique product collection ID. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param startingAfter Timestamp representing the date and time to use in starting_after cursor to get more data. Represented in ISO 8601 format. (optional)
     * @return ApiResponse&lt;ProductCollectionsProductsListResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProductCollectionsProductsListResponseBody> listProductsInCollectionWithHttpInfo(String productCollectionId, Integer limit, Integer page, ParameterOrder order, OffsetDateTime startingAfter) throws ApiException {
        okhttp3.Call localVarCall = listProductsInCollectionValidateBeforeCall(productCollectionId, limit, page, order, startingAfter, null);
        Type localVarReturnType = new TypeToken<ProductCollectionsProductsListResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Products in Collection (asynchronously)
     * Retrieves list of products from a product collection; works for both dynamic and static product collections.
     * @param productCollectionId Unique product collection ID. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param startingAfter Timestamp representing the date and time to use in starting_after cursor to get more data. Represented in ISO 8601 format. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call listProductsInCollectionAsync(String productCollectionId, Integer limit, Integer page, ParameterOrder order, OffsetDateTime startingAfter, final ApiCallback<ProductCollectionsProductsListResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listProductsInCollectionValidateBeforeCall(productCollectionId, limit, page, order, startingAfter, _callback);
        Type localVarReturnType = new TypeToken<ProductCollectionsProductsListResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
