/*
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.voucherify.client.api;

import io.voucherify.client.ApiCallback;
import io.voucherify.client.ApiClient;
import io.voucherify.client.ApiException;
import io.voucherify.client.ApiResponse;
import io.voucherify.client.Configuration;
import io.voucherify.client.Pair;
import io.voucherify.client.ProgressRequestBody;
import io.voucherify.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import io.voucherify.client.model.ParameterOrderListValidationRuleAssignments;
import io.voucherify.client.model.ParameterOrderListValidationRules;
import io.voucherify.client.model.ValidationRulesAssignmentsCreateRequestBody;
import io.voucherify.client.model.ValidationRulesAssignmentsCreateResponseBody;
import io.voucherify.client.model.ValidationRulesAssignmentsListResponseBody;
import io.voucherify.client.model.ValidationRulesCreateRequestBody;
import io.voucherify.client.model.ValidationRulesCreateResponseBody;
import io.voucherify.client.model.ValidationRulesGetResponseBody;
import io.voucherify.client.model.ValidationRulesListResponseBody;
import io.voucherify.client.model.ValidationRulesUpdateRequestBody;
import io.voucherify.client.model.ValidationRulesUpdateResponseBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ValidationRulesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ValidationRulesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ValidationRulesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createValidationRuleAssignment
     * @param validationRuleId Unique validation rule ID. (required)
     * @param force If this flag is set to true, the previous assignment with the same data will be deleted and a new one will be added. (optional)
     * @param validationRulesAssignmentsCreateRequestBody Specify the resource that you would like to assign the validation rule to. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call createValidationRuleAssignmentCall(String validationRuleId, Boolean force, ValidationRulesAssignmentsCreateRequestBody validationRulesAssignmentsCreateRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = validationRulesAssignmentsCreateRequestBody;

        // create path and map variables
        String localVarPath = "/v1/validation-rules/{validationRuleId}/assignments"
            .replace("{" + "validationRuleId" + "}", localVarApiClient.escapeString(validationRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createValidationRuleAssignmentValidateBeforeCall(String validationRuleId, Boolean force, ValidationRulesAssignmentsCreateRequestBody validationRulesAssignmentsCreateRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'validationRuleId' is set
        if (validationRuleId == null) {
            throw new ApiException("Missing the required parameter 'validationRuleId' when calling createValidationRuleAssignment(Async)");
        }

        return createValidationRuleAssignmentCall(validationRuleId, force, validationRulesAssignmentsCreateRequestBody, _callback);

    }

    /**
     * Create Validation Rules Assignments
     * Assign validation rule to either one of the following objects: voucher, campaign, promotion tier, earning rule, reward, distribution.
     * @param validationRuleId Unique validation rule ID. (required)
     * @param force If this flag is set to true, the previous assignment with the same data will be deleted and a new one will be added. (optional)
     * @param validationRulesAssignmentsCreateRequestBody Specify the resource that you would like to assign the validation rule to. (optional)
     * @return ValidationRulesAssignmentsCreateResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ValidationRulesAssignmentsCreateResponseBody createValidationRuleAssignment(String validationRuleId, Boolean force, ValidationRulesAssignmentsCreateRequestBody validationRulesAssignmentsCreateRequestBody) throws ApiException {
        ApiResponse<ValidationRulesAssignmentsCreateResponseBody> localVarResp = createValidationRuleAssignmentWithHttpInfo(validationRuleId, force, validationRulesAssignmentsCreateRequestBody);
        return localVarResp.getData();
    }

    /**
     * Create Validation Rules Assignments
     * Assign validation rule to either one of the following objects: voucher, campaign, promotion tier, earning rule, reward, distribution.
     * @param validationRuleId Unique validation rule ID. (required)
     * @param force If this flag is set to true, the previous assignment with the same data will be deleted and a new one will be added. (optional)
     * @param validationRulesAssignmentsCreateRequestBody Specify the resource that you would like to assign the validation rule to. (optional)
     * @return ApiResponse&lt;ValidationRulesAssignmentsCreateResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ValidationRulesAssignmentsCreateResponseBody> createValidationRuleAssignmentWithHttpInfo(String validationRuleId, Boolean force, ValidationRulesAssignmentsCreateRequestBody validationRulesAssignmentsCreateRequestBody) throws ApiException {
        okhttp3.Call localVarCall = createValidationRuleAssignmentValidateBeforeCall(validationRuleId, force, validationRulesAssignmentsCreateRequestBody, null);
        Type localVarReturnType = new TypeToken<ValidationRulesAssignmentsCreateResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Validation Rules Assignments (asynchronously)
     * Assign validation rule to either one of the following objects: voucher, campaign, promotion tier, earning rule, reward, distribution.
     * @param validationRuleId Unique validation rule ID. (required)
     * @param force If this flag is set to true, the previous assignment with the same data will be deleted and a new one will be added. (optional)
     * @param validationRulesAssignmentsCreateRequestBody Specify the resource that you would like to assign the validation rule to. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call createValidationRuleAssignmentAsync(String validationRuleId, Boolean force, ValidationRulesAssignmentsCreateRequestBody validationRulesAssignmentsCreateRequestBody, final ApiCallback<ValidationRulesAssignmentsCreateResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = createValidationRuleAssignmentValidateBeforeCall(validationRuleId, force, validationRulesAssignmentsCreateRequestBody, _callback);
        Type localVarReturnType = new TypeToken<ValidationRulesAssignmentsCreateResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createValidationRules
     * @param validationRulesCreateRequestBody Specify the validation rules parameters. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call createValidationRulesCall(ValidationRulesCreateRequestBody validationRulesCreateRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = validationRulesCreateRequestBody;

        // create path and map variables
        String localVarPath = "/v1/validation-rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createValidationRulesValidateBeforeCall(ValidationRulesCreateRequestBody validationRulesCreateRequestBody, final ApiCallback _callback) throws ApiException {
        return createValidationRulesCall(validationRulesCreateRequestBody, _callback);

    }

    /**
     * Create Validation Rules
     * Create validation rules.
     * @param validationRulesCreateRequestBody Specify the validation rules parameters. (optional)
     * @return ValidationRulesCreateResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ValidationRulesCreateResponseBody createValidationRules(ValidationRulesCreateRequestBody validationRulesCreateRequestBody) throws ApiException {
        ApiResponse<ValidationRulesCreateResponseBody> localVarResp = createValidationRulesWithHttpInfo(validationRulesCreateRequestBody);
        return localVarResp.getData();
    }

    /**
     * Create Validation Rules
     * Create validation rules.
     * @param validationRulesCreateRequestBody Specify the validation rules parameters. (optional)
     * @return ApiResponse&lt;ValidationRulesCreateResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ValidationRulesCreateResponseBody> createValidationRulesWithHttpInfo(ValidationRulesCreateRequestBody validationRulesCreateRequestBody) throws ApiException {
        okhttp3.Call localVarCall = createValidationRulesValidateBeforeCall(validationRulesCreateRequestBody, null);
        Type localVarReturnType = new TypeToken<ValidationRulesCreateResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Validation Rules (asynchronously)
     * Create validation rules.
     * @param validationRulesCreateRequestBody Specify the validation rules parameters. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call createValidationRulesAsync(ValidationRulesCreateRequestBody validationRulesCreateRequestBody, final ApiCallback<ValidationRulesCreateResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = createValidationRulesValidateBeforeCall(validationRulesCreateRequestBody, _callback);
        Type localVarReturnType = new TypeToken<ValidationRulesCreateResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteValidationRuleAssignment
     * @param validationRuleId A unique validation rule ID. (required)
     * @param assignmentId A unique validation rule assignment ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call deleteValidationRuleAssignmentCall(String validationRuleId, String assignmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/validation-rules/{validationRuleId}/assignments/{assignmentId}"
            .replace("{" + "validationRuleId" + "}", localVarApiClient.escapeString(validationRuleId.toString()))
            .replace("{" + "assignmentId" + "}", localVarApiClient.escapeString(assignmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteValidationRuleAssignmentValidateBeforeCall(String validationRuleId, String assignmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'validationRuleId' is set
        if (validationRuleId == null) {
            throw new ApiException("Missing the required parameter 'validationRuleId' when calling deleteValidationRuleAssignment(Async)");
        }

        // verify the required parameter 'assignmentId' is set
        if (assignmentId == null) {
            throw new ApiException("Missing the required parameter 'assignmentId' when calling deleteValidationRuleAssignment(Async)");
        }

        return deleteValidationRuleAssignmentCall(validationRuleId, assignmentId, _callback);

    }

    /**
     * Delete Validation Rule Assignment
     * This method deletes a validation rule assignment.
     * @param validationRuleId A unique validation rule ID. (required)
     * @param assignmentId A unique validation rule assignment ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteValidationRuleAssignment(String validationRuleId, String assignmentId) throws ApiException {
        deleteValidationRuleAssignmentWithHttpInfo(validationRuleId, assignmentId);
    }

    /**
     * Delete Validation Rule Assignment
     * This method deletes a validation rule assignment.
     * @param validationRuleId A unique validation rule ID. (required)
     * @param assignmentId A unique validation rule assignment ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteValidationRuleAssignmentWithHttpInfo(String validationRuleId, String assignmentId) throws ApiException {
        okhttp3.Call localVarCall = deleteValidationRuleAssignmentValidateBeforeCall(validationRuleId, assignmentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Validation Rule Assignment (asynchronously)
     * This method deletes a validation rule assignment.
     * @param validationRuleId A unique validation rule ID. (required)
     * @param assignmentId A unique validation rule assignment ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call deleteValidationRuleAssignmentAsync(String validationRuleId, String assignmentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteValidationRuleAssignmentValidateBeforeCall(validationRuleId, assignmentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteValidationRules
     * @param validationRuleId A unique validation rule ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call deleteValidationRulesCall(String validationRuleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/validation-rules/{validationRuleId}"
            .replace("{" + "validationRuleId" + "}", localVarApiClient.escapeString(validationRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteValidationRulesValidateBeforeCall(String validationRuleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'validationRuleId' is set
        if (validationRuleId == null) {
            throw new ApiException("Missing the required parameter 'validationRuleId' when calling deleteValidationRules(Async)");
        }

        return deleteValidationRulesCall(validationRuleId, _callback);

    }

    /**
     * Delete Validation Rule
     * This method deletes a validation rule.
     * @param validationRuleId A unique validation rule ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteValidationRules(String validationRuleId) throws ApiException {
        deleteValidationRulesWithHttpInfo(validationRuleId);
    }

    /**
     * Delete Validation Rule
     * This method deletes a validation rule.
     * @param validationRuleId A unique validation rule ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteValidationRulesWithHttpInfo(String validationRuleId) throws ApiException {
        okhttp3.Call localVarCall = deleteValidationRulesValidateBeforeCall(validationRuleId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Validation Rule (asynchronously)
     * This method deletes a validation rule.
     * @param validationRuleId A unique validation rule ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call deleteValidationRulesAsync(String validationRuleId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteValidationRulesValidateBeforeCall(validationRuleId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getValidationRule
     * @param validationRuleId A unique validation rule ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getValidationRuleCall(String validationRuleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/validation-rules/{validationRuleId}"
            .replace("{" + "validationRuleId" + "}", localVarApiClient.escapeString(validationRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValidationRuleValidateBeforeCall(String validationRuleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'validationRuleId' is set
        if (validationRuleId == null) {
            throw new ApiException("Missing the required parameter 'validationRuleId' when calling getValidationRule(Async)");
        }

        return getValidationRuleCall(validationRuleId, _callback);

    }

    /**
     * Get Validation Rule
     * Retrieve the details of a validation rule.
     * @param validationRuleId A unique validation rule ID. (required)
     * @return ValidationRulesGetResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ValidationRulesGetResponseBody getValidationRule(String validationRuleId) throws ApiException {
        ApiResponse<ValidationRulesGetResponseBody> localVarResp = getValidationRuleWithHttpInfo(validationRuleId);
        return localVarResp.getData();
    }

    /**
     * Get Validation Rule
     * Retrieve the details of a validation rule.
     * @param validationRuleId A unique validation rule ID. (required)
     * @return ApiResponse&lt;ValidationRulesGetResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ValidationRulesGetResponseBody> getValidationRuleWithHttpInfo(String validationRuleId) throws ApiException {
        okhttp3.Call localVarCall = getValidationRuleValidateBeforeCall(validationRuleId, null);
        Type localVarReturnType = new TypeToken<ValidationRulesGetResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Validation Rule (asynchronously)
     * Retrieve the details of a validation rule.
     * @param validationRuleId A unique validation rule ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getValidationRuleAsync(String validationRuleId, final ApiCallback<ValidationRulesGetResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = getValidationRuleValidateBeforeCall(validationRuleId, _callback);
        Type localVarReturnType = new TypeToken<ValidationRulesGetResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listValidationRuleAssignments
     * @param validationRuleId Unique validation rule ID. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param order This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call listValidationRuleAssignmentsCall(String validationRuleId, Integer limit, Integer page, ParameterOrderListValidationRuleAssignments order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/validation-rules/{validationRuleId}/assignments"
            .replace("{" + "validationRuleId" + "}", localVarApiClient.escapeString(validationRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidationRuleAssignmentsValidateBeforeCall(String validationRuleId, Integer limit, Integer page, ParameterOrderListValidationRuleAssignments order, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'validationRuleId' is set
        if (validationRuleId == null) {
            throw new ApiException("Missing the required parameter 'validationRuleId' when calling listValidationRuleAssignments(Async)");
        }

        return listValidationRuleAssignmentsCall(validationRuleId, limit, page, order, _callback);

    }

    /**
     * List Validation Rule Assignments
     * Retrieve validation rule assignments for a specific validation rule.
     * @param validationRuleId Unique validation rule ID. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param order This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @return ValidationRulesAssignmentsListResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ValidationRulesAssignmentsListResponseBody listValidationRuleAssignments(String validationRuleId, Integer limit, Integer page, ParameterOrderListValidationRuleAssignments order) throws ApiException {
        ApiResponse<ValidationRulesAssignmentsListResponseBody> localVarResp = listValidationRuleAssignmentsWithHttpInfo(validationRuleId, limit, page, order);
        return localVarResp.getData();
    }

    /**
     * List Validation Rule Assignments
     * Retrieve validation rule assignments for a specific validation rule.
     * @param validationRuleId Unique validation rule ID. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param order This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @return ApiResponse&lt;ValidationRulesAssignmentsListResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ValidationRulesAssignmentsListResponseBody> listValidationRuleAssignmentsWithHttpInfo(String validationRuleId, Integer limit, Integer page, ParameterOrderListValidationRuleAssignments order) throws ApiException {
        okhttp3.Call localVarCall = listValidationRuleAssignmentsValidateBeforeCall(validationRuleId, limit, page, order, null);
        Type localVarReturnType = new TypeToken<ValidationRulesAssignmentsListResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Validation Rule Assignments (asynchronously)
     * Retrieve validation rule assignments for a specific validation rule.
     * @param validationRuleId Unique validation rule ID. (required)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param order This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call listValidationRuleAssignmentsAsync(String validationRuleId, Integer limit, Integer page, ParameterOrderListValidationRuleAssignments order, final ApiCallback<ValidationRulesAssignmentsListResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidationRuleAssignmentsValidateBeforeCall(validationRuleId, limit, page, order, _callback);
        Type localVarReturnType = new TypeToken<ValidationRulesAssignmentsListResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listValidationRules
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param order This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param startDate Timestamp representing the date and time which results must start on. Represented in ISO 8601 format. (optional)
     * @param endDate Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call listValidationRulesCall(Integer limit, Integer page, ParameterOrderListValidationRules order, OffsetDateTime startDate, OffsetDateTime endDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/validation-rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidationRulesValidateBeforeCall(Integer limit, Integer page, ParameterOrderListValidationRules order, OffsetDateTime startDate, OffsetDateTime endDate, final ApiCallback _callback) throws ApiException {
        return listValidationRulesCall(limit, page, order, startDate, endDate, _callback);

    }

    /**
     * List Validation Rules
     * Retrieve validation rules.
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param order This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param startDate Timestamp representing the date and time which results must start on. Represented in ISO 8601 format. (optional)
     * @param endDate Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)
     * @return ValidationRulesListResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ValidationRulesListResponseBody listValidationRules(Integer limit, Integer page, ParameterOrderListValidationRules order, OffsetDateTime startDate, OffsetDateTime endDate) throws ApiException {
        ApiResponse<ValidationRulesListResponseBody> localVarResp = listValidationRulesWithHttpInfo(limit, page, order, startDate, endDate);
        return localVarResp.getData();
    }

    /**
     * List Validation Rules
     * Retrieve validation rules.
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param order This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param startDate Timestamp representing the date and time which results must start on. Represented in ISO 8601 format. (optional)
     * @param endDate Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)
     * @return ApiResponse&lt;ValidationRulesListResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ValidationRulesListResponseBody> listValidationRulesWithHttpInfo(Integer limit, Integer page, ParameterOrderListValidationRules order, OffsetDateTime startDate, OffsetDateTime endDate) throws ApiException {
        okhttp3.Call localVarCall = listValidationRulesValidateBeforeCall(limit, page, order, startDate, endDate, null);
        Type localVarReturnType = new TypeToken<ValidationRulesListResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Validation Rules (asynchronously)
     * Retrieve validation rules.
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param order This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param startDate Timestamp representing the date and time which results must start on. Represented in ISO 8601 format. (optional)
     * @param endDate Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call listValidationRulesAsync(Integer limit, Integer page, ParameterOrderListValidationRules order, OffsetDateTime startDate, OffsetDateTime endDate, final ApiCallback<ValidationRulesListResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidationRulesValidateBeforeCall(limit, page, order, startDate, endDate, _callback);
        Type localVarReturnType = new TypeToken<ValidationRulesListResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listValidationRulesAssignments
     * @param relatedObjectId The resource ID to which the validation rule was assigned; this could be, for example, a resource ID of a voucher, campaign, earning rule, reward assignment, promotion tier, or distribution. (optional)
     * @param rule Validation rule ID. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param order Sorts the results using one of the filtering options: -created_at, created_at, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call listValidationRulesAssignmentsCall(String relatedObjectId, String rule, Integer page, Integer limit, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/validation-rules-assignments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (relatedObjectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("related_object_id", relatedObjectId));
        }

        if (rule != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rule", rule));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidationRulesAssignmentsValidateBeforeCall(String relatedObjectId, String rule, Integer page, Integer limit, String order, final ApiCallback _callback) throws ApiException {
        return listValidationRulesAssignmentsCall(relatedObjectId, rule, page, limit, order, _callback);

    }

    /**
     * List Validation Rules&#39; Assignment(s)
     * List all validation rules assignments or filter the results using the related object ID or the validation rule ID query parameters.  # How to retrieve specific validation rule assignments(s) ## Related object ID To find an assignment for a particular resource, you can use the ID of the object to which the validation rule was assigned. This could be, for example, an ID of a: voucher, campaign, distribution, reward assignment, earning rule, promotion tier.    ## Validation rule ID You can use the validation rule ID to find assignment(s) for a specific validation rule.  
     * @param relatedObjectId The resource ID to which the validation rule was assigned; this could be, for example, a resource ID of a voucher, campaign, earning rule, reward assignment, promotion tier, or distribution. (optional)
     * @param rule Validation rule ID. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param order Sorts the results using one of the filtering options: -created_at, created_at, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @return ValidationRulesAssignmentsListResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ValidationRulesAssignmentsListResponseBody listValidationRulesAssignments(String relatedObjectId, String rule, Integer page, Integer limit, String order) throws ApiException {
        ApiResponse<ValidationRulesAssignmentsListResponseBody> localVarResp = listValidationRulesAssignmentsWithHttpInfo(relatedObjectId, rule, page, limit, order);
        return localVarResp.getData();
    }

    /**
     * List Validation Rules&#39; Assignment(s)
     * List all validation rules assignments or filter the results using the related object ID or the validation rule ID query parameters.  # How to retrieve specific validation rule assignments(s) ## Related object ID To find an assignment for a particular resource, you can use the ID of the object to which the validation rule was assigned. This could be, for example, an ID of a: voucher, campaign, distribution, reward assignment, earning rule, promotion tier.    ## Validation rule ID You can use the validation rule ID to find assignment(s) for a specific validation rule.  
     * @param relatedObjectId The resource ID to which the validation rule was assigned; this could be, for example, a resource ID of a voucher, campaign, earning rule, reward assignment, promotion tier, or distribution. (optional)
     * @param rule Validation rule ID. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param order Sorts the results using one of the filtering options: -created_at, created_at, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @return ApiResponse&lt;ValidationRulesAssignmentsListResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ValidationRulesAssignmentsListResponseBody> listValidationRulesAssignmentsWithHttpInfo(String relatedObjectId, String rule, Integer page, Integer limit, String order) throws ApiException {
        okhttp3.Call localVarCall = listValidationRulesAssignmentsValidateBeforeCall(relatedObjectId, rule, page, limit, order, null);
        Type localVarReturnType = new TypeToken<ValidationRulesAssignmentsListResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Validation Rules&#39; Assignment(s) (asynchronously)
     * List all validation rules assignments or filter the results using the related object ID or the validation rule ID query parameters.  # How to retrieve specific validation rule assignments(s) ## Related object ID To find an assignment for a particular resource, you can use the ID of the object to which the validation rule was assigned. This could be, for example, an ID of a: voucher, campaign, distribution, reward assignment, earning rule, promotion tier.    ## Validation rule ID You can use the validation rule ID to find assignment(s) for a specific validation rule.  
     * @param relatedObjectId The resource ID to which the validation rule was assigned; this could be, for example, a resource ID of a voucher, campaign, earning rule, reward assignment, promotion tier, or distribution. (optional)
     * @param rule Validation rule ID. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param order Sorts the results using one of the filtering options: -created_at, created_at, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call listValidationRulesAssignmentsAsync(String relatedObjectId, String rule, Integer page, Integer limit, String order, final ApiCallback<ValidationRulesAssignmentsListResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidationRulesAssignmentsValidateBeforeCall(relatedObjectId, rule, page, limit, order, _callback);
        Type localVarReturnType = new TypeToken<ValidationRulesAssignmentsListResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateValidationRule
     * @param validationRuleId A unique validation rule ID. (required)
     * @param validationRulesUpdateRequestBody Specify the parameters to be updated. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call updateValidationRuleCall(String validationRuleId, ValidationRulesUpdateRequestBody validationRulesUpdateRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = validationRulesUpdateRequestBody;

        // create path and map variables
        String localVarPath = "/v1/validation-rules/{validationRuleId}"
            .replace("{" + "validationRuleId" + "}", localVarApiClient.escapeString(validationRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateValidationRuleValidateBeforeCall(String validationRuleId, ValidationRulesUpdateRequestBody validationRulesUpdateRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'validationRuleId' is set
        if (validationRuleId == null) {
            throw new ApiException("Missing the required parameter 'validationRuleId' when calling updateValidationRule(Async)");
        }

        return updateValidationRuleCall(validationRuleId, validationRulesUpdateRequestBody, _callback);

    }

    /**
     * Update Validation Rule
     * Update validation rule parameters.
     * @param validationRuleId A unique validation rule ID. (required)
     * @param validationRulesUpdateRequestBody Specify the parameters to be updated. (optional)
     * @return ValidationRulesUpdateResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ValidationRulesUpdateResponseBody updateValidationRule(String validationRuleId, ValidationRulesUpdateRequestBody validationRulesUpdateRequestBody) throws ApiException {
        ApiResponse<ValidationRulesUpdateResponseBody> localVarResp = updateValidationRuleWithHttpInfo(validationRuleId, validationRulesUpdateRequestBody);
        return localVarResp.getData();
    }

    /**
     * Update Validation Rule
     * Update validation rule parameters.
     * @param validationRuleId A unique validation rule ID. (required)
     * @param validationRulesUpdateRequestBody Specify the parameters to be updated. (optional)
     * @return ApiResponse&lt;ValidationRulesUpdateResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ValidationRulesUpdateResponseBody> updateValidationRuleWithHttpInfo(String validationRuleId, ValidationRulesUpdateRequestBody validationRulesUpdateRequestBody) throws ApiException {
        okhttp3.Call localVarCall = updateValidationRuleValidateBeforeCall(validationRuleId, validationRulesUpdateRequestBody, null);
        Type localVarReturnType = new TypeToken<ValidationRulesUpdateResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Validation Rule (asynchronously)
     * Update validation rule parameters.
     * @param validationRuleId A unique validation rule ID. (required)
     * @param validationRulesUpdateRequestBody Specify the parameters to be updated. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call updateValidationRuleAsync(String validationRuleId, ValidationRulesUpdateRequestBody validationRulesUpdateRequestBody, final ApiCallback<ValidationRulesUpdateResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateValidationRuleValidateBeforeCall(validationRuleId, validationRulesUpdateRequestBody, _callback);
        Type localVarReturnType = new TypeToken<ValidationRulesUpdateResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
