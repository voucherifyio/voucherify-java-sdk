/*
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.voucherify.client.api;

import io.voucherify.client.ApiCallback;
import io.voucherify.client.ApiClient;
import io.voucherify.client.ApiException;
import io.voucherify.client.ApiResponse;
import io.voucherify.client.Configuration;
import io.voucherify.client.Pair;
import io.voucherify.client.ProgressRequestBody;
import io.voucherify.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.voucherify.client.model.ClientEventsCreateRequestBody;
import io.voucherify.client.model.ClientEventsCreateResponseBody;
import io.voucherify.client.model.ClientQualificationsCheckEligibilityRequestBody;
import io.voucherify.client.model.ClientQualificationsCheckEligibilityResponseBody;
import io.voucherify.client.model.ClientRedemptionsRedeemRequestBody;
import io.voucherify.client.model.ClientRedemptionsRedeemResponseBody;
import io.voucherify.client.model.ClientValidationsValidateRequestBody;
import io.voucherify.client.model.ClientValidationsValidateResponseBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ClientSideApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ClientSideApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ClientSideApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for checkEligibilityClientSide
     * @param clientQualificationsCheckEligibilityRequestBody Define order and customer context. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call checkEligibilityClientSideCall(ClientQualificationsCheckEligibilityRequestBody clientQualificationsCheckEligibilityRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = clientQualificationsCheckEligibilityRequestBody;

        // create path and map variables
        String localVarPath = "/client/v1/qualifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Client-Application-Id", "X-Client-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkEligibilityClientSideValidateBeforeCall(ClientQualificationsCheckEligibilityRequestBody clientQualificationsCheckEligibilityRequestBody, final ApiCallback _callback) throws ApiException {
        return checkEligibilityClientSideCall(clientQualificationsCheckEligibilityRequestBody, _callback);

    }

    /**
     * Check Eligibility (client-side)
     * Generate a list of redeemables that are applicable in the context of the customer and order. The new qualifications method is an improved version of Campaign Qualifications, Voucher Qualifications, and Promotions Validation API requests. The new qualification method introduces the following improvements: - Qualification results are returned faster - No limit on the number of returned redeemables - Introduces new qualification scenarios, not available in the previous version  üëç Scenario Guide  Read our dedicated guide to learn about some use cases this endpoint can cover here. # Paging  The Voucherify Qualifications API request will return to you all of the redeemables available for the customer in batches of up to 50 redeemables. To get the next batch of redeemables, you need to use the starting_after cursor. To process of paging the redeemables works in the following manner: - You send the first API request for Qualifications without the starting_after parameter. - The response will contain a parameter named has_more. If the parameters value is set to true, then more redeemables are available. - Get the value of the created_at parameter of the last returned redeemable. The value of this parameter will be used as a cursor to retrieve the next page of redeemables. - Send another API request for Qualification with the starting_after parameter set to the value taken from the created_at parameter from the last returned redeemable. - Voucherify will return the next page of redeemables. - If the has_more parameter is set to true, apply steps 3-5 to get the next page of redeemables.
     * @param clientQualificationsCheckEligibilityRequestBody Define order and customer context. (optional)
     * @return ClientQualificationsCheckEligibilityResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClientQualificationsCheckEligibilityResponseBody checkEligibilityClientSide(ClientQualificationsCheckEligibilityRequestBody clientQualificationsCheckEligibilityRequestBody) throws ApiException {
        ApiResponse<ClientQualificationsCheckEligibilityResponseBody> localVarResp = checkEligibilityClientSideWithHttpInfo(clientQualificationsCheckEligibilityRequestBody);
        return localVarResp.getData();
    }

    /**
     * Check Eligibility (client-side)
     * Generate a list of redeemables that are applicable in the context of the customer and order. The new qualifications method is an improved version of Campaign Qualifications, Voucher Qualifications, and Promotions Validation API requests. The new qualification method introduces the following improvements: - Qualification results are returned faster - No limit on the number of returned redeemables - Introduces new qualification scenarios, not available in the previous version  üëç Scenario Guide  Read our dedicated guide to learn about some use cases this endpoint can cover here. # Paging  The Voucherify Qualifications API request will return to you all of the redeemables available for the customer in batches of up to 50 redeemables. To get the next batch of redeemables, you need to use the starting_after cursor. To process of paging the redeemables works in the following manner: - You send the first API request for Qualifications without the starting_after parameter. - The response will contain a parameter named has_more. If the parameters value is set to true, then more redeemables are available. - Get the value of the created_at parameter of the last returned redeemable. The value of this parameter will be used as a cursor to retrieve the next page of redeemables. - Send another API request for Qualification with the starting_after parameter set to the value taken from the created_at parameter from the last returned redeemable. - Voucherify will return the next page of redeemables. - If the has_more parameter is set to true, apply steps 3-5 to get the next page of redeemables.
     * @param clientQualificationsCheckEligibilityRequestBody Define order and customer context. (optional)
     * @return ApiResponse&lt;ClientQualificationsCheckEligibilityResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClientQualificationsCheckEligibilityResponseBody> checkEligibilityClientSideWithHttpInfo(ClientQualificationsCheckEligibilityRequestBody clientQualificationsCheckEligibilityRequestBody) throws ApiException {
        okhttp3.Call localVarCall = checkEligibilityClientSideValidateBeforeCall(clientQualificationsCheckEligibilityRequestBody, null);
        Type localVarReturnType = new TypeToken<ClientQualificationsCheckEligibilityResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check Eligibility (client-side) (asynchronously)
     * Generate a list of redeemables that are applicable in the context of the customer and order. The new qualifications method is an improved version of Campaign Qualifications, Voucher Qualifications, and Promotions Validation API requests. The new qualification method introduces the following improvements: - Qualification results are returned faster - No limit on the number of returned redeemables - Introduces new qualification scenarios, not available in the previous version  üëç Scenario Guide  Read our dedicated guide to learn about some use cases this endpoint can cover here. # Paging  The Voucherify Qualifications API request will return to you all of the redeemables available for the customer in batches of up to 50 redeemables. To get the next batch of redeemables, you need to use the starting_after cursor. To process of paging the redeemables works in the following manner: - You send the first API request for Qualifications without the starting_after parameter. - The response will contain a parameter named has_more. If the parameters value is set to true, then more redeemables are available. - Get the value of the created_at parameter of the last returned redeemable. The value of this parameter will be used as a cursor to retrieve the next page of redeemables. - Send another API request for Qualification with the starting_after parameter set to the value taken from the created_at parameter from the last returned redeemable. - Voucherify will return the next page of redeemables. - If the has_more parameter is set to true, apply steps 3-5 to get the next page of redeemables.
     * @param clientQualificationsCheckEligibilityRequestBody Define order and customer context. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call checkEligibilityClientSideAsync(ClientQualificationsCheckEligibilityRequestBody clientQualificationsCheckEligibilityRequestBody, final ApiCallback<ClientQualificationsCheckEligibilityResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkEligibilityClientSideValidateBeforeCall(clientQualificationsCheckEligibilityRequestBody, _callback);
        Type localVarReturnType = new TypeToken<ClientQualificationsCheckEligibilityResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for redeemStackedDiscountsClientSide
     * @param origin Indicates the origin (scheme, hostname, and port). (required)
     * @param clientRedemptionsRedeemRequestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call redeemStackedDiscountsClientSideCall(String origin, ClientRedemptionsRedeemRequestBody clientRedemptionsRedeemRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = clientRedemptionsRedeemRequestBody;

        // create path and map variables
        String localVarPath = "/client/v1/redemptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (origin != null) {
            localVarHeaderParams.put("origin", localVarApiClient.parameterToString(origin));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Client-Application-Id", "X-Client-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call redeemStackedDiscountsClientSideValidateBeforeCall(String origin, ClientRedemptionsRedeemRequestBody clientRedemptionsRedeemRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'origin' is set
        if (origin == null) {
            throw new ApiException("Missing the required parameter 'origin' when calling redeemStackedDiscountsClientSide(Async)");
        }

        return redeemStackedDiscountsClientSideCall(origin, clientRedemptionsRedeemRequestBody, _callback);

    }

    /**
     * Redeem Stackable Discounts (client-side)
     * This method is accessible through public keys which you can use in client side requests coming from mobile and web browser applications. # How API returns calculated discounts and order amounts in the response In the table below, you can see the logic the API follows to calculate discounts and amounts:    üìò Rollbacks  You cant roll back a child redemption. When you call rollback on a stacked redemption, all child redemptions will be rolled back. You need to refer to a parent redemption ID in your rollback request.
     * @param origin Indicates the origin (scheme, hostname, and port). (required)
     * @param clientRedemptionsRedeemRequestBody  (optional)
     * @return ClientRedemptionsRedeemResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClientRedemptionsRedeemResponseBody redeemStackedDiscountsClientSide(String origin, ClientRedemptionsRedeemRequestBody clientRedemptionsRedeemRequestBody) throws ApiException {
        ApiResponse<ClientRedemptionsRedeemResponseBody> localVarResp = redeemStackedDiscountsClientSideWithHttpInfo(origin, clientRedemptionsRedeemRequestBody);
        return localVarResp.getData();
    }

    /**
     * Redeem Stackable Discounts (client-side)
     * This method is accessible through public keys which you can use in client side requests coming from mobile and web browser applications. # How API returns calculated discounts and order amounts in the response In the table below, you can see the logic the API follows to calculate discounts and amounts:    üìò Rollbacks  You cant roll back a child redemption. When you call rollback on a stacked redemption, all child redemptions will be rolled back. You need to refer to a parent redemption ID in your rollback request.
     * @param origin Indicates the origin (scheme, hostname, and port). (required)
     * @param clientRedemptionsRedeemRequestBody  (optional)
     * @return ApiResponse&lt;ClientRedemptionsRedeemResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClientRedemptionsRedeemResponseBody> redeemStackedDiscountsClientSideWithHttpInfo(String origin, ClientRedemptionsRedeemRequestBody clientRedemptionsRedeemRequestBody) throws ApiException {
        okhttp3.Call localVarCall = redeemStackedDiscountsClientSideValidateBeforeCall(origin, clientRedemptionsRedeemRequestBody, null);
        Type localVarReturnType = new TypeToken<ClientRedemptionsRedeemResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Redeem Stackable Discounts (client-side) (asynchronously)
     * This method is accessible through public keys which you can use in client side requests coming from mobile and web browser applications. # How API returns calculated discounts and order amounts in the response In the table below, you can see the logic the API follows to calculate discounts and amounts:    üìò Rollbacks  You cant roll back a child redemption. When you call rollback on a stacked redemption, all child redemptions will be rolled back. You need to refer to a parent redemption ID in your rollback request.
     * @param origin Indicates the origin (scheme, hostname, and port). (required)
     * @param clientRedemptionsRedeemRequestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call redeemStackedDiscountsClientSideAsync(String origin, ClientRedemptionsRedeemRequestBody clientRedemptionsRedeemRequestBody, final ApiCallback<ClientRedemptionsRedeemResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = redeemStackedDiscountsClientSideValidateBeforeCall(origin, clientRedemptionsRedeemRequestBody, _callback);
        Type localVarReturnType = new TypeToken<ClientRedemptionsRedeemResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for trackCustomEventClientSide
     * @param origin Indicates the origin (scheme, hostname, and port). (required)
     * @param clientEventsCreateRequestBody Specify the details of the custom event. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call trackCustomEventClientSideCall(String origin, ClientEventsCreateRequestBody clientEventsCreateRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = clientEventsCreateRequestBody;

        // create path and map variables
        String localVarPath = "/client/v1/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (origin != null) {
            localVarHeaderParams.put("origin", localVarApiClient.parameterToString(origin));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Client-Application-Id", "X-Client-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call trackCustomEventClientSideValidateBeforeCall(String origin, ClientEventsCreateRequestBody clientEventsCreateRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'origin' is set
        if (origin == null) {
            throw new ApiException("Missing the required parameter 'origin' when calling trackCustomEventClientSide(Async)");
        }

        return trackCustomEventClientSideCall(origin, clientEventsCreateRequestBody, _callback);

    }

    /**
     * Track Custom Event (client-side)
     * To track a custom event, you create an event object.   The event object must be linked to the customer who performs the action. If a customer doesnt exist in Voucherify, the customer will be created.
     * @param origin Indicates the origin (scheme, hostname, and port). (required)
     * @param clientEventsCreateRequestBody Specify the details of the custom event. (optional)
     * @return ClientEventsCreateResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClientEventsCreateResponseBody trackCustomEventClientSide(String origin, ClientEventsCreateRequestBody clientEventsCreateRequestBody) throws ApiException {
        ApiResponse<ClientEventsCreateResponseBody> localVarResp = trackCustomEventClientSideWithHttpInfo(origin, clientEventsCreateRequestBody);
        return localVarResp.getData();
    }

    /**
     * Track Custom Event (client-side)
     * To track a custom event, you create an event object.   The event object must be linked to the customer who performs the action. If a customer doesnt exist in Voucherify, the customer will be created.
     * @param origin Indicates the origin (scheme, hostname, and port). (required)
     * @param clientEventsCreateRequestBody Specify the details of the custom event. (optional)
     * @return ApiResponse&lt;ClientEventsCreateResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClientEventsCreateResponseBody> trackCustomEventClientSideWithHttpInfo(String origin, ClientEventsCreateRequestBody clientEventsCreateRequestBody) throws ApiException {
        okhttp3.Call localVarCall = trackCustomEventClientSideValidateBeforeCall(origin, clientEventsCreateRequestBody, null);
        Type localVarReturnType = new TypeToken<ClientEventsCreateResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Track Custom Event (client-side) (asynchronously)
     * To track a custom event, you create an event object.   The event object must be linked to the customer who performs the action. If a customer doesnt exist in Voucherify, the customer will be created.
     * @param origin Indicates the origin (scheme, hostname, and port). (required)
     * @param clientEventsCreateRequestBody Specify the details of the custom event. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call trackCustomEventClientSideAsync(String origin, ClientEventsCreateRequestBody clientEventsCreateRequestBody, final ApiCallback<ClientEventsCreateResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = trackCustomEventClientSideValidateBeforeCall(origin, clientEventsCreateRequestBody, _callback);
        Type localVarReturnType = new TypeToken<ClientEventsCreateResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCustomersConsentsClientSide
     * @param customerId A Voucherify customer identifier or source_id (required)
     * @param body Key-value pairs where the key is the consent identifier and value is a boolean that identifies if a customer has given the consent or not. To deny all consents use unsubscribed as a consent identifier and true as its value.   ## Examples  Opt-out from all communication:  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call updateCustomersConsentsClientSideCall(String customerId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/client/v1/customers/{customerId}/consents"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Client-Application-Id", "X-Client-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCustomersConsentsClientSideValidateBeforeCall(String customerId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling updateCustomersConsentsClientSide(Async)");
        }

        return updateCustomersConsentsClientSideCall(customerId, body, _callback);

    }

    /**
     * Update Customer&#39;s consents (client-side)
     * Update marketing permissions for the specified customer.
     * @param customerId A Voucherify customer identifier or source_id (required)
     * @param body Key-value pairs where the key is the consent identifier and value is a boolean that identifies if a customer has given the consent or not. To deny all consents use unsubscribed as a consent identifier and true as its value.   ## Examples  Opt-out from all communication:  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateCustomersConsentsClientSide(String customerId, Object body) throws ApiException {
        updateCustomersConsentsClientSideWithHttpInfo(customerId, body);
    }

    /**
     * Update Customer&#39;s consents (client-side)
     * Update marketing permissions for the specified customer.
     * @param customerId A Voucherify customer identifier or source_id (required)
     * @param body Key-value pairs where the key is the consent identifier and value is a boolean that identifies if a customer has given the consent or not. To deny all consents use unsubscribed as a consent identifier and true as its value.   ## Examples  Opt-out from all communication:  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateCustomersConsentsClientSideWithHttpInfo(String customerId, Object body) throws ApiException {
        okhttp3.Call localVarCall = updateCustomersConsentsClientSideValidateBeforeCall(customerId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Customer&#39;s consents (client-side) (asynchronously)
     * Update marketing permissions for the specified customer.
     * @param customerId A Voucherify customer identifier or source_id (required)
     * @param body Key-value pairs where the key is the consent identifier and value is a boolean that identifies if a customer has given the consent or not. To deny all consents use unsubscribed as a consent identifier and true as its value.   ## Examples  Opt-out from all communication:  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call updateCustomersConsentsClientSideAsync(String customerId, Object body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCustomersConsentsClientSideValidateBeforeCall(customerId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for validateStackedDiscountsClientSide
     * @param origin Indicates the origin (scheme, hostname, and port). (required)
     * @param clientValidationsValidateRequestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call validateStackedDiscountsClientSideCall(String origin, ClientValidationsValidateRequestBody clientValidationsValidateRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = clientValidationsValidateRequestBody;

        // create path and map variables
        String localVarPath = "/client/v1/validations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (origin != null) {
            localVarHeaderParams.put("origin", localVarApiClient.parameterToString(origin));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Client-Application-Id", "X-Client-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateStackedDiscountsClientSideValidateBeforeCall(String origin, ClientValidationsValidateRequestBody clientValidationsValidateRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'origin' is set
        if (origin == null) {
            throw new ApiException("Missing the required parameter 'origin' when calling validateStackedDiscountsClientSide(Async)");
        }

        return validateStackedDiscountsClientSideCall(origin, clientValidationsValidateRequestBody, _callback);

    }

    /**
     * Validate Stackable Discounts (client-side)
     * Verify redeemables provided in the request. This method is accessible through public keys which you can use in client side requests coming from mobile and web browser applications.
     * @param origin Indicates the origin (scheme, hostname, and port). (required)
     * @param clientValidationsValidateRequestBody  (optional)
     * @return ClientValidationsValidateResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClientValidationsValidateResponseBody validateStackedDiscountsClientSide(String origin, ClientValidationsValidateRequestBody clientValidationsValidateRequestBody) throws ApiException {
        ApiResponse<ClientValidationsValidateResponseBody> localVarResp = validateStackedDiscountsClientSideWithHttpInfo(origin, clientValidationsValidateRequestBody);
        return localVarResp.getData();
    }

    /**
     * Validate Stackable Discounts (client-side)
     * Verify redeemables provided in the request. This method is accessible through public keys which you can use in client side requests coming from mobile and web browser applications.
     * @param origin Indicates the origin (scheme, hostname, and port). (required)
     * @param clientValidationsValidateRequestBody  (optional)
     * @return ApiResponse&lt;ClientValidationsValidateResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClientValidationsValidateResponseBody> validateStackedDiscountsClientSideWithHttpInfo(String origin, ClientValidationsValidateRequestBody clientValidationsValidateRequestBody) throws ApiException {
        okhttp3.Call localVarCall = validateStackedDiscountsClientSideValidateBeforeCall(origin, clientValidationsValidateRequestBody, null);
        Type localVarReturnType = new TypeToken<ClientValidationsValidateResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Validate Stackable Discounts (client-side) (asynchronously)
     * Verify redeemables provided in the request. This method is accessible through public keys which you can use in client side requests coming from mobile and web browser applications.
     * @param origin Indicates the origin (scheme, hostname, and port). (required)
     * @param clientValidationsValidateRequestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call validateStackedDiscountsClientSideAsync(String origin, ClientValidationsValidateRequestBody clientValidationsValidateRequestBody, final ApiCallback<ClientValidationsValidateResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateStackedDiscountsClientSideValidateBeforeCall(origin, clientValidationsValidateRequestBody, _callback);
        Type localVarReturnType = new TypeToken<ClientValidationsValidateResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
