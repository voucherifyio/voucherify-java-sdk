/*
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.voucherify.client.api;

import io.voucherify.client.ApiCallback;
import io.voucherify.client.ApiClient;
import io.voucherify.client.ApiException;
import io.voucherify.client.ApiResponse;
import io.voucherify.client.Configuration;
import io.voucherify.client.Pair;
import io.voucherify.client.ProgressRequestBody;
import io.voucherify.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.voucherify.client.model.CategoriesCreateRequestBody;
import io.voucherify.client.model.CategoriesCreateResponseBody;
import io.voucherify.client.model.CategoriesGetResponseBody;
import io.voucherify.client.model.CategoriesListResponseBody;
import io.voucherify.client.model.CategoriesUpdateRequestBody;
import io.voucherify.client.model.CategoriesUpdateResponseBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CategoriesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CategoriesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CategoriesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createCategory
     * @param categoriesCreateRequestBody Specify the details of the category that you would like to create. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call createCategoryCall(CategoriesCreateRequestBody categoriesCreateRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = categoriesCreateRequestBody;

        // create path and map variables
        String localVarPath = "/v1/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCategoryValidateBeforeCall(CategoriesCreateRequestBody categoriesCreateRequestBody, final ApiCallback _callback) throws ApiException {
        return createCategoryCall(categoriesCreateRequestBody, _callback);

    }

    /**
     * Create Category
     * Create category with a specific name and hierarchy.
     * @param categoriesCreateRequestBody Specify the details of the category that you would like to create. (optional)
     * @return CategoriesCreateResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CategoriesCreateResponseBody createCategory(CategoriesCreateRequestBody categoriesCreateRequestBody) throws ApiException {
        ApiResponse<CategoriesCreateResponseBody> localVarResp = createCategoryWithHttpInfo(categoriesCreateRequestBody);
        return localVarResp.getData();
    }

    /**
     * Create Category
     * Create category with a specific name and hierarchy.
     * @param categoriesCreateRequestBody Specify the details of the category that you would like to create. (optional)
     * @return ApiResponse&lt;CategoriesCreateResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CategoriesCreateResponseBody> createCategoryWithHttpInfo(CategoriesCreateRequestBody categoriesCreateRequestBody) throws ApiException {
        okhttp3.Call localVarCall = createCategoryValidateBeforeCall(categoriesCreateRequestBody, null);
        Type localVarReturnType = new TypeToken<CategoriesCreateResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Category (asynchronously)
     * Create category with a specific name and hierarchy.
     * @param categoriesCreateRequestBody Specify the details of the category that you would like to create. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call createCategoryAsync(CategoriesCreateRequestBody categoriesCreateRequestBody, final ApiCallback<CategoriesCreateResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCategoryValidateBeforeCall(categoriesCreateRequestBody, _callback);
        Type localVarReturnType = new TypeToken<CategoriesCreateResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCategory
     * @param categoryId Unique category ID assigned by Voucherify. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call deleteCategoryCall(String categoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/categories/{categoryId}"
            .replace("{" + "categoryId" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCategoryValidateBeforeCall(String categoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling deleteCategory(Async)");
        }

        return deleteCategoryCall(categoryId, _callback);

    }

    /**
     * Delete Category
     * Delete a category by the category ID.
     * @param categoryId Unique category ID assigned by Voucherify. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteCategory(String categoryId) throws ApiException {
        deleteCategoryWithHttpInfo(categoryId);
    }

    /**
     * Delete Category
     * Delete a category by the category ID.
     * @param categoryId Unique category ID assigned by Voucherify. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteCategoryWithHttpInfo(String categoryId) throws ApiException {
        okhttp3.Call localVarCall = deleteCategoryValidateBeforeCall(categoryId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Category (asynchronously)
     * Delete a category by the category ID.
     * @param categoryId Unique category ID assigned by Voucherify. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call deleteCategoryAsync(String categoryId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCategoryValidateBeforeCall(categoryId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCategory
     * @param categoryId Unique category ID assigned by Voucherify. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getCategoryCall(String categoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/categories/{categoryId}"
            .replace("{" + "categoryId" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCategoryValidateBeforeCall(String categoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling getCategory(Async)");
        }

        return getCategoryCall(categoryId, _callback);

    }

    /**
     * Get Category
     * Retrieve a category by the category ID.
     * @param categoryId Unique category ID assigned by Voucherify. (required)
     * @return CategoriesGetResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CategoriesGetResponseBody getCategory(String categoryId) throws ApiException {
        ApiResponse<CategoriesGetResponseBody> localVarResp = getCategoryWithHttpInfo(categoryId);
        return localVarResp.getData();
    }

    /**
     * Get Category
     * Retrieve a category by the category ID.
     * @param categoryId Unique category ID assigned by Voucherify. (required)
     * @return ApiResponse&lt;CategoriesGetResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CategoriesGetResponseBody> getCategoryWithHttpInfo(String categoryId) throws ApiException {
        okhttp3.Call localVarCall = getCategoryValidateBeforeCall(categoryId, null);
        Type localVarReturnType = new TypeToken<CategoriesGetResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Category (asynchronously)
     * Retrieve a category by the category ID.
     * @param categoryId Unique category ID assigned by Voucherify. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getCategoryAsync(String categoryId, final ApiCallback<CategoriesGetResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCategoryValidateBeforeCall(categoryId, _callback);
        Type localVarReturnType = new TypeToken<CategoriesGetResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCategories
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call listCategoriesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCategoriesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listCategoriesCall(_callback);

    }

    /**
     * List Categories
     * List all categories.
     * @return CategoriesListResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CategoriesListResponseBody listCategories() throws ApiException {
        ApiResponse<CategoriesListResponseBody> localVarResp = listCategoriesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List Categories
     * List all categories.
     * @return ApiResponse&lt;CategoriesListResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CategoriesListResponseBody> listCategoriesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listCategoriesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CategoriesListResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Categories (asynchronously)
     * List all categories.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call listCategoriesAsync(final ApiCallback<CategoriesListResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCategoriesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CategoriesListResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCategory
     * @param categoryId Unique category ID assigned by Voucherify. (required)
     * @param categoriesUpdateRequestBody Specify the details of the category that you would like to update. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call updateCategoryCall(String categoryId, CategoriesUpdateRequestBody categoriesUpdateRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = categoriesUpdateRequestBody;

        // create path and map variables
        String localVarPath = "/v1/categories/{categoryId}"
            .replace("{" + "categoryId" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCategoryValidateBeforeCall(String categoryId, CategoriesUpdateRequestBody categoriesUpdateRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling updateCategory(Async)");
        }

        return updateCategoryCall(categoryId, categoriesUpdateRequestBody, _callback);

    }

    /**
     * Update Category
     * Update category using the category ID.
     * @param categoryId Unique category ID assigned by Voucherify. (required)
     * @param categoriesUpdateRequestBody Specify the details of the category that you would like to update. (optional)
     * @return CategoriesUpdateResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CategoriesUpdateResponseBody updateCategory(String categoryId, CategoriesUpdateRequestBody categoriesUpdateRequestBody) throws ApiException {
        ApiResponse<CategoriesUpdateResponseBody> localVarResp = updateCategoryWithHttpInfo(categoryId, categoriesUpdateRequestBody);
        return localVarResp.getData();
    }

    /**
     * Update Category
     * Update category using the category ID.
     * @param categoryId Unique category ID assigned by Voucherify. (required)
     * @param categoriesUpdateRequestBody Specify the details of the category that you would like to update. (optional)
     * @return ApiResponse&lt;CategoriesUpdateResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CategoriesUpdateResponseBody> updateCategoryWithHttpInfo(String categoryId, CategoriesUpdateRequestBody categoriesUpdateRequestBody) throws ApiException {
        okhttp3.Call localVarCall = updateCategoryValidateBeforeCall(categoryId, categoriesUpdateRequestBody, null);
        Type localVarReturnType = new TypeToken<CategoriesUpdateResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Category (asynchronously)
     * Update category using the category ID.
     * @param categoryId Unique category ID assigned by Voucherify. (required)
     * @param categoriesUpdateRequestBody Specify the details of the category that you would like to update. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call updateCategoryAsync(String categoryId, CategoriesUpdateRequestBody categoriesUpdateRequestBody, final ApiCallback<CategoriesUpdateResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCategoryValidateBeforeCall(categoryId, categoriesUpdateRequestBody, _callback);
        Type localVarReturnType = new TypeToken<CategoriesUpdateResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
