/*
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.voucherify.client.api;

import io.voucherify.client.ApiCallback;
import io.voucherify.client.ApiClient;
import io.voucherify.client.ApiException;
import io.voucherify.client.ApiResponse;
import io.voucherify.client.Configuration;
import io.voucherify.client.Pair;
import io.voucherify.client.ProgressRequestBody;
import io.voucherify.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.voucherify.client.model.ParameterCreatedBeforeAfter;
import io.voucherify.client.model.ParameterOrderListAllPromotionStacks;
import io.voucherify.client.model.ParameterUpdatedBeforeAfter;
import io.voucherify.client.model.PromotionsStacksCreateRequestBody;
import io.voucherify.client.model.PromotionsStacksCreateResponseBody;
import io.voucherify.client.model.PromotionsStacksGetResponseBody;
import io.voucherify.client.model.PromotionsStacksListResponseBody;
import io.voucherify.client.model.PromotionsStacksUpdateRequestBody;
import io.voucherify.client.model.PromotionsStacksUpdateResponseBody;
import io.voucherify.client.model.PromotionsTiersDisableResponseBody;
import io.voucherify.client.model.PromotionsTiersEnableResponseBody;
import io.voucherify.client.model.PromotionsTiersGetResponseBody;
import io.voucherify.client.model.PromotionsTiersListResponseBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PromotionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PromotionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PromotionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createPromotionStack
     * @param campaignId Unique campaign ID. (required)
     * @param promotionsStacksCreateRequestBody Specify the order of promotion tiers for the promotion stack. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call createPromotionStackCall(String campaignId, PromotionsStacksCreateRequestBody promotionsStacksCreateRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = promotionsStacksCreateRequestBody;

        // create path and map variables
        String localVarPath = "/v1/promotions/{campaignId}/stacks"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPromotionStackValidateBeforeCall(String campaignId, PromotionsStacksCreateRequestBody promotionsStacksCreateRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling createPromotionStack(Async)");
        }

        return createPromotionStackCall(campaignId, promotionsStacksCreateRequestBody, _callback);

    }

    /**
     * Create Promotion Stack
     * This method creates one promotion stack. The sequence of promotion tier IDs will determine the promotion stacking order.
     * @param campaignId Unique campaign ID. (required)
     * @param promotionsStacksCreateRequestBody Specify the order of promotion tiers for the promotion stack. (optional)
     * @return PromotionsStacksCreateResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PromotionsStacksCreateResponseBody createPromotionStack(String campaignId, PromotionsStacksCreateRequestBody promotionsStacksCreateRequestBody) throws ApiException {
        ApiResponse<PromotionsStacksCreateResponseBody> localVarResp = createPromotionStackWithHttpInfo(campaignId, promotionsStacksCreateRequestBody);
        return localVarResp.getData();
    }

    /**
     * Create Promotion Stack
     * This method creates one promotion stack. The sequence of promotion tier IDs will determine the promotion stacking order.
     * @param campaignId Unique campaign ID. (required)
     * @param promotionsStacksCreateRequestBody Specify the order of promotion tiers for the promotion stack. (optional)
     * @return ApiResponse&lt;PromotionsStacksCreateResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PromotionsStacksCreateResponseBody> createPromotionStackWithHttpInfo(String campaignId, PromotionsStacksCreateRequestBody promotionsStacksCreateRequestBody) throws ApiException {
        okhttp3.Call localVarCall = createPromotionStackValidateBeforeCall(campaignId, promotionsStacksCreateRequestBody, null);
        Type localVarReturnType = new TypeToken<PromotionsStacksCreateResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Promotion Stack (asynchronously)
     * This method creates one promotion stack. The sequence of promotion tier IDs will determine the promotion stacking order.
     * @param campaignId Unique campaign ID. (required)
     * @param promotionsStacksCreateRequestBody Specify the order of promotion tiers for the promotion stack. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call createPromotionStackAsync(String campaignId, PromotionsStacksCreateRequestBody promotionsStacksCreateRequestBody, final ApiCallback<PromotionsStacksCreateResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPromotionStackValidateBeforeCall(campaignId, promotionsStacksCreateRequestBody, _callback);
        Type localVarReturnType = new TypeToken<PromotionsStacksCreateResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePromotionStack
     * @param campaignId ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign.  (required)
     * @param stackId Promotion stack ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call deletePromotionStackCall(String campaignId, String stackId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/promotions/{campaignId}/stacks/{stackId}"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "stackId" + "}", localVarApiClient.escapeString(stackId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePromotionStackValidateBeforeCall(String campaignId, String stackId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling deletePromotionStack(Async)");
        }

        // verify the required parameter 'stackId' is set
        if (stackId == null) {
            throw new ApiException("Missing the required parameter 'stackId' when calling deletePromotionStack(Async)");
        }

        return deletePromotionStackCall(campaignId, stackId, _callback);

    }

    /**
     * Delete Promotion Stack
     * This method deletes a promotion stack.
     * @param campaignId ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign.  (required)
     * @param stackId Promotion stack ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletePromotionStack(String campaignId, String stackId) throws ApiException {
        deletePromotionStackWithHttpInfo(campaignId, stackId);
    }

    /**
     * Delete Promotion Stack
     * This method deletes a promotion stack.
     * @param campaignId ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign.  (required)
     * @param stackId Promotion stack ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletePromotionStackWithHttpInfo(String campaignId, String stackId) throws ApiException {
        okhttp3.Call localVarCall = deletePromotionStackValidateBeforeCall(campaignId, stackId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Promotion Stack (asynchronously)
     * This method deletes a promotion stack.
     * @param campaignId ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign.  (required)
     * @param stackId Promotion stack ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call deletePromotionStackAsync(String campaignId, String stackId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePromotionStackValidateBeforeCall(campaignId, stackId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePromotionTier
     * @param promotionTierId Unique promotion tier ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call deletePromotionTierCall(String promotionTierId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/promotions/tiers/{promotionTierId}"
            .replace("{" + "promotionTierId" + "}", localVarApiClient.escapeString(promotionTierId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePromotionTierValidateBeforeCall(String promotionTierId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'promotionTierId' is set
        if (promotionTierId == null) {
            throw new ApiException("Missing the required parameter 'promotionTierId' when calling deletePromotionTier(Async)");
        }

        return deletePromotionTierCall(promotionTierId, _callback);

    }

    /**
     * Delete Promotion Tier
     * This method deletes a promotion tier.
     * @param promotionTierId Unique promotion tier ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletePromotionTier(String promotionTierId) throws ApiException {
        deletePromotionTierWithHttpInfo(promotionTierId);
    }

    /**
     * Delete Promotion Tier
     * This method deletes a promotion tier.
     * @param promotionTierId Unique promotion tier ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletePromotionTierWithHttpInfo(String promotionTierId) throws ApiException {
        okhttp3.Call localVarCall = deletePromotionTierValidateBeforeCall(promotionTierId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Promotion Tier (asynchronously)
     * This method deletes a promotion tier.
     * @param promotionTierId Unique promotion tier ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call deletePromotionTierAsync(String promotionTierId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePromotionTierValidateBeforeCall(promotionTierId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for disablePromotionTier
     * @param promotionTierId Unique promotion tier ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call disablePromotionTierCall(String promotionTierId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/promotions/tiers/{promotionTierId}/disable"
            .replace("{" + "promotionTierId" + "}", localVarApiClient.escapeString(promotionTierId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disablePromotionTierValidateBeforeCall(String promotionTierId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'promotionTierId' is set
        if (promotionTierId == null) {
            throw new ApiException("Missing the required parameter 'promotionTierId' when calling disablePromotionTier(Async)");
        }

        return disablePromotionTierCall(promotionTierId, _callback);

    }

    /**
     * Disable Promotion Tier
     * This method disables a promotion tier, i.e. makes the active parameter   false.
     * @param promotionTierId Unique promotion tier ID. (required)
     * @return PromotionsTiersDisableResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PromotionsTiersDisableResponseBody disablePromotionTier(String promotionTierId) throws ApiException {
        ApiResponse<PromotionsTiersDisableResponseBody> localVarResp = disablePromotionTierWithHttpInfo(promotionTierId);
        return localVarResp.getData();
    }

    /**
     * Disable Promotion Tier
     * This method disables a promotion tier, i.e. makes the active parameter   false.
     * @param promotionTierId Unique promotion tier ID. (required)
     * @return ApiResponse&lt;PromotionsTiersDisableResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PromotionsTiersDisableResponseBody> disablePromotionTierWithHttpInfo(String promotionTierId) throws ApiException {
        okhttp3.Call localVarCall = disablePromotionTierValidateBeforeCall(promotionTierId, null);
        Type localVarReturnType = new TypeToken<PromotionsTiersDisableResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Disable Promotion Tier (asynchronously)
     * This method disables a promotion tier, i.e. makes the active parameter   false.
     * @param promotionTierId Unique promotion tier ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call disablePromotionTierAsync(String promotionTierId, final ApiCallback<PromotionsTiersDisableResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = disablePromotionTierValidateBeforeCall(promotionTierId, _callback);
        Type localVarReturnType = new TypeToken<PromotionsTiersDisableResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enablePromotionTier
     * @param promotionTierId Unique promotion tier ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call enablePromotionTierCall(String promotionTierId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/promotions/tiers/{promotionTierId}/enable"
            .replace("{" + "promotionTierId" + "}", localVarApiClient.escapeString(promotionTierId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enablePromotionTierValidateBeforeCall(String promotionTierId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'promotionTierId' is set
        if (promotionTierId == null) {
            throw new ApiException("Missing the required parameter 'promotionTierId' when calling enablePromotionTier(Async)");
        }

        return enablePromotionTierCall(promotionTierId, _callback);

    }

    /**
     * Enable Promotion Tier
     * This method enables a promotion tier, i.e. makes the active parameter   true.
     * @param promotionTierId Unique promotion tier ID. (required)
     * @return PromotionsTiersEnableResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PromotionsTiersEnableResponseBody enablePromotionTier(String promotionTierId) throws ApiException {
        ApiResponse<PromotionsTiersEnableResponseBody> localVarResp = enablePromotionTierWithHttpInfo(promotionTierId);
        return localVarResp.getData();
    }

    /**
     * Enable Promotion Tier
     * This method enables a promotion tier, i.e. makes the active parameter   true.
     * @param promotionTierId Unique promotion tier ID. (required)
     * @return ApiResponse&lt;PromotionsTiersEnableResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PromotionsTiersEnableResponseBody> enablePromotionTierWithHttpInfo(String promotionTierId) throws ApiException {
        okhttp3.Call localVarCall = enablePromotionTierValidateBeforeCall(promotionTierId, null);
        Type localVarReturnType = new TypeToken<PromotionsTiersEnableResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Enable Promotion Tier (asynchronously)
     * This method enables a promotion tier, i.e. makes the active parameter   true.
     * @param promotionTierId Unique promotion tier ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call enablePromotionTierAsync(String promotionTierId, final ApiCallback<PromotionsTiersEnableResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = enablePromotionTierValidateBeforeCall(promotionTierId, _callback);
        Type localVarReturnType = new TypeToken<PromotionsTiersEnableResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPromotionStack
     * @param campaignId ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign.  (required)
     * @param stackId Promotion stack ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getPromotionStackCall(String campaignId, String stackId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/promotions/{campaignId}/stacks/{stackId}"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "stackId" + "}", localVarApiClient.escapeString(stackId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPromotionStackValidateBeforeCall(String campaignId, String stackId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getPromotionStack(Async)");
        }

        // verify the required parameter 'stackId' is set
        if (stackId == null) {
            throw new ApiException("Missing the required parameter 'stackId' when calling getPromotionStack(Async)");
        }

        return getPromotionStackCall(campaignId, stackId, _callback);

    }

    /**
     * Get Promotion Stack
     * This method returns the details of a promotion stack, including the promotion tiers grouped within the stack.
     * @param campaignId ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign.  (required)
     * @param stackId Promotion stack ID. (required)
     * @return PromotionsStacksGetResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PromotionsStacksGetResponseBody getPromotionStack(String campaignId, String stackId) throws ApiException {
        ApiResponse<PromotionsStacksGetResponseBody> localVarResp = getPromotionStackWithHttpInfo(campaignId, stackId);
        return localVarResp.getData();
    }

    /**
     * Get Promotion Stack
     * This method returns the details of a promotion stack, including the promotion tiers grouped within the stack.
     * @param campaignId ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign.  (required)
     * @param stackId Promotion stack ID. (required)
     * @return ApiResponse&lt;PromotionsStacksGetResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PromotionsStacksGetResponseBody> getPromotionStackWithHttpInfo(String campaignId, String stackId) throws ApiException {
        okhttp3.Call localVarCall = getPromotionStackValidateBeforeCall(campaignId, stackId, null);
        Type localVarReturnType = new TypeToken<PromotionsStacksGetResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Promotion Stack (asynchronously)
     * This method returns the details of a promotion stack, including the promotion tiers grouped within the stack.
     * @param campaignId ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign.  (required)
     * @param stackId Promotion stack ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getPromotionStackAsync(String campaignId, String stackId, final ApiCallback<PromotionsStacksGetResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPromotionStackValidateBeforeCall(campaignId, stackId, _callback);
        Type localVarReturnType = new TypeToken<PromotionsStacksGetResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPromotionTier
     * @param promotionTierId Unique promotion tier ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getPromotionTierCall(String promotionTierId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/promotions/tiers/{promotionTierId}"
            .replace("{" + "promotionTierId" + "}", localVarApiClient.escapeString(promotionTierId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPromotionTierValidateBeforeCall(String promotionTierId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'promotionTierId' is set
        if (promotionTierId == null) {
            throw new ApiException("Missing the required parameter 'promotionTierId' when calling getPromotionTier(Async)");
        }

        return getPromotionTierCall(promotionTierId, _callback);

    }

    /**
     * Get Promotion Tier
     * This method enables you to retrieve a specific promotion tier.
     * @param promotionTierId Unique promotion tier ID. (required)
     * @return PromotionsTiersGetResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PromotionsTiersGetResponseBody getPromotionTier(String promotionTierId) throws ApiException {
        ApiResponse<PromotionsTiersGetResponseBody> localVarResp = getPromotionTierWithHttpInfo(promotionTierId);
        return localVarResp.getData();
    }

    /**
     * Get Promotion Tier
     * This method enables you to retrieve a specific promotion tier.
     * @param promotionTierId Unique promotion tier ID. (required)
     * @return ApiResponse&lt;PromotionsTiersGetResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PromotionsTiersGetResponseBody> getPromotionTierWithHttpInfo(String promotionTierId) throws ApiException {
        okhttp3.Call localVarCall = getPromotionTierValidateBeforeCall(promotionTierId, null);
        Type localVarReturnType = new TypeToken<PromotionsTiersGetResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Promotion Tier (asynchronously)
     * This method enables you to retrieve a specific promotion tier.
     * @param promotionTierId Unique promotion tier ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getPromotionTierAsync(String promotionTierId, final ApiCallback<PromotionsTiersGetResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPromotionTierValidateBeforeCall(promotionTierId, _callback);
        Type localVarReturnType = new TypeToken<PromotionsTiersGetResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAllPromotionStacks
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param createdAt A filter on the list based on the object created_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z (optional)
     * @param updatedAt A filter on the list based on the object updated_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [updated_at][before] 2017-09-08T13:52:18.227Z (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call listAllPromotionStacksCall(Integer limit, Integer page, ParameterOrderListAllPromotionStacks order, ParameterCreatedBeforeAfter createdAt, ParameterUpdatedBeforeAfter updatedAt, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/promotions/stacks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (createdAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at", createdAt));
        }

        if (updatedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updated_at", updatedAt));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllPromotionStacksValidateBeforeCall(Integer limit, Integer page, ParameterOrderListAllPromotionStacks order, ParameterCreatedBeforeAfter createdAt, ParameterUpdatedBeforeAfter updatedAt, final ApiCallback _callback) throws ApiException {
        return listAllPromotionStacksCall(limit, page, order, createdAt, updatedAt, _callback);

    }

    /**
     * List Promotion Stacks
     * This method enables you to list promotion stacks irrespective of the campaign they are associated with.  You can use filters in the query parameters to specify the stacks to be returned in the response. # Advanced filters for fetching promotion stacks  
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param createdAt A filter on the list based on the object created_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z (optional)
     * @param updatedAt A filter on the list based on the object updated_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [updated_at][before] 2017-09-08T13:52:18.227Z (optional)
     * @return PromotionsStacksListResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PromotionsStacksListResponseBody listAllPromotionStacks(Integer limit, Integer page, ParameterOrderListAllPromotionStacks order, ParameterCreatedBeforeAfter createdAt, ParameterUpdatedBeforeAfter updatedAt) throws ApiException {
        ApiResponse<PromotionsStacksListResponseBody> localVarResp = listAllPromotionStacksWithHttpInfo(limit, page, order, createdAt, updatedAt);
        return localVarResp.getData();
    }

    /**
     * List Promotion Stacks
     * This method enables you to list promotion stacks irrespective of the campaign they are associated with.  You can use filters in the query parameters to specify the stacks to be returned in the response. # Advanced filters for fetching promotion stacks  
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param createdAt A filter on the list based on the object created_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z (optional)
     * @param updatedAt A filter on the list based on the object updated_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [updated_at][before] 2017-09-08T13:52:18.227Z (optional)
     * @return ApiResponse&lt;PromotionsStacksListResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PromotionsStacksListResponseBody> listAllPromotionStacksWithHttpInfo(Integer limit, Integer page, ParameterOrderListAllPromotionStacks order, ParameterCreatedBeforeAfter createdAt, ParameterUpdatedBeforeAfter updatedAt) throws ApiException {
        okhttp3.Call localVarCall = listAllPromotionStacksValidateBeforeCall(limit, page, order, createdAt, updatedAt, null);
        Type localVarReturnType = new TypeToken<PromotionsStacksListResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Promotion Stacks (asynchronously)
     * This method enables you to list promotion stacks irrespective of the campaign they are associated with.  You can use filters in the query parameters to specify the stacks to be returned in the response. # Advanced filters for fetching promotion stacks  
     * @param limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. (optional)
     * @param page Which page of results to return. The lowest value is 1. (optional)
     * @param order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param createdAt A filter on the list based on the object created_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z (optional)
     * @param updatedAt A filter on the list based on the object updated_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [updated_at][before] 2017-09-08T13:52:18.227Z (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call listAllPromotionStacksAsync(Integer limit, Integer page, ParameterOrderListAllPromotionStacks order, ParameterCreatedBeforeAfter createdAt, ParameterUpdatedBeforeAfter updatedAt, final ApiCallback<PromotionsStacksListResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllPromotionStacksValidateBeforeCall(limit, page, order, createdAt, updatedAt, _callback);
        Type localVarReturnType = new TypeToken<PromotionsStacksListResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPromotionStacksInCampaign
     * @param campaignId Unique campaign ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call listPromotionStacksInCampaignCall(String campaignId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/promotions/{campaignId}/stacks"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPromotionStacksInCampaignValidateBeforeCall(String campaignId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling listPromotionStacksInCampaign(Async)");
        }

        return listPromotionStacksInCampaignCall(campaignId, _callback);

    }

    /**
     * List Promotion Stacks in Campaign
     * This method enables you to list promotion stacks from a specified campaign.
     * @param campaignId Unique campaign ID. (required)
     * @return PromotionsStacksListResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PromotionsStacksListResponseBody listPromotionStacksInCampaign(String campaignId) throws ApiException {
        ApiResponse<PromotionsStacksListResponseBody> localVarResp = listPromotionStacksInCampaignWithHttpInfo(campaignId);
        return localVarResp.getData();
    }

    /**
     * List Promotion Stacks in Campaign
     * This method enables you to list promotion stacks from a specified campaign.
     * @param campaignId Unique campaign ID. (required)
     * @return ApiResponse&lt;PromotionsStacksListResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PromotionsStacksListResponseBody> listPromotionStacksInCampaignWithHttpInfo(String campaignId) throws ApiException {
        okhttp3.Call localVarCall = listPromotionStacksInCampaignValidateBeforeCall(campaignId, null);
        Type localVarReturnType = new TypeToken<PromotionsStacksListResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Promotion Stacks in Campaign (asynchronously)
     * This method enables you to list promotion stacks from a specified campaign.
     * @param campaignId Unique campaign ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call listPromotionStacksInCampaignAsync(String campaignId, final ApiCallback<PromotionsStacksListResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPromotionStacksInCampaignValidateBeforeCall(campaignId, _callback);
        Type localVarReturnType = new TypeToken<PromotionsStacksListResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPromotionTiersFromCampaign
     * @param campaignId Unique campaign ID assigned by Voucherify. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call listPromotionTiersFromCampaignCall(String campaignId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/promotions/{campaignId}/tiers"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPromotionTiersFromCampaignValidateBeforeCall(String campaignId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling listPromotionTiersFromCampaign(Async)");
        }

        return listPromotionTiersFromCampaignCall(campaignId, _callback);

    }

    /**
     * List Promotion Tiers from Campaign
     * This method enables you to list promotion tiers from a specified campaign.
     * @param campaignId Unique campaign ID assigned by Voucherify. (required)
     * @return PromotionsTiersListResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PromotionsTiersListResponseBody listPromotionTiersFromCampaign(String campaignId) throws ApiException {
        ApiResponse<PromotionsTiersListResponseBody> localVarResp = listPromotionTiersFromCampaignWithHttpInfo(campaignId);
        return localVarResp.getData();
    }

    /**
     * List Promotion Tiers from Campaign
     * This method enables you to list promotion tiers from a specified campaign.
     * @param campaignId Unique campaign ID assigned by Voucherify. (required)
     * @return ApiResponse&lt;PromotionsTiersListResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PromotionsTiersListResponseBody> listPromotionTiersFromCampaignWithHttpInfo(String campaignId) throws ApiException {
        okhttp3.Call localVarCall = listPromotionTiersFromCampaignValidateBeforeCall(campaignId, null);
        Type localVarReturnType = new TypeToken<PromotionsTiersListResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Promotion Tiers from Campaign (asynchronously)
     * This method enables you to list promotion tiers from a specified campaign.
     * @param campaignId Unique campaign ID assigned by Voucherify. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call listPromotionTiersFromCampaignAsync(String campaignId, final ApiCallback<PromotionsTiersListResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPromotionTiersFromCampaignValidateBeforeCall(campaignId, _callback);
        Type localVarReturnType = new TypeToken<PromotionsTiersListResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePromotionStack
     * @param campaignId ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign.  (required)
     * @param stackId Promotion stack ID. (required)
     * @param promotionsStacksUpdateRequestBody Specify the promotion stack parameters that you would like to update. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call updatePromotionStackCall(String campaignId, String stackId, PromotionsStacksUpdateRequestBody promotionsStacksUpdateRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = promotionsStacksUpdateRequestBody;

        // create path and map variables
        String localVarPath = "/v1/promotions/{campaignId}/stacks/{stackId}"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "stackId" + "}", localVarApiClient.escapeString(stackId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-App-Id", "X-App-Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePromotionStackValidateBeforeCall(String campaignId, String stackId, PromotionsStacksUpdateRequestBody promotionsStacksUpdateRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling updatePromotionStack(Async)");
        }

        // verify the required parameter 'stackId' is set
        if (stackId == null) {
            throw new ApiException("Missing the required parameter 'stackId' when calling updatePromotionStack(Async)");
        }

        return updatePromotionStackCall(campaignId, stackId, promotionsStacksUpdateRequestBody, _callback);

    }

    /**
     * Update Promotion Stack
     * This methods allows for editing an existing stack.
     * @param campaignId ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign.  (required)
     * @param stackId Promotion stack ID. (required)
     * @param promotionsStacksUpdateRequestBody Specify the promotion stack parameters that you would like to update. (optional)
     * @return PromotionsStacksUpdateResponseBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PromotionsStacksUpdateResponseBody updatePromotionStack(String campaignId, String stackId, PromotionsStacksUpdateRequestBody promotionsStacksUpdateRequestBody) throws ApiException {
        ApiResponse<PromotionsStacksUpdateResponseBody> localVarResp = updatePromotionStackWithHttpInfo(campaignId, stackId, promotionsStacksUpdateRequestBody);
        return localVarResp.getData();
    }

    /**
     * Update Promotion Stack
     * This methods allows for editing an existing stack.
     * @param campaignId ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign.  (required)
     * @param stackId Promotion stack ID. (required)
     * @param promotionsStacksUpdateRequestBody Specify the promotion stack parameters that you would like to update. (optional)
     * @return ApiResponse&lt;PromotionsStacksUpdateResponseBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PromotionsStacksUpdateResponseBody> updatePromotionStackWithHttpInfo(String campaignId, String stackId, PromotionsStacksUpdateRequestBody promotionsStacksUpdateRequestBody) throws ApiException {
        okhttp3.Call localVarCall = updatePromotionStackValidateBeforeCall(campaignId, stackId, promotionsStacksUpdateRequestBody, null);
        Type localVarReturnType = new TypeToken<PromotionsStacksUpdateResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Promotion Stack (asynchronously)
     * This methods allows for editing an existing stack.
     * @param campaignId ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign.  (required)
     * @param stackId Promotion stack ID. (required)
     * @param promotionsStacksUpdateRequestBody Specify the promotion stack parameters that you would like to update. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call updatePromotionStackAsync(String campaignId, String stackId, PromotionsStacksUpdateRequestBody promotionsStacksUpdateRequestBody, final ApiCallback<PromotionsStacksUpdateResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePromotionStackValidateBeforeCall(campaignId, stackId, promotionsStacksUpdateRequestBody, _callback);
        Type localVarReturnType = new TypeToken<PromotionsStacksUpdateResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
