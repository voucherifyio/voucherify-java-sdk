/*
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.voucherify.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.voucherify.client.model.ApplicableToEffect;
import io.voucherify.client.model.ApplicableToOrderItemUnitsItem;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.voucherify.client.JSON;

/**
 * ApplicableTo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class ApplicableTo {
  /**
   * This object stores information about the resource to which the discount is applicable.
   */
  @JsonAdapter(ObjectEnum.Adapter.class)
  public enum ObjectEnum {
    PRODUCT("product"),
    
    SKU("sku"),
    
    PRODUCTS_COLLECTION("products_collection");

    private String value;

    ObjectEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ObjectEnum fromValue(String value) {
      for (ObjectEnum b : ObjectEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
        return null;
    }

    public static class Adapter extends TypeAdapter<ObjectEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ObjectEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ObjectEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ObjectEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private ObjectEnum _object;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_SOURCE_ID = "source_id";
  @SerializedName(SERIALIZED_NAME_SOURCE_ID)
  private String sourceId;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "product_id";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private String productId;

  public static final String SERIALIZED_NAME_PRODUCT_SOURCE_ID = "product_source_id";
  @SerializedName(SERIALIZED_NAME_PRODUCT_SOURCE_ID)
  private String productSourceId;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private BigDecimal price;

  public static final String SERIALIZED_NAME_PRICE_FORMULA = "price_formula";
  @SerializedName(SERIALIZED_NAME_PRICE_FORMULA)
  private BigDecimal priceFormula;

  public static final String SERIALIZED_NAME_EFFECT = "effect";
  @SerializedName(SERIALIZED_NAME_EFFECT)
  private ApplicableToEffect effect;

  public static final String SERIALIZED_NAME_QUANTITY_LIMIT = "quantity_limit";
  @SerializedName(SERIALIZED_NAME_QUANTITY_LIMIT)
  private Integer quantityLimit;

  public static final String SERIALIZED_NAME_AGGREGATED_QUANTITY_LIMIT = "aggregated_quantity_limit";
  @SerializedName(SERIALIZED_NAME_AGGREGATED_QUANTITY_LIMIT)
  private Integer aggregatedQuantityLimit;

  public static final String SERIALIZED_NAME_AMOUNT_LIMIT = "amount_limit";
  @SerializedName(SERIALIZED_NAME_AMOUNT_LIMIT)
  private Integer amountLimit;

  public static final String SERIALIZED_NAME_AGGREGATED_AMOUNT_LIMIT = "aggregated_amount_limit";
  @SerializedName(SERIALIZED_NAME_AGGREGATED_AMOUNT_LIMIT)
  private Integer aggregatedAmountLimit;

  public static final String SERIALIZED_NAME_ORDER_ITEM_INDICES = "order_item_indices";
  @SerializedName(SERIALIZED_NAME_ORDER_ITEM_INDICES)
  private List<Integer> orderItemIndices;

  public static final String SERIALIZED_NAME_ORDER_ITEM_UNITS = "order_item_units";
  @SerializedName(SERIALIZED_NAME_ORDER_ITEM_UNITS)
  private List<ApplicableToOrderItemUnitsItem> orderItemUnits;

  public static final String SERIALIZED_NAME_REPEAT = "repeat";
  @SerializedName(SERIALIZED_NAME_REPEAT)
  private Integer repeat;

  public static final String SERIALIZED_NAME_SKIP_INITIALLY = "skip_initially";
  @SerializedName(SERIALIZED_NAME_SKIP_INITIALLY)
  private Integer skipInitially;

  /**
   * Determines to which kinds of objects the discount is applicable. &#x60;ITEM&#x60; includes products and SKUs. &#x60;UNIT&#x60; means particular units within an order line.
   */
  @JsonAdapter(TargetEnum.Adapter.class)
  public enum TargetEnum {
    ITEM("ITEM"),
    
    UNIT("UNIT");

    private String value;

    TargetEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TargetEnum fromValue(String value) {
      for (TargetEnum b : TargetEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
        return null;
    }

    public static class Adapter extends TypeAdapter<TargetEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TargetEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TargetEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TargetEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private TargetEnum target;

  public ApplicableTo() {
  }

  public ApplicableTo _object(ObjectEnum _object) {
    
    this._object = _object;
    return this;
  }

   /**
   * This object stores information about the resource to which the discount is applicable.
   * @return _object
  **/
  @javax.annotation.Nullable
  public ObjectEnum getObject() {
    return _object;
  }


  public void setObject(ObjectEnum _object) {
    this._object = _object;
  }


  public ApplicableTo id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Unique product collection, product, or SKU identifier assigned by Voucherify.
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public ApplicableTo sourceId(String sourceId) {
    
    this.sourceId = sourceId;
    return this;
  }

   /**
   * The source identifier from your inventory system.
   * @return sourceId
  **/
  @javax.annotation.Nullable
  public String getSourceId() {
    return sourceId;
  }


  public void setSourceId(String sourceId) {
    this.sourceId = sourceId;
  }


  public ApplicableTo productId(String productId) {
    
    this.productId = productId;
    return this;
  }

   /**
   * Parent product&#39;s unique ID assigned by Voucherify.
   * @return productId
  **/
  @javax.annotation.Nullable
  public String getProductId() {
    return productId;
  }


  public void setProductId(String productId) {
    this.productId = productId;
  }


  public ApplicableTo productSourceId(String productSourceId) {
    
    this.productSourceId = productSourceId;
    return this;
  }

   /**
   * Parent product&#39;s source ID from your inventory system.
   * @return productSourceId
  **/
  @javax.annotation.Nullable
  public String getProductSourceId() {
    return productSourceId;
  }


  public void setProductSourceId(String productSourceId) {
    this.productSourceId = productSourceId;
  }


  public ApplicableTo price(BigDecimal price) {
    
    this.price = price;
    return this;
  }

   /**
   * New fixed price of an item. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 price is written as 1000. In case of the fixed price being calculated by the formula, i.e. the price_formula parameter is present in the fixed price definition, this value becomes the fallback value. Such that in a case where the formula cannot be calculated due to missing metadata, for example, this value will be used as the fixed price.
   * @return price
  **/
  @javax.annotation.Nullable
  public BigDecimal getPrice() {
    return price;
  }


  public void setPrice(BigDecimal price) {
    this.price = price;
  }


  public ApplicableTo priceFormula(BigDecimal priceFormula) {
    
    this.priceFormula = priceFormula;
    return this;
  }

   /**
   * Formula used to calculate the discounted price of an item.
   * @return priceFormula
  **/
  @javax.annotation.Nullable
  public BigDecimal getPriceFormula() {
    return priceFormula;
  }


  public void setPriceFormula(BigDecimal priceFormula) {
    this.priceFormula = priceFormula;
  }


  public ApplicableTo effect(ApplicableToEffect effect) {
    
    this.effect = effect;
    return this;
  }

   /**
   * Get effect
   * @return effect
  **/
  @javax.annotation.Nonnull
  public ApplicableToEffect getEffect() {
    return effect;
  }


  public void setEffect(ApplicableToEffect effect) {
    this.effect = effect;
  }


  public ApplicableTo quantityLimit(Integer quantityLimit) {
    
    this.quantityLimit = quantityLimit;
    return this;
  }

   /**
   * The maximum number of units allowed to be discounted per order line item.
   * @return quantityLimit
  **/
  @javax.annotation.Nullable
  public Integer getQuantityLimit() {
    return quantityLimit;
  }


  public void setQuantityLimit(Integer quantityLimit) {
    this.quantityLimit = quantityLimit;
  }


  public ApplicableTo aggregatedQuantityLimit(Integer aggregatedQuantityLimit) {
    
    this.aggregatedQuantityLimit = aggregatedQuantityLimit;
    return this;
  }

   /**
   * The maximum number of units allowed to be discounted combined across all matched order line items.
   * @return aggregatedQuantityLimit
  **/
  @javax.annotation.Nullable
  public Integer getAggregatedQuantityLimit() {
    return aggregatedQuantityLimit;
  }


  public void setAggregatedQuantityLimit(Integer aggregatedQuantityLimit) {
    this.aggregatedQuantityLimit = aggregatedQuantityLimit;
  }


  public ApplicableTo amountLimit(Integer amountLimit) {
    
    this.amountLimit = amountLimit;
    return this;
  }

   /**
   * Upper limit allowed to be applied as a discount per order line item. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $6 maximum discount is written as 600.
   * @return amountLimit
  **/
  @javax.annotation.Nullable
  public Integer getAmountLimit() {
    return amountLimit;
  }


  public void setAmountLimit(Integer amountLimit) {
    this.amountLimit = amountLimit;
  }


  public ApplicableTo aggregatedAmountLimit(Integer aggregatedAmountLimit) {
    
    this.aggregatedAmountLimit = aggregatedAmountLimit;
    return this;
  }

   /**
   * Maximum discount amount per order. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $6 maximum discount on the entire order is written as 600. This value is definable for the following discount effects: - &#x60;APPLY_TO_ITEMS&#x60; (each item subtotal is discounted equally) - &#x60;APPLY_TO_ITEMS_BY_QUANTITY&#x60; (each unit of matched products has the same discount value)
   * @return aggregatedAmountLimit
  **/
  @javax.annotation.Nullable
  public Integer getAggregatedAmountLimit() {
    return aggregatedAmountLimit;
  }


  public void setAggregatedAmountLimit(Integer aggregatedAmountLimit) {
    this.aggregatedAmountLimit = aggregatedAmountLimit;
  }


  public ApplicableTo orderItemIndices(List<Integer> orderItemIndices) {
    
    this.orderItemIndices = orderItemIndices;
    return this;
  }

  public ApplicableTo addOrderItemIndicesItem(Integer orderItemIndicesItem) {
    if (this.orderItemIndices == null) {
      this.orderItemIndices = new ArrayList<>();
    }
    this.orderItemIndices.add(orderItemIndicesItem);
    return this;
  }

   /**
   * Lists which order lines are (not) covered by the discount. The order in the array is determined by the sequence of applied discounts, while the numbers correspond to the order lines sent in the &#x60;order&#x60; object in the request. The first order line is assigned &#x60;0&#x60;, the second order line is assigned &#x60;1&#x60;, and so on.
   * @return orderItemIndices
  **/
  @javax.annotation.Nullable
  public List<Integer> getOrderItemIndices() {
    return orderItemIndices;
  }


  public void setOrderItemIndices(List<Integer> orderItemIndices) {
    this.orderItemIndices = orderItemIndices;
  }


  public ApplicableTo orderItemUnits(List<ApplicableToOrderItemUnitsItem> orderItemUnits) {
    
    this.orderItemUnits = orderItemUnits;
    return this;
  }

  public ApplicableTo addOrderItemUnitsItem(ApplicableToOrderItemUnitsItem orderItemUnitsItem) {
    if (this.orderItemUnits == null) {
      this.orderItemUnits = new ArrayList<>();
    }
    this.orderItemUnits.add(orderItemUnitsItem);
    return this;
  }

   /**
   * Lists which units within order lines are covered by the discount. The order line items are listed according to sequence of applied discounts while the &#x60;index&#x60; corresponds to the order line sent in the &#x60;order&#x60; object in the request.
   * @return orderItemUnits
  **/
  @javax.annotation.Nullable
  public List<ApplicableToOrderItemUnitsItem> getOrderItemUnits() {
    return orderItemUnits;
  }


  public void setOrderItemUnits(List<ApplicableToOrderItemUnitsItem> orderItemUnits) {
    this.orderItemUnits = orderItemUnits;
  }


  public ApplicableTo repeat(Integer repeat) {
    
    this.repeat = repeat;
    return this;
  }

   /**
   * Determines the recurrence of the discount, e.g. &#x60;\&quot;repeat\&quot;: 3&#x60; means that the discount is applied to every third item.
   * @return repeat
  **/
  @javax.annotation.Nullable
  public Integer getRepeat() {
    return repeat;
  }


  public void setRepeat(Integer repeat) {
    this.repeat = repeat;
  }


  public ApplicableTo skipInitially(Integer skipInitially) {
    
    this.skipInitially = skipInitially;
    return this;
  }

   /**
   * Determines how many items are skipped before the discount is applied.
   * @return skipInitially
  **/
  @javax.annotation.Nullable
  public Integer getSkipInitially() {
    return skipInitially;
  }


  public void setSkipInitially(Integer skipInitially) {
    this.skipInitially = skipInitially;
  }


  public ApplicableTo target(TargetEnum target) {
    
    this.target = target;
    return this;
  }

   /**
   * Determines to which kinds of objects the discount is applicable. &#x60;ITEM&#x60; includes products and SKUs. &#x60;UNIT&#x60; means particular units within an order line.
   * @return target
  **/
  @javax.annotation.Nullable
  public TargetEnum getTarget() {
    return target;
  }


  public void setTarget(TargetEnum target) {
    this.target = target;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicableTo applicableTo = (ApplicableTo) o;
    return Objects.equals(this._object, applicableTo._object) &&
        Objects.equals(this.id, applicableTo.id) &&
        Objects.equals(this.sourceId, applicableTo.sourceId) &&
        Objects.equals(this.productId, applicableTo.productId) &&
        Objects.equals(this.productSourceId, applicableTo.productSourceId) &&
        Objects.equals(this.price, applicableTo.price) &&
        Objects.equals(this.priceFormula, applicableTo.priceFormula) &&
        Objects.equals(this.effect, applicableTo.effect) &&
        Objects.equals(this.quantityLimit, applicableTo.quantityLimit) &&
        Objects.equals(this.aggregatedQuantityLimit, applicableTo.aggregatedQuantityLimit) &&
        Objects.equals(this.amountLimit, applicableTo.amountLimit) &&
        Objects.equals(this.aggregatedAmountLimit, applicableTo.aggregatedAmountLimit) &&
        Objects.equals(this.orderItemIndices, applicableTo.orderItemIndices) &&
        Objects.equals(this.orderItemUnits, applicableTo.orderItemUnits) &&
        Objects.equals(this.repeat, applicableTo.repeat) &&
        Objects.equals(this.skipInitially, applicableTo.skipInitially) &&
        Objects.equals(this.target, applicableTo.target);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(_object, id, sourceId, productId, productSourceId, price, priceFormula, effect, quantityLimit, aggregatedQuantityLimit, amountLimit, aggregatedAmountLimit, orderItemIndices, orderItemUnits, repeat, skipInitially, target);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicableTo {\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    productSourceId: ").append(toIndentedString(productSourceId)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    priceFormula: ").append(toIndentedString(priceFormula)).append("\n");
    sb.append("    effect: ").append(toIndentedString(effect)).append("\n");
    sb.append("    quantityLimit: ").append(toIndentedString(quantityLimit)).append("\n");
    sb.append("    aggregatedQuantityLimit: ").append(toIndentedString(aggregatedQuantityLimit)).append("\n");
    sb.append("    amountLimit: ").append(toIndentedString(amountLimit)).append("\n");
    sb.append("    aggregatedAmountLimit: ").append(toIndentedString(aggregatedAmountLimit)).append("\n");
    sb.append("    orderItemIndices: ").append(toIndentedString(orderItemIndices)).append("\n");
    sb.append("    orderItemUnits: ").append(toIndentedString(orderItemUnits)).append("\n");
    sb.append("    repeat: ").append(toIndentedString(repeat)).append("\n");
    sb.append("    skipInitially: ").append(toIndentedString(skipInitially)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("object");
    openapiFields.add("id");
    openapiFields.add("source_id");
    openapiFields.add("product_id");
    openapiFields.add("product_source_id");
    openapiFields.add("price");
    openapiFields.add("price_formula");
    openapiFields.add("effect");
    openapiFields.add("quantity_limit");
    openapiFields.add("aggregated_quantity_limit");
    openapiFields.add("amount_limit");
    openapiFields.add("aggregated_amount_limit");
    openapiFields.add("order_item_indices");
    openapiFields.add("order_item_units");
    openapiFields.add("repeat");
    openapiFields.add("skip_initially");
    openapiFields.add("target");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("effect");
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicableTo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicableTo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicableTo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicableTo.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicableTo>() {
           @Override
           public void write(JsonWriter out, ApplicableTo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicableTo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApplicableTo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApplicableTo
  * @throws IOException if the JSON string is invalid with respect to ApplicableTo
  */
  public static ApplicableTo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicableTo.class);
  }

 /**
  * Convert an instance of ApplicableTo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

