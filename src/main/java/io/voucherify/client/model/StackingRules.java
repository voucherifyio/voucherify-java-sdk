/*
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.voucherify.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.voucherify.client.JSON;

/**
 * Defines stacking rules for redeemables. Read more in the [Help Center](https://support.voucherify.io/article/604-stacking-rules)
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class StackingRules {
  public static final String SERIALIZED_NAME_REDEEMABLES_LIMIT = "redeemables_limit";
  @SerializedName(SERIALIZED_NAME_REDEEMABLES_LIMIT)
  private Integer redeemablesLimit = 30;

  public static final String SERIALIZED_NAME_APPLICABLE_REDEEMABLES_LIMIT = "applicable_redeemables_limit";
  @SerializedName(SERIALIZED_NAME_APPLICABLE_REDEEMABLES_LIMIT)
  private Integer applicableRedeemablesLimit = 5;

  public static final String SERIALIZED_NAME_APPLICABLE_REDEEMABLES_PER_CATEGORY_LIMIT = "applicable_redeemables_per_category_limit";
  @SerializedName(SERIALIZED_NAME_APPLICABLE_REDEEMABLES_PER_CATEGORY_LIMIT)
  private Integer applicableRedeemablesPerCategoryLimit = 1;

  public static final String SERIALIZED_NAME_APPLICABLE_EXCLUSIVE_REDEEMABLES_LIMIT = "applicable_exclusive_redeemables_limit";
  @SerializedName(SERIALIZED_NAME_APPLICABLE_EXCLUSIVE_REDEEMABLES_LIMIT)
  private Integer applicableExclusiveRedeemablesLimit = 1;

  public static final String SERIALIZED_NAME_APPLICABLE_EXCLUSIVE_REDEEMABLES_PER_CATEGORY_LIMIT = "applicable_exclusive_redeemables_per_category_limit";
  @SerializedName(SERIALIZED_NAME_APPLICABLE_EXCLUSIVE_REDEEMABLES_PER_CATEGORY_LIMIT)
  private Integer applicableExclusiveRedeemablesPerCategoryLimit = 1;

  public static final String SERIALIZED_NAME_EXCLUSIVE_CATEGORIES = "exclusive_categories";
  @SerializedName(SERIALIZED_NAME_EXCLUSIVE_CATEGORIES)
  private List<String> exclusiveCategories = new ArrayList<>();

  public static final String SERIALIZED_NAME_JOINT_CATEGORIES = "joint_categories";
  @SerializedName(SERIALIZED_NAME_JOINT_CATEGORIES)
  private List<String> jointCategories = new ArrayList<>();

  /**
   * Defines redeemables application mode.
   */
  @JsonAdapter(RedeemablesApplicationModeEnum.Adapter.class)
  public enum RedeemablesApplicationModeEnum {
    ALL("ALL"),
    
    PARTIAL("PARTIAL");

    private String value;

    RedeemablesApplicationModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RedeemablesApplicationModeEnum fromValue(String value) {
      for (RedeemablesApplicationModeEnum b : RedeemablesApplicationModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
        return null;
    }

    public static class Adapter extends TypeAdapter<RedeemablesApplicationModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RedeemablesApplicationModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RedeemablesApplicationModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RedeemablesApplicationModeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REDEEMABLES_APPLICATION_MODE = "redeemables_application_mode";
  @SerializedName(SERIALIZED_NAME_REDEEMABLES_APPLICATION_MODE)
  private RedeemablesApplicationModeEnum redeemablesApplicationMode;

  /**
   * Defines redeemables sorting rule.
   */
  @JsonAdapter(RedeemablesSortingRuleEnum.Adapter.class)
  public enum RedeemablesSortingRuleEnum {
    CATEGORY_HIERARCHY("CATEGORY_HIERARCHY"),
    
    REQUESTED_ORDER("REQUESTED_ORDER");

    private String value;

    RedeemablesSortingRuleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RedeemablesSortingRuleEnum fromValue(String value) {
      for (RedeemablesSortingRuleEnum b : RedeemablesSortingRuleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
        return null;
    }

    public static class Adapter extends TypeAdapter<RedeemablesSortingRuleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RedeemablesSortingRuleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RedeemablesSortingRuleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RedeemablesSortingRuleEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REDEEMABLES_SORTING_RULE = "redeemables_sorting_rule";
  @SerializedName(SERIALIZED_NAME_REDEEMABLES_SORTING_RULE)
  private RedeemablesSortingRuleEnum redeemablesSortingRule = RedeemablesSortingRuleEnum.REQUESTED_ORDER;

  public StackingRules() {
  }

  public StackingRules redeemablesLimit(Integer redeemablesLimit) {
    
    this.redeemablesLimit = redeemablesLimit;
    return this;
  }

   /**
   * Defines how many redeemables can be sent in one stacking request (note: more redeemables means more processing time!).
   * minimum: 1
   * maximum: 30
   * @return redeemablesLimit
  **/
  @javax.annotation.Nullable
  public Integer getRedeemablesLimit() {
    return redeemablesLimit;
  }


  public void setRedeemablesLimit(Integer redeemablesLimit) {
    this.redeemablesLimit = redeemablesLimit;
  }


  public StackingRules applicableRedeemablesLimit(Integer applicableRedeemablesLimit) {
    
    this.applicableRedeemablesLimit = applicableRedeemablesLimit;
    return this;
  }

   /**
   * Defines how many of the sent redeemables will be applied to the order. For example, a user can select 30 discounts but only 5 will be applied to the order and the remaining will be labelled as SKIPPED.
   * minimum: 1
   * maximum: 30
   * @return applicableRedeemablesLimit
  **/
  @javax.annotation.Nullable
  public Integer getApplicableRedeemablesLimit() {
    return applicableRedeemablesLimit;
  }


  public void setApplicableRedeemablesLimit(Integer applicableRedeemablesLimit) {
    this.applicableRedeemablesLimit = applicableRedeemablesLimit;
  }


  public StackingRules applicableRedeemablesPerCategoryLimit(Integer applicableRedeemablesPerCategoryLimit) {
    
    this.applicableRedeemablesPerCategoryLimit = applicableRedeemablesPerCategoryLimit;
    return this;
  }

   /**
   * Defines how many redeemables per category can be applied in one request.
   * minimum: 1
   * maximum: 5
   * @return applicableRedeemablesPerCategoryLimit
  **/
  @javax.annotation.Nullable
  public Integer getApplicableRedeemablesPerCategoryLimit() {
    return applicableRedeemablesPerCategoryLimit;
  }


  public void setApplicableRedeemablesPerCategoryLimit(Integer applicableRedeemablesPerCategoryLimit) {
    this.applicableRedeemablesPerCategoryLimit = applicableRedeemablesPerCategoryLimit;
  }


  public StackingRules applicableExclusiveRedeemablesLimit(Integer applicableExclusiveRedeemablesLimit) {
    
    this.applicableExclusiveRedeemablesLimit = applicableExclusiveRedeemablesLimit;
    return this;
  }

   /**
   * Defines how many redeemables with an exclusive category can be applied in one request.
   * minimum: 1
   * maximum: 5
   * @return applicableExclusiveRedeemablesLimit
  **/
  @javax.annotation.Nullable
  public Integer getApplicableExclusiveRedeemablesLimit() {
    return applicableExclusiveRedeemablesLimit;
  }


  public void setApplicableExclusiveRedeemablesLimit(Integer applicableExclusiveRedeemablesLimit) {
    this.applicableExclusiveRedeemablesLimit = applicableExclusiveRedeemablesLimit;
  }


  public StackingRules applicableExclusiveRedeemablesPerCategoryLimit(Integer applicableExclusiveRedeemablesPerCategoryLimit) {
    
    this.applicableExclusiveRedeemablesPerCategoryLimit = applicableExclusiveRedeemablesPerCategoryLimit;
    return this;
  }

   /**
   * Defines how many redeemables with an exclusive category per category in stacking rules can be applied in one request.
   * minimum: 1
   * maximum: 5
   * @return applicableExclusiveRedeemablesPerCategoryLimit
  **/
  @javax.annotation.Nullable
  public Integer getApplicableExclusiveRedeemablesPerCategoryLimit() {
    return applicableExclusiveRedeemablesPerCategoryLimit;
  }


  public void setApplicableExclusiveRedeemablesPerCategoryLimit(Integer applicableExclusiveRedeemablesPerCategoryLimit) {
    this.applicableExclusiveRedeemablesPerCategoryLimit = applicableExclusiveRedeemablesPerCategoryLimit;
  }


  public StackingRules exclusiveCategories(List<String> exclusiveCategories) {
    
    this.exclusiveCategories = exclusiveCategories;
    return this;
  }

  public StackingRules addExclusiveCategoriesItem(String exclusiveCategoriesItem) {
    if (this.exclusiveCategories == null) {
      this.exclusiveCategories = new ArrayList<>();
    }
    this.exclusiveCategories.add(exclusiveCategoriesItem);
    return this;
  }

   /**
   * Lists all exclusive categories. A redeemable from a campaign with an exclusive category is the only redeemable to be redeemed when applied with redeemables from other campaigns unless these campaigns are exclusive or joint.
   * @return exclusiveCategories
  **/
  @javax.annotation.Nullable
  public List<String> getExclusiveCategories() {
    return exclusiveCategories;
  }


  public void setExclusiveCategories(List<String> exclusiveCategories) {
    this.exclusiveCategories = exclusiveCategories;
  }


  public StackingRules jointCategories(List<String> jointCategories) {
    
    this.jointCategories = jointCategories;
    return this;
  }

  public StackingRules addJointCategoriesItem(String jointCategoriesItem) {
    if (this.jointCategories == null) {
      this.jointCategories = new ArrayList<>();
    }
    this.jointCategories.add(jointCategoriesItem);
    return this;
  }

   /**
   * Lists all joint categories. A campaign with a joint category is always applied regardless of the exclusivity of other campaigns.
   * @return jointCategories
  **/
  @javax.annotation.Nullable
  public List<String> getJointCategories() {
    return jointCategories;
  }


  public void setJointCategories(List<String> jointCategories) {
    this.jointCategories = jointCategories;
  }


  public StackingRules redeemablesApplicationMode(RedeemablesApplicationModeEnum redeemablesApplicationMode) {
    
    this.redeemablesApplicationMode = redeemablesApplicationMode;
    return this;
  }

   /**
   * Defines redeemables application mode.
   * @return redeemablesApplicationMode
  **/
  @javax.annotation.Nullable
  public RedeemablesApplicationModeEnum getRedeemablesApplicationMode() {
    return redeemablesApplicationMode;
  }


  public void setRedeemablesApplicationMode(RedeemablesApplicationModeEnum redeemablesApplicationMode) {
    this.redeemablesApplicationMode = redeemablesApplicationMode;
  }


  public StackingRules redeemablesSortingRule(RedeemablesSortingRuleEnum redeemablesSortingRule) {
    
    this.redeemablesSortingRule = redeemablesSortingRule;
    return this;
  }

   /**
   * Defines redeemables sorting rule.
   * @return redeemablesSortingRule
  **/
  @javax.annotation.Nullable
  public RedeemablesSortingRuleEnum getRedeemablesSortingRule() {
    return redeemablesSortingRule;
  }


  public void setRedeemablesSortingRule(RedeemablesSortingRuleEnum redeemablesSortingRule) {
    this.redeemablesSortingRule = redeemablesSortingRule;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the StackingRules instance itself
   */
  public StackingRules putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StackingRules stackingRules = (StackingRules) o;
    return Objects.equals(this.redeemablesLimit, stackingRules.redeemablesLimit) &&
        Objects.equals(this.applicableRedeemablesLimit, stackingRules.applicableRedeemablesLimit) &&
        Objects.equals(this.applicableRedeemablesPerCategoryLimit, stackingRules.applicableRedeemablesPerCategoryLimit) &&
        Objects.equals(this.applicableExclusiveRedeemablesLimit, stackingRules.applicableExclusiveRedeemablesLimit) &&
        Objects.equals(this.applicableExclusiveRedeemablesPerCategoryLimit, stackingRules.applicableExclusiveRedeemablesPerCategoryLimit) &&
        Objects.equals(this.exclusiveCategories, stackingRules.exclusiveCategories) &&
        Objects.equals(this.jointCategories, stackingRules.jointCategories) &&
        Objects.equals(this.redeemablesApplicationMode, stackingRules.redeemablesApplicationMode) &&
        Objects.equals(this.redeemablesSortingRule, stackingRules.redeemablesSortingRule)&&
        Objects.equals(this.additionalProperties, stackingRules.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(redeemablesLimit, applicableRedeemablesLimit, applicableRedeemablesPerCategoryLimit, applicableExclusiveRedeemablesLimit, applicableExclusiveRedeemablesPerCategoryLimit, exclusiveCategories, jointCategories, redeemablesApplicationMode, redeemablesSortingRule, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StackingRules {\n");
    sb.append("    redeemablesLimit: ").append(toIndentedString(redeemablesLimit)).append("\n");
    sb.append("    applicableRedeemablesLimit: ").append(toIndentedString(applicableRedeemablesLimit)).append("\n");
    sb.append("    applicableRedeemablesPerCategoryLimit: ").append(toIndentedString(applicableRedeemablesPerCategoryLimit)).append("\n");
    sb.append("    applicableExclusiveRedeemablesLimit: ").append(toIndentedString(applicableExclusiveRedeemablesLimit)).append("\n");
    sb.append("    applicableExclusiveRedeemablesPerCategoryLimit: ").append(toIndentedString(applicableExclusiveRedeemablesPerCategoryLimit)).append("\n");
    sb.append("    exclusiveCategories: ").append(toIndentedString(exclusiveCategories)).append("\n");
    sb.append("    jointCategories: ").append(toIndentedString(jointCategories)).append("\n");
    sb.append("    redeemablesApplicationMode: ").append(toIndentedString(redeemablesApplicationMode)).append("\n");
    sb.append("    redeemablesSortingRule: ").append(toIndentedString(redeemablesSortingRule)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("redeemables_limit");
    openapiFields.add("applicable_redeemables_limit");
    openapiFields.add("applicable_redeemables_per_category_limit");
    openapiFields.add("applicable_exclusive_redeemables_limit");
    openapiFields.add("applicable_exclusive_redeemables_per_category_limit");
    openapiFields.add("exclusive_categories");
    openapiFields.add("joint_categories");
    openapiFields.add("redeemables_application_mode");
    openapiFields.add("redeemables_sorting_rule");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StackingRules.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StackingRules' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StackingRules> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StackingRules.class));

       return (TypeAdapter<T>) new TypeAdapter<StackingRules>() {
           @Override
           public void write(JsonWriter out, StackingRules value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public StackingRules read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             StackingRules instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     return null;
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of StackingRules given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of StackingRules
  * @throws IOException if the JSON string is invalid with respect to StackingRules
  */
  public static StackingRules fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StackingRules.class);
  }

 /**
  * Convert an instance of StackingRules to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

