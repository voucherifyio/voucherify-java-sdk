/*
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.voucherify.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.voucherify.client.model.LoyaltyCardTransactionDetails;
import io.voucherify.client.model.LoyaltyCardTransactionsType;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonNull;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.voucherify.client.JSON;

/**
 * LoyaltyCardTransaction
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class LoyaltyCardTransaction {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;
    private boolean idIsSet = false;

  public static final String SERIALIZED_NAME_SOURCE_ID = "source_id";
  @SerializedName(SERIALIZED_NAME_SOURCE_ID)
  private String sourceId;
    private boolean sourceIdIsSet = false;

  public static final String SERIALIZED_NAME_VOUCHER_ID = "voucher_id";
  @SerializedName(SERIALIZED_NAME_VOUCHER_ID)
  private String voucherId;
    private boolean voucherIdIsSet = false;

  public static final String SERIALIZED_NAME_CAMPAIGN_ID = "campaign_id";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_ID)
  private String campaignId;
    private boolean campaignIdIsSet = false;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;
    private boolean sourceIsSet = false;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;
    private boolean reasonIsSet = false;

  public static final String SERIALIZED_NAME_RELATED_TRANSACTION_ID = "related_transaction_id";
  @SerializedName(SERIALIZED_NAME_RELATED_TRANSACTION_ID)
  private String relatedTransactionId;
    private boolean relatedTransactionIdIsSet = false;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;
    private boolean createdAtIsSet = false;

  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private LoyaltyCardTransactionDetails details;
    private boolean detailsIsSet = false;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private LoyaltyCardTransactionsType type;

  public LoyaltyCardTransaction() {
  }

  public LoyaltyCardTransaction id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Unique transaction ID.
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
    this.idIsSet = true;
  }
  public boolean isIdSet() {
    return idIsSet;
  }


  public LoyaltyCardTransaction sourceId(String sourceId) {
    
    this.sourceId = sourceId;
    return this;
  }

   /**
   * The merchant&#39;s transaction ID if it is different from the Voucherify transaction ID. It is really useful in case of an integration between multiple systems. It can be a transaction ID from a CRM system, database or 3rd-party service. In case of a redemption, this value is null.
   * @return sourceId
  **/
  @javax.annotation.Nullable
  public String getSourceId() {
    return sourceId;
  }


  public void setSourceId(String sourceId) {
    this.sourceId = sourceId;
    this.sourceIdIsSet = true;
  }
  public boolean isSourceIdSet() {
    return sourceIdIsSet;
  }


  public LoyaltyCardTransaction voucherId(String voucherId) {
    
    this.voucherId = voucherId;
    return this;
  }

   /**
   * Unique voucher ID.
   * @return voucherId
  **/
  @javax.annotation.Nullable
  public String getVoucherId() {
    return voucherId;
  }


  public void setVoucherId(String voucherId) {
    this.voucherId = voucherId;
    this.voucherIdIsSet = true;
  }
  public boolean isVoucherIdSet() {
    return voucherIdIsSet;
  }


  public LoyaltyCardTransaction campaignId(String campaignId) {
    
    this.campaignId = campaignId;
    return this;
  }

   /**
   * Unqiue campaign ID of the voucher&#39;s parent campaign if it is part of campaign that generates bulk codes.
   * @return campaignId
  **/
  @javax.annotation.Nullable
  public String getCampaignId() {
    return campaignId;
  }


  public void setCampaignId(String campaignId) {
    this.campaignId = campaignId;
    this.campaignIdIsSet = true;
  }
  public boolean isCampaignIdSet() {
    return campaignIdIsSet;
  }


  public LoyaltyCardTransaction source(String source) {
    
    this.source = source;
    return this;
  }

   /**
   * The channel through which the transaction took place, whether through the API or the the Dashboard. In case of a redemption, this value is null.
   * @return source
  **/
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }


  public void setSource(String source) {
    this.source = source;
    this.sourceIsSet = true;
  }
  public boolean isSourceSet() {
    return sourceIsSet;
  }


  public LoyaltyCardTransaction reason(String reason) {
    
    this.reason = reason;
    return this;
  }

   /**
   * Reason why the transaction occurred. In case of a redemption, this value is null.
   * @return reason
  **/
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }


  public void setReason(String reason) {
    this.reason = reason;
    this.reasonIsSet = true;
  }
  public boolean isReasonSet() {
    return reasonIsSet;
  }


  public LoyaltyCardTransaction relatedTransactionId(String relatedTransactionId) {
    
    this.relatedTransactionId = relatedTransactionId;
    return this;
  }

   /**
   * The related transaction ID on the receiving card.
   * @return relatedTransactionId
  **/
  @javax.annotation.Nullable
  public String getRelatedTransactionId() {
    return relatedTransactionId;
  }


  public void setRelatedTransactionId(String relatedTransactionId) {
    this.relatedTransactionId = relatedTransactionId;
    this.relatedTransactionIdIsSet = true;
  }
  public boolean isRelatedTransactionIdSet() {
    return relatedTransactionIdIsSet;
  }


  public LoyaltyCardTransaction createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Timestamp representing the date and time when the transaction was created. The value is shown in the ISO 8601 format.
   * @return createdAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    this.createdAtIsSet = true;
  }
  public boolean isCreatedAtSet() {
    return createdAtIsSet;
  }


  public LoyaltyCardTransaction details(LoyaltyCardTransactionDetails details) {
    
    this.details = details;
    return this;
  }

   /**
   * Get details
   * @return details
  **/
  @javax.annotation.Nullable
  public LoyaltyCardTransactionDetails getDetails() {
    return details;
  }


  public void setDetails(LoyaltyCardTransactionDetails details) {
    this.details = details;
    this.detailsIsSet = true;
  }
  public boolean isDetailsSet() {
    return detailsIsSet;
  }


  public LoyaltyCardTransaction type(LoyaltyCardTransactionsType type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  public LoyaltyCardTransactionsType getType() {
    return type;
  }


  public void setType(LoyaltyCardTransactionsType type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoyaltyCardTransaction loyaltyCardTransaction = (LoyaltyCardTransaction) o;
    return Objects.equals(this.id, loyaltyCardTransaction.id) &&
        Objects.equals(this.sourceId, loyaltyCardTransaction.sourceId) &&
        Objects.equals(this.voucherId, loyaltyCardTransaction.voucherId) &&
        Objects.equals(this.campaignId, loyaltyCardTransaction.campaignId) &&
        Objects.equals(this.source, loyaltyCardTransaction.source) &&
        Objects.equals(this.reason, loyaltyCardTransaction.reason) &&
        Objects.equals(this.relatedTransactionId, loyaltyCardTransaction.relatedTransactionId) &&
        Objects.equals(this.createdAt, loyaltyCardTransaction.createdAt) &&
        Objects.equals(this.details, loyaltyCardTransaction.details) &&
        Objects.equals(this.type, loyaltyCardTransaction.type);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, sourceId, voucherId, campaignId, source, reason, relatedTransactionId, createdAt, details, type);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoyaltyCardTransaction {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
    sb.append("    voucherId: ").append(toIndentedString(voucherId)).append("\n");
    sb.append("    campaignId: ").append(toIndentedString(campaignId)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    relatedTransactionId: ").append(toIndentedString(relatedTransactionId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("source_id");
    openapiFields.add("voucher_id");
    openapiFields.add("campaign_id");
    openapiFields.add("source");
    openapiFields.add("reason");
    openapiFields.add("related_transaction_id");
    openapiFields.add("created_at");
    openapiFields.add("details");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LoyaltyCardTransaction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LoyaltyCardTransaction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LoyaltyCardTransaction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LoyaltyCardTransaction.class));

       return (TypeAdapter<T>) new TypeAdapter<LoyaltyCardTransaction>() {
           @Override
           public void write(JsonWriter out, LoyaltyCardTransaction value) throws IOException {

            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();

              // 1. Strip all nulls and internal "isSet" markers
              obj.entrySet().removeIf(entry -> entry.getValue().isJsonNull() || entry.getKey().endsWith("IsSet"));

              // 2. Add back explicitly set nulls using reflection
              for (Field field : LoyaltyCardTransaction.class.getDeclaredFields()) {
                String fieldName = field.getName();
                if (fieldName.endsWith("IsSet")) continue;

                try {
                  Field isSetField = LoyaltyCardTransaction.class.getDeclaredField(fieldName + "IsSet");
                  isSetField.setAccessible(true);
                  boolean isSet = (boolean) isSetField.get(value);

                  field.setAccessible(true);
                  Object fieldValue = field.get(value);

                  if (isSet && fieldValue == null) {
                    // convert camelCase to snake_case (OpenAPI property names are snake_case)
                    String jsonName = fieldName.replaceAll("([a-z])([A-Z]+)", "$1_$2").toLowerCase();
                    obj.add(jsonName, JsonNull.INSTANCE);
                  }
                } catch (NoSuchFieldException ignored) {
                  // no isSet marker → skip
                } catch (IllegalAccessException e) {
                  throw new RuntimeException(e);
                }
              }

             elementAdapter.write(out, obj);
           }

           @Override
           public LoyaltyCardTransaction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LoyaltyCardTransaction given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LoyaltyCardTransaction
  * @throws IOException if the JSON string is invalid with respect to LoyaltyCardTransaction
  */
  public static LoyaltyCardTransaction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LoyaltyCardTransaction.class);
  }

 /**
  * Convert an instance of LoyaltyCardTransaction to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

