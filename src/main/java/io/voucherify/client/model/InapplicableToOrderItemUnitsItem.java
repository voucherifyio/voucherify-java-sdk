/*
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.voucherify.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.voucherify.client.JSON;

/**
 * InapplicableToOrderItemUnitsItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class InapplicableToOrderItemUnitsItem {
  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private Integer index;

  public static final String SERIALIZED_NAME_UNITS = "units";
  @SerializedName(SERIALIZED_NAME_UNITS)
  private List<Integer> units;

  public static final String SERIALIZED_NAME_UNITS_LIMIT_EXCEEDED = "units_limit_exceeded";
  @SerializedName(SERIALIZED_NAME_UNITS_LIMIT_EXCEEDED)
  private Boolean unitsLimitExceeded;

  public InapplicableToOrderItemUnitsItem() {
  }

  public InapplicableToOrderItemUnitsItem index(Integer index) {
    
    this.index = index;
    return this;
  }

   /**
   * Number assigned to the order line item in accordance with the order sent in the request.
   * minimum: 0
   * @return index
  **/
  @javax.annotation.Nullable
  public Integer getIndex() {
    return index;
  }


  public void setIndex(Integer index) {
    this.index = index;
  }


  public InapplicableToOrderItemUnitsItem units(List<Integer> units) {
    
    this.units = units;
    return this;
  }

  public InapplicableToOrderItemUnitsItem addUnitsItem(Integer unitsItem) {
    if (this.units == null) {
      this.units = new ArrayList<>();
    }
    this.units.add(unitsItem);
    return this;
  }

   /**
   * Numbers of units in the order line covered by the discount; e.g. &#x60;2, 5, 8&#x60; for 10 units with the setting &#x60;\&quot;skip_initially\&quot;: 1&#x60;, &#x60;\&quot;repeat\&quot;: 3&#x60;. The counting of units starts from &#x60;1&#x60;. The maximum quantity of all handled units is 1000. If the quantity of all order items exceeds 1000, this array is not returned, but &#x60;units_limit_exceeded: true&#x60;. However, the discount is calculated properly for all relevant units.
   * @return units
  **/
  @javax.annotation.Nullable
  public List<Integer> getUnits() {
    return units;
  }


  public void setUnits(List<Integer> units) {
    this.units = units;
  }


  public InapplicableToOrderItemUnitsItem unitsLimitExceeded(Boolean unitsLimitExceeded) {
    
    this.unitsLimitExceeded = unitsLimitExceeded;
    return this;
  }

   /**
   * Returned as &#x60;true&#x60; only when the sum total of &#x60;quantity&#x60; of all order items exceeds 1000.
   * @return unitsLimitExceeded
  **/
  @javax.annotation.Nullable
  public Boolean getUnitsLimitExceeded() {
    return unitsLimitExceeded;
  }


  public void setUnitsLimitExceeded(Boolean unitsLimitExceeded) {
    this.unitsLimitExceeded = unitsLimitExceeded;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InapplicableToOrderItemUnitsItem inapplicableToOrderItemUnitsItem = (InapplicableToOrderItemUnitsItem) o;
    return Objects.equals(this.index, inapplicableToOrderItemUnitsItem.index) &&
        Objects.equals(this.units, inapplicableToOrderItemUnitsItem.units) &&
        Objects.equals(this.unitsLimitExceeded, inapplicableToOrderItemUnitsItem.unitsLimitExceeded);
  }

  @Override
  public int hashCode() {
    return Objects.hash(index, units, unitsLimitExceeded);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InapplicableToOrderItemUnitsItem {\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("    unitsLimitExceeded: ").append(toIndentedString(unitsLimitExceeded)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("index");
    openapiFields.add("units");
    openapiFields.add("units_limit_exceeded");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InapplicableToOrderItemUnitsItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InapplicableToOrderItemUnitsItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InapplicableToOrderItemUnitsItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InapplicableToOrderItemUnitsItem.class));

       return (TypeAdapter<T>) new TypeAdapter<InapplicableToOrderItemUnitsItem>() {
           @Override
           public void write(JsonWriter out, InapplicableToOrderItemUnitsItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InapplicableToOrderItemUnitsItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of InapplicableToOrderItemUnitsItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InapplicableToOrderItemUnitsItem
  * @throws IOException if the JSON string is invalid with respect to InapplicableToOrderItemUnitsItem
  */
  public static InapplicableToOrderItemUnitsItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InapplicableToOrderItemUnitsItem.class);
  }

 /**
  * Convert an instance of InapplicableToOrderItemUnitsItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

