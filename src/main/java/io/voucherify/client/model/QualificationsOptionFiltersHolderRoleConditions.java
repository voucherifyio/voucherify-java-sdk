/*
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.voucherify.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.voucherify.client.JSON;

/**
 * Data filters used to narrow the data records to be returned in the result.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class QualificationsOptionFiltersHolderRoleConditions {
  /**
   * Gets or Sets $is
   */
  @JsonAdapter(IsEnum.Adapter.class)
  public enum IsEnum {
    OWNER("OWNER"),
    
    REFERRER("REFERRER"),
    
    REFEREE("REFEREE");

    private String value;

    IsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IsEnum fromValue(String value) {
      for (IsEnum b : IsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
        return null;
    }

    public static class Adapter extends TypeAdapter<IsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_$_IS = "$is";
  @SerializedName(SERIALIZED_NAME_$_IS)
  private List<IsEnum> $is;

  /**
   * Gets or Sets $isNot
   */
  @JsonAdapter(IsNotEnum.Adapter.class)
  public enum IsNotEnum {
    OWNER("OWNER"),
    
    REFERRER("REFERRER"),
    
    REFEREE("REFEREE");

    private String value;

    IsNotEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IsNotEnum fromValue(String value) {
      for (IsNotEnum b : IsNotEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
        return null;
    }

    public static class Adapter extends TypeAdapter<IsNotEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IsNotEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IsNotEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IsNotEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_$_IS_NOT = "$is_not";
  @SerializedName(SERIALIZED_NAME_$_IS_NOT)
  private List<IsNotEnum> $isNot;

  /**
   * Gets or Sets $in
   */
  @JsonAdapter(InEnum.Adapter.class)
  public enum InEnum {
    OWNER("OWNER"),
    
    REFERRER("REFERRER"),
    
    REFEREE("REFEREE");

    private String value;

    InEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InEnum fromValue(String value) {
      for (InEnum b : InEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
        return null;
    }

    public static class Adapter extends TypeAdapter<InEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_$_IN = "$in";
  @SerializedName(SERIALIZED_NAME_$_IN)
  private List<InEnum> $in;

  /**
   * Gets or Sets $notIn
   */
  @JsonAdapter(NotInEnum.Adapter.class)
  public enum NotInEnum {
    OWNER("OWNER"),
    
    REFERRER("REFERRER"),
    
    REFEREE("REFEREE");

    private String value;

    NotInEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NotInEnum fromValue(String value) {
      for (NotInEnum b : NotInEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
        return null;
    }

    public static class Adapter extends TypeAdapter<NotInEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NotInEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NotInEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NotInEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_$_NOT_IN = "$not_in";
  @SerializedName(SERIALIZED_NAME_$_NOT_IN)
  private List<NotInEnum> $notIn;

  public QualificationsOptionFiltersHolderRoleConditions() {
  }

  public QualificationsOptionFiltersHolderRoleConditions $is(List<IsEnum> $is) {
    
    this.$is = $is;
    return this;
  }

  public QualificationsOptionFiltersHolderRoleConditions add$IsItem(IsEnum $isItem) {
    if (this.$is == null) {
      this.$is = new ArrayList<>();
    }
    this.$is.add($isItem);
    return this;
  }

   /**
   * Will return records only for the first value in the array.
   * @return $is
  **/
  @javax.annotation.Nullable
  public List<IsEnum> get$Is() {
    return $is;
  }


  public void set$Is(List<IsEnum> $is) {
    this.$is = $is;
  }


  public QualificationsOptionFiltersHolderRoleConditions $isNot(List<IsNotEnum> $isNot) {
    
    this.$isNot = $isNot;
    return this;
  }

  public QualificationsOptionFiltersHolderRoleConditions add$IsNotItem(IsNotEnum $isNotItem) {
    if (this.$isNot == null) {
      this.$isNot = new ArrayList<>();
    }
    this.$isNot.add($isNotItem);
    return this;
  }

   /**
   * Will return records only for the first value in the array.
   * @return $isNot
  **/
  @javax.annotation.Nullable
  public List<IsNotEnum> get$IsNot() {
    return $isNot;
  }


  public void set$IsNot(List<IsNotEnum> $isNot) {
    this.$isNot = $isNot;
  }


  public QualificationsOptionFiltersHolderRoleConditions $in(List<InEnum> $in) {
    
    this.$in = $in;
    return this;
  }

  public QualificationsOptionFiltersHolderRoleConditions add$InItem(InEnum $inItem) {
    if (this.$in == null) {
      this.$in = new ArrayList<>();
    }
    this.$in.add($inItem);
    return this;
  }

   /**
   * Will return records for the values in the array.
   * @return $in
  **/
  @javax.annotation.Nullable
  public List<InEnum> get$In() {
    return $in;
  }


  public void set$In(List<InEnum> $in) {
    this.$in = $in;
  }


  public QualificationsOptionFiltersHolderRoleConditions $notIn(List<NotInEnum> $notIn) {
    
    this.$notIn = $notIn;
    return this;
  }

  public QualificationsOptionFiltersHolderRoleConditions add$NotInItem(NotInEnum $notInItem) {
    if (this.$notIn == null) {
      this.$notIn = new ArrayList<>();
    }
    this.$notIn.add($notInItem);
    return this;
  }

   /**
   * Will return records for the values in the array.
   * @return $notIn
  **/
  @javax.annotation.Nullable
  public List<NotInEnum> get$NotIn() {
    return $notIn;
  }


  public void set$NotIn(List<NotInEnum> $notIn) {
    this.$notIn = $notIn;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the QualificationsOptionFiltersHolderRoleConditions instance itself
   */
  public QualificationsOptionFiltersHolderRoleConditions putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QualificationsOptionFiltersHolderRoleConditions qualificationsOptionFiltersHolderRoleConditions = (QualificationsOptionFiltersHolderRoleConditions) o;
    return Objects.equals(this.$is, qualificationsOptionFiltersHolderRoleConditions.$is) &&
        Objects.equals(this.$isNot, qualificationsOptionFiltersHolderRoleConditions.$isNot) &&
        Objects.equals(this.$in, qualificationsOptionFiltersHolderRoleConditions.$in) &&
        Objects.equals(this.$notIn, qualificationsOptionFiltersHolderRoleConditions.$notIn)&&
        Objects.equals(this.additionalProperties, qualificationsOptionFiltersHolderRoleConditions.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash($is, $isNot, $in, $notIn, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QualificationsOptionFiltersHolderRoleConditions {\n");
    sb.append("    $is: ").append(toIndentedString($is)).append("\n");
    sb.append("    $isNot: ").append(toIndentedString($isNot)).append("\n");
    sb.append("    $in: ").append(toIndentedString($in)).append("\n");
    sb.append("    $notIn: ").append(toIndentedString($notIn)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("$is");
    openapiFields.add("$is_not");
    openapiFields.add("$in");
    openapiFields.add("$not_in");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QualificationsOptionFiltersHolderRoleConditions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QualificationsOptionFiltersHolderRoleConditions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QualificationsOptionFiltersHolderRoleConditions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QualificationsOptionFiltersHolderRoleConditions.class));

       return (TypeAdapter<T>) new TypeAdapter<QualificationsOptionFiltersHolderRoleConditions>() {
           @Override
           public void write(JsonWriter out, QualificationsOptionFiltersHolderRoleConditions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public QualificationsOptionFiltersHolderRoleConditions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             QualificationsOptionFiltersHolderRoleConditions instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     return null;
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of QualificationsOptionFiltersHolderRoleConditions given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of QualificationsOptionFiltersHolderRoleConditions
  * @throws IOException if the JSON string is invalid with respect to QualificationsOptionFiltersHolderRoleConditions
  */
  public static QualificationsOptionFiltersHolderRoleConditions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QualificationsOptionFiltersHolderRoleConditions.class);
  }

 /**
  * Convert an instance of QualificationsOptionFiltersHolderRoleConditions to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

