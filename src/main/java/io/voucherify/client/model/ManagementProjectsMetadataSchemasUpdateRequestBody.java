/*
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.voucherify.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.voucherify.client.model.ManagementProjectsMetadataSchemaDefinition;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.voucherify.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class ManagementProjectsMetadataSchemasUpdateRequestBody {
  public static final String SERIALIZED_NAME_ALLOW_DEFINED_ONLY = "allow_defined_only";
  @SerializedName(SERIALIZED_NAME_ALLOW_DEFINED_ONLY)
  private Boolean allowDefinedOnly;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, ManagementProjectsMetadataSchemaDefinition> properties;

  public ManagementProjectsMetadataSchemasUpdateRequestBody() {
  }

  public ManagementProjectsMetadataSchemasUpdateRequestBody allowDefinedOnly(Boolean allowDefinedOnly) {
    
    this.allowDefinedOnly = allowDefinedOnly;
    return this;
  }

   /**
   * Restricts the creation of metadata fields when set to &#x60;true&#x60;. In other words, it indicates whether or not you are allowed to create new metadata definitions; for example, in the campaign manager or publication manager. If it is set to true, then only the defined fields will be available for assigning values. 
   * @return allowDefinedOnly
  **/
  @javax.annotation.Nullable
  public Boolean getAllowDefinedOnly() {
    return allowDefinedOnly;
  }


  public void setAllowDefinedOnly(Boolean allowDefinedOnly) {
    this.allowDefinedOnly = allowDefinedOnly;
  }


  public ManagementProjectsMetadataSchemasUpdateRequestBody properties(Map<String, ManagementProjectsMetadataSchemaDefinition> properties) {
    
    this.properties = properties;
    return this;
  }

  public ManagementProjectsMetadataSchemasUpdateRequestBody putPropertiesItem(String key, ManagementProjectsMetadataSchemaDefinition propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * Contains metadata definitions. There can be many properties within this object.  Only the properties sent in the request will be updated. However, if you send a property, all its key-value pairs must be provided - otherwise, they will be overwritten to new values.  You cannot change the &#x60;\&quot;type\&quot;&#x60; property. However, it is required, so you need to add it to the request.
   * @return properties
  **/
  @javax.annotation.Nullable
  public Map<String, ManagementProjectsMetadataSchemaDefinition> getProperties() {
    return properties;
  }


  public void setProperties(Map<String, ManagementProjectsMetadataSchemaDefinition> properties) {
    this.properties = properties;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ManagementProjectsMetadataSchemasUpdateRequestBody managementProjectsMetadataSchemasUpdateRequestBody = (ManagementProjectsMetadataSchemasUpdateRequestBody) o;
    return Objects.equals(this.allowDefinedOnly, managementProjectsMetadataSchemasUpdateRequestBody.allowDefinedOnly) &&
        Objects.equals(this.properties, managementProjectsMetadataSchemasUpdateRequestBody.properties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowDefinedOnly, properties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ManagementProjectsMetadataSchemasUpdateRequestBody {\n");
    sb.append("    allowDefinedOnly: ").append(toIndentedString(allowDefinedOnly)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allow_defined_only");
    openapiFields.add("properties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ManagementProjectsMetadataSchemasUpdateRequestBody.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ManagementProjectsMetadataSchemasUpdateRequestBody' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ManagementProjectsMetadataSchemasUpdateRequestBody> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ManagementProjectsMetadataSchemasUpdateRequestBody.class));

       return (TypeAdapter<T>) new TypeAdapter<ManagementProjectsMetadataSchemasUpdateRequestBody>() {
           @Override
           public void write(JsonWriter out, ManagementProjectsMetadataSchemasUpdateRequestBody value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ManagementProjectsMetadataSchemasUpdateRequestBody read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ManagementProjectsMetadataSchemasUpdateRequestBody given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ManagementProjectsMetadataSchemasUpdateRequestBody
  * @throws IOException if the JSON string is invalid with respect to ManagementProjectsMetadataSchemasUpdateRequestBody
  */
  public static ManagementProjectsMetadataSchemasUpdateRequestBody fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ManagementProjectsMetadataSchemasUpdateRequestBody.class);
  }

 /**
  * Convert an instance of ManagementProjectsMetadataSchemasUpdateRequestBody to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

