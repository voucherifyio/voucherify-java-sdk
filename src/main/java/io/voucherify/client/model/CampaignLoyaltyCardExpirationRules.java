/*
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.voucherify.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.voucherify.client.JSON;

/**
 * Defines the loyalty point expiration rule. This expiration rule applies when there are no &#x60;expiration_rules&#x60; defined for an earning rule.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class CampaignLoyaltyCardExpirationRules {
  /**
   * Type of period. Currently, only &#x60;MONTH&#x60; is allowed.
   */
  @JsonAdapter(PeriodTypeEnum.Adapter.class)
  public enum PeriodTypeEnum {
    MONTH("MONTH");

    private String value;

    PeriodTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PeriodTypeEnum fromValue(String value) {
      for (PeriodTypeEnum b : PeriodTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
        return null;
    }

    public static class Adapter extends TypeAdapter<PeriodTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PeriodTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PeriodTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PeriodTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PERIOD_TYPE = "period_type";
  @SerializedName(SERIALIZED_NAME_PERIOD_TYPE)
  private PeriodTypeEnum periodType = PeriodTypeEnum.MONTH;

  public static final String SERIALIZED_NAME_PERIOD_VALUE = "period_value";
  @SerializedName(SERIALIZED_NAME_PERIOD_VALUE)
  private Integer periodValue;

  /**
   * Type of rounding of the expiration period.
   */
  @JsonAdapter(RoundingTypeEnum.Adapter.class)
  public enum RoundingTypeEnum {
    END_OF_MONTH("END_OF_MONTH"),
    
    END_OF_QUARTER("END_OF_QUARTER"),
    
    END_OF_HALF_YEAR("END_OF_HALF_YEAR"),
    
    END_OF_YEAR("END_OF_YEAR"),
    
    PARTICULAR_MONTH("PARTICULAR_MONTH");

    private String value;

    RoundingTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RoundingTypeEnum fromValue(String value) {
      for (RoundingTypeEnum b : RoundingTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
        return null;
    }

    public static class Adapter extends TypeAdapter<RoundingTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RoundingTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RoundingTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RoundingTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ROUNDING_TYPE = "rounding_type";
  @SerializedName(SERIALIZED_NAME_ROUNDING_TYPE)
  private RoundingTypeEnum roundingType;

  public static final String SERIALIZED_NAME_ROUNDING_VALUE = "rounding_value";
  @SerializedName(SERIALIZED_NAME_ROUNDING_VALUE)
  private Integer roundingValue;

  public CampaignLoyaltyCardExpirationRules() {
  }

  public CampaignLoyaltyCardExpirationRules periodType(PeriodTypeEnum periodType) {
    
    this.periodType = periodType;
    return this;
  }

   /**
   * Type of period. Currently, only &#x60;MONTH&#x60; is allowed.
   * @return periodType
  **/
  @javax.annotation.Nullable
  public PeriodTypeEnum getPeriodType() {
    return periodType;
  }


  public void setPeriodType(PeriodTypeEnum periodType) {
    this.periodType = periodType;
  }


  public CampaignLoyaltyCardExpirationRules periodValue(Integer periodValue) {
    
    this.periodValue = periodValue;
    return this;
  }

   /**
   * Value of the period.
   * @return periodValue
  **/
  @javax.annotation.Nullable
  public Integer getPeriodValue() {
    return periodValue;
  }


  public void setPeriodValue(Integer periodValue) {
    this.periodValue = periodValue;
  }


  public CampaignLoyaltyCardExpirationRules roundingType(RoundingTypeEnum roundingType) {
    
    this.roundingType = roundingType;
    return this;
  }

   /**
   * Type of rounding of the expiration period.
   * @return roundingType
  **/
  @javax.annotation.Nullable
  public RoundingTypeEnum getRoundingType() {
    return roundingType;
  }


  public void setRoundingType(RoundingTypeEnum roundingType) {
    this.roundingType = roundingType;
  }


  public CampaignLoyaltyCardExpirationRules roundingValue(Integer roundingValue) {
    
    this.roundingValue = roundingValue;
    return this;
  }

   /**
   * Value of rounding of the expiration period.
   * @return roundingValue
  **/
  @javax.annotation.Nullable
  public Integer getRoundingValue() {
    return roundingValue;
  }


  public void setRoundingValue(Integer roundingValue) {
    this.roundingValue = roundingValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CampaignLoyaltyCardExpirationRules campaignLoyaltyCardExpirationRules = (CampaignLoyaltyCardExpirationRules) o;
    return Objects.equals(this.periodType, campaignLoyaltyCardExpirationRules.periodType) &&
        Objects.equals(this.periodValue, campaignLoyaltyCardExpirationRules.periodValue) &&
        Objects.equals(this.roundingType, campaignLoyaltyCardExpirationRules.roundingType) &&
        Objects.equals(this.roundingValue, campaignLoyaltyCardExpirationRules.roundingValue);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(periodType, periodValue, roundingType, roundingValue);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CampaignLoyaltyCardExpirationRules {\n");
    sb.append("    periodType: ").append(toIndentedString(periodType)).append("\n");
    sb.append("    periodValue: ").append(toIndentedString(periodValue)).append("\n");
    sb.append("    roundingType: ").append(toIndentedString(roundingType)).append("\n");
    sb.append("    roundingValue: ").append(toIndentedString(roundingValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("period_type");
    openapiFields.add("period_value");
    openapiFields.add("rounding_type");
    openapiFields.add("rounding_value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CampaignLoyaltyCardExpirationRules.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CampaignLoyaltyCardExpirationRules' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CampaignLoyaltyCardExpirationRules> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CampaignLoyaltyCardExpirationRules.class));

       return (TypeAdapter<T>) new TypeAdapter<CampaignLoyaltyCardExpirationRules>() {
           @Override
           public void write(JsonWriter out, CampaignLoyaltyCardExpirationRules value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CampaignLoyaltyCardExpirationRules read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CampaignLoyaltyCardExpirationRules given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CampaignLoyaltyCardExpirationRules
  * @throws IOException if the JSON string is invalid with respect to CampaignLoyaltyCardExpirationRules
  */
  public static CampaignLoyaltyCardExpirationRules fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CampaignLoyaltyCardExpirationRules.class);
  }

 /**
  * Convert an instance of CampaignLoyaltyCardExpirationRules to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

