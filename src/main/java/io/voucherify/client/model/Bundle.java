/*
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.voucherify.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.voucherify.client.model.BundleIdentifiedItem;
import io.voucherify.client.model.BundleMissingItem;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.voucherify.client.JSON;

/**
 * Determines how the bundle conditions are met by the customer&#39;s order items. The items in the order meet the bundle condition in the following way: SKU, then product, then collection.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class Bundle {
  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Integer quantity;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit;

  public static final String SERIALIZED_NAME_IDENTIFIED = "identified";
  @SerializedName(SERIALIZED_NAME_IDENTIFIED)
  private List<BundleIdentifiedItem> identified;

  public static final String SERIALIZED_NAME_MISSING = "missing";
  @SerializedName(SERIALIZED_NAME_MISSING)
  private List<BundleMissingItem> missing;

  public Bundle() {
  }

  public Bundle quantity(Integer quantity) {
    
    this.quantity = quantity;
    return this;
  }

   /**
   * Determines how many bundles are qualified. If there are missing bundle products, the value is &#x60;0&#x60;. If the bundle is qualified, the value is &#x60;1&#x60;. The maximum number of identified bundles can equal the number set in &#x60;limit&#x60;. Also defines the multiplier of the discount for &#x60;AMOUNT&#x60;, &#x60;PERCENT&#x60;, and &#x60;UNIT&#x60; discount types. To inform end-customers that more products can be added to meet additional bundles, compare this parameter with &#x60;limit&#x60;.
   * minimum: 0
   * maximum: 100
   * @return quantity
  **/
  @javax.annotation.Nullable
  public Integer getQuantity() {
    return quantity;
  }


  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }


  public Bundle limit(Integer limit) {
    
    this.limit = limit;
    return this;
  }

   /**
   * Determines the maximum number of identified bundles. This also defines the maximum multiplier of the bundle discount.
   * minimum: 1
   * maximum: 100
   * @return limit
  **/
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }


  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  public Bundle identified(List<BundleIdentifiedItem> identified) {
    
    this.identified = identified;
    return this;
  }

  public Bundle addIdentifiedItem(BundleIdentifiedItem identifiedItem) {
    if (this.identified == null) {
      this.identified = new ArrayList<>();
    }
    this.identified.add(identifiedItem);
    return this;
  }

   /**
   * Determines products from the customer&#39;s order items that meet bundle conditions. SKUs meet the conditions for their product that is used in the bundle. Returns only the products and their quantity that meet the bundle.
   * @return identified
  **/
  @javax.annotation.Nullable
  public List<BundleIdentifiedItem> getIdentified() {
    return identified;
  }


  public void setIdentified(List<BundleIdentifiedItem> identified) {
    this.identified = identified;
  }


  public Bundle missing(List<BundleMissingItem> missing) {
    
    this.missing = missing;
    return this;
  }

  public Bundle addMissingItem(BundleMissingItem missingItem) {
    if (this.missing == null) {
      this.missing = new ArrayList<>();
    }
    this.missing.add(missingItem);
    return this;
  }

   /**
   * Determines products, SKUs, or collections from the bundle that are missing in the customer&#39;s order items. Determines also the missing quantity. For collections, this means that order items do not include a sufficient number of items that belong to the collection. Not returned when all required bundle items are in the order.
   * @return missing
  **/
  @javax.annotation.Nullable
  public List<BundleMissingItem> getMissing() {
    return missing;
  }


  public void setMissing(List<BundleMissingItem> missing) {
    this.missing = missing;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Bundle bundle = (Bundle) o;
    return Objects.equals(this.quantity, bundle.quantity) &&
        Objects.equals(this.limit, bundle.limit) &&
        Objects.equals(this.identified, bundle.identified) &&
        Objects.equals(this.missing, bundle.missing);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(quantity, limit, identified, missing);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Bundle {\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    identified: ").append(toIndentedString(identified)).append("\n");
    sb.append("    missing: ").append(toIndentedString(missing)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("quantity");
    openapiFields.add("limit");
    openapiFields.add("identified");
    openapiFields.add("missing");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Bundle.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Bundle' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Bundle> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Bundle.class));

       return (TypeAdapter<T>) new TypeAdapter<Bundle>() {
           @Override
           public void write(JsonWriter out, Bundle value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Bundle read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Bundle given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Bundle
  * @throws IOException if the JSON string is invalid with respect to Bundle
  */
  public static Bundle fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Bundle.class);
  }

 /**
  * Convert an instance of Bundle to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

