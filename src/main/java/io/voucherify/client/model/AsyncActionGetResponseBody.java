/*
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.voucherify.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.voucherify.client.JSON;

/**
 * Response body schema for **GET** &#x60;v1/async-actions/{asyncActionId}&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class AsyncActionGetResponseBody {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  /**
   * Status of the async action. Informs you whether the async action has already been completed.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    DONE("DONE"),
    
    ENQUEUED("ENQUEUED"),
    
    FAILED("FAILED"),
    
    IN_PROGRESS("IN_PROGRESS");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
        return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  /**
   * Status of async action processing. Informs about the async action status, whether it failed, succeeded, or the status is unknown.
   */
  @JsonAdapter(OperationStatusEnum.Adapter.class)
  public enum OperationStatusEnum {
    FAILED("FAILED"),
    
    SUCCESS("SUCCESS"),
    
    UNKNOWN("UNKNOWN");

    private String value;

    OperationStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OperationStatusEnum fromValue(String value) {
      for (OperationStatusEnum b : OperationStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
        return null;
    }

    public static class Adapter extends TypeAdapter<OperationStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperationStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperationStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OperationStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OPERATION_STATUS = "operation_status";
  @SerializedName(SERIALIZED_NAME_OPERATION_STATUS)
  private OperationStatusEnum operationStatus;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_REQUEST_ID = "request_id";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public static final String SERIALIZED_NAME_PROCESSING_TIME = "processing_time";
  @SerializedName(SERIALIZED_NAME_PROCESSING_TIME)
  private Integer processingTime;

  public static final String SERIALIZED_NAME_PROGRESS = "progress";
  @SerializedName(SERIALIZED_NAME_PROGRESS)
  private Integer progress;

  /**
   * The type of the object represented by JSON. This object stores information about the &#x60;async_action&#x60;.
   */
  @JsonAdapter(ObjectEnum.Adapter.class)
  public enum ObjectEnum {
    ASYNC_ACTION("async_action");

    private String value;

    ObjectEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ObjectEnum fromValue(String value) {
      for (ObjectEnum b : ObjectEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
        return null;
    }

    public static class Adapter extends TypeAdapter<ObjectEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ObjectEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ObjectEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ObjectEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private ObjectEnum _object = ObjectEnum.ASYNC_ACTION;

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private Object result;

  public AsyncActionGetResponseBody() {
  }

  public AsyncActionGetResponseBody id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Async action unique ID.
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public AsyncActionGetResponseBody type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Type of async action.
   * @return type
  **/
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public AsyncActionGetResponseBody status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * Status of the async action. Informs you whether the async action has already been completed.
   * @return status
  **/
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public AsyncActionGetResponseBody operationStatus(OperationStatusEnum operationStatus) {
    
    this.operationStatus = operationStatus;
    return this;
  }

   /**
   * Status of async action processing. Informs about the async action status, whether it failed, succeeded, or the status is unknown.
   * @return operationStatus
  **/
  @javax.annotation.Nullable
  public OperationStatusEnum getOperationStatus() {
    return operationStatus;
  }


  public void setOperationStatus(OperationStatusEnum operationStatus) {
    this.operationStatus = operationStatus;
  }


  public AsyncActionGetResponseBody createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Timestamp representing the date and time when the async action was scheduled in ISO 8601 format.
   * @return createdAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public AsyncActionGetResponseBody updatedAt(OffsetDateTime updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Timestamp representing the date and time when the async action was updated. The value is shown in the ISO 8601 format.
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public AsyncActionGetResponseBody requestId(String requestId) {
    
    this.requestId = requestId;
    return this;
  }

   /**
   * Unique request ID.
   * @return requestId
  **/
  @javax.annotation.Nullable
  public String getRequestId() {
    return requestId;
  }


  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public AsyncActionGetResponseBody processingTime(Integer processingTime) {
    
    this.processingTime = processingTime;
    return this;
  }

   /**
   * The length of time it took to process the request in milliseconds.
   * @return processingTime
  **/
  @javax.annotation.Nullable
  public Integer getProcessingTime() {
    return processingTime;
  }


  public void setProcessingTime(Integer processingTime) {
    this.processingTime = processingTime;
  }


  public AsyncActionGetResponseBody progress(Integer progress) {
    
    this.progress = progress;
    return this;
  }

   /**
   * % progress to completion of the asynchronous action.
   * minimum: 0
   * maximum: 100
   * @return progress
  **/
  @javax.annotation.Nullable
  public Integer getProgress() {
    return progress;
  }


  public void setProgress(Integer progress) {
    this.progress = progress;
  }


  public AsyncActionGetResponseBody _object(ObjectEnum _object) {
    
    this._object = _object;
    return this;
  }

   /**
   * The type of the object represented by JSON. This object stores information about the &#x60;async_action&#x60;.
   * @return _object
  **/
  @javax.annotation.Nullable
  public ObjectEnum getObject() {
    return _object;
  }


  public void setObject(ObjectEnum _object) {
    this._object = _object;
  }


  public AsyncActionGetResponseBody result(Object result) {
    
    this.result = result;
    return this;
  }

   /**
   * Get result
   * @return result
  **/
  @javax.annotation.Nullable
  public Object getResult() {
    return result;
  }


  public void setResult(Object result) {
    this.result = result;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AsyncActionGetResponseBody asyncActionGetResponseBody = (AsyncActionGetResponseBody) o;
    return Objects.equals(this.id, asyncActionGetResponseBody.id) &&
        Objects.equals(this.type, asyncActionGetResponseBody.type) &&
        Objects.equals(this.status, asyncActionGetResponseBody.status) &&
        Objects.equals(this.operationStatus, asyncActionGetResponseBody.operationStatus) &&
        Objects.equals(this.createdAt, asyncActionGetResponseBody.createdAt) &&
        Objects.equals(this.updatedAt, asyncActionGetResponseBody.updatedAt) &&
        Objects.equals(this.requestId, asyncActionGetResponseBody.requestId) &&
        Objects.equals(this.processingTime, asyncActionGetResponseBody.processingTime) &&
        Objects.equals(this.progress, asyncActionGetResponseBody.progress) &&
        Objects.equals(this._object, asyncActionGetResponseBody._object) &&
        Objects.equals(this.result, asyncActionGetResponseBody.result);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, status, operationStatus, createdAt, updatedAt, requestId, processingTime, progress, _object, result);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AsyncActionGetResponseBody {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    operationStatus: ").append(toIndentedString(operationStatus)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    processingTime: ").append(toIndentedString(processingTime)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("type");
    openapiFields.add("status");
    openapiFields.add("operation_status");
    openapiFields.add("created_at");
    openapiFields.add("updated_at");
    openapiFields.add("request_id");
    openapiFields.add("processing_time");
    openapiFields.add("progress");
    openapiFields.add("object");
    openapiFields.add("result");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AsyncActionGetResponseBody.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AsyncActionGetResponseBody' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AsyncActionGetResponseBody> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AsyncActionGetResponseBody.class));

       return (TypeAdapter<T>) new TypeAdapter<AsyncActionGetResponseBody>() {
           @Override
           public void write(JsonWriter out, AsyncActionGetResponseBody value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AsyncActionGetResponseBody read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AsyncActionGetResponseBody given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AsyncActionGetResponseBody
  * @throws IOException if the JSON string is invalid with respect to AsyncActionGetResponseBody
  */
  public static AsyncActionGetResponseBody fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AsyncActionGetResponseBody.class);
  }

 /**
  * Convert an instance of AsyncActionGetResponseBody to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

