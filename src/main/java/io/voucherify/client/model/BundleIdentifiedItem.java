/*
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.voucherify.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.voucherify.client.JSON;

/**
 * Determines a product from the customer&#39;s order items that meets bundle conditions.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class BundleIdentifiedItem {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  /**
   * Determines the type of the object that meets the bundle condition.
   */
  @JsonAdapter(ObjectEnum.Adapter.class)
  public enum ObjectEnum {
    PRODUCT("product"),
    
    SKU("sku");

    private String value;

    ObjectEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ObjectEnum fromValue(String value) {
      for (ObjectEnum b : ObjectEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
        return null;
    }

    public static class Adapter extends TypeAdapter<ObjectEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ObjectEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ObjectEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ObjectEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private ObjectEnum _object;

  public static final String SERIALIZED_NAME_ITEM_INDEX = "item_index";
  @SerializedName(SERIALIZED_NAME_ITEM_INDEX)
  private Integer itemIndex;

  public static final String SERIALIZED_NAME_ITEM_QUANTITY = "item_quantity";
  @SerializedName(SERIALIZED_NAME_ITEM_QUANTITY)
  private Integer itemQuantity;

  public BundleIdentifiedItem() {
  }

  public BundleIdentifiedItem id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier of the product or SKU that meets the bundle condition. This is an ID assigned by Voucherify.
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public BundleIdentifiedItem _object(ObjectEnum _object) {
    
    this._object = _object;
    return this;
  }

   /**
   * Determines the type of the object that meets the bundle condition.
   * @return _object
  **/
  @javax.annotation.Nonnull
  public ObjectEnum getObject() {
    return _object;
  }


  public void setObject(ObjectEnum _object) {
    this._object = _object;
  }


  public BundleIdentifiedItem itemIndex(Integer itemIndex) {
    
    this.itemIndex = itemIndex;
    return this;
  }

   /**
   * Number assigned to the order line item in accordance with the order sent in the request. It starts with &#x60;0&#x60; for the first order line item in the request.
   * minimum: 0
   * @return itemIndex
  **/
  @javax.annotation.Nonnull
  public Integer getItemIndex() {
    return itemIndex;
  }


  public void setItemIndex(Integer itemIndex) {
    this.itemIndex = itemIndex;
  }


  public BundleIdentifiedItem itemQuantity(Integer itemQuantity) {
    
    this.itemQuantity = itemQuantity;
    return this;
  }

   /**
   * Quantity of items that meet the bundle conditions. If the quantity in the order is higher than the quantity required by the bundle, this returns only the number that meets the bundle. For example, if the bundle requires &#x60;5&#x60; coffees, but the order includes &#x60;10&#x60; coffees, &#x60;item_quantity&#x60; returns &#x60;5&#x60;.
   * @return itemQuantity
  **/
  @javax.annotation.Nonnull
  public Integer getItemQuantity() {
    return itemQuantity;
  }


  public void setItemQuantity(Integer itemQuantity) {
    this.itemQuantity = itemQuantity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BundleIdentifiedItem bundleIdentifiedItem = (BundleIdentifiedItem) o;
    return Objects.equals(this.id, bundleIdentifiedItem.id) &&
        Objects.equals(this._object, bundleIdentifiedItem._object) &&
        Objects.equals(this.itemIndex, bundleIdentifiedItem.itemIndex) &&
        Objects.equals(this.itemQuantity, bundleIdentifiedItem.itemQuantity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, _object, itemIndex, itemQuantity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BundleIdentifiedItem {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    itemIndex: ").append(toIndentedString(itemIndex)).append("\n");
    sb.append("    itemQuantity: ").append(toIndentedString(itemQuantity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("object");
    openapiFields.add("item_index");
    openapiFields.add("item_quantity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("object");
    openapiRequiredFields.add("item_index");
    openapiRequiredFields.add("item_quantity");
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BundleIdentifiedItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BundleIdentifiedItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BundleIdentifiedItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BundleIdentifiedItem.class));

       return (TypeAdapter<T>) new TypeAdapter<BundleIdentifiedItem>() {
           @Override
           public void write(JsonWriter out, BundleIdentifiedItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BundleIdentifiedItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BundleIdentifiedItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BundleIdentifiedItem
  * @throws IOException if the JSON string is invalid with respect to BundleIdentifiedItem
  */
  public static BundleIdentifiedItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BundleIdentifiedItem.class);
  }

 /**
  * Convert an instance of BundleIdentifiedItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

