/*
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.voucherify.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.voucherify.client.JSON;

/**
 * OrderRedemptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class OrderRedemptions {
  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_ROLLBACK_ID = "rollback_id";
  @SerializedName(SERIALIZED_NAME_ROLLBACK_ID)
  private String rollbackId;

  public static final String SERIALIZED_NAME_ROLLBACK_DATE = "rollback_date";
  @SerializedName(SERIALIZED_NAME_ROLLBACK_DATE)
  private OffsetDateTime rollbackDate;

  public static final String SERIALIZED_NAME_RELATED_OBJECT_TYPE = "related_object_type";
  @SerializedName(SERIALIZED_NAME_RELATED_OBJECT_TYPE)
  private String relatedObjectType = "redemption";

  public static final String SERIALIZED_NAME_RELATED_OBJECT_ID = "related_object_id";
  @SerializedName(SERIALIZED_NAME_RELATED_OBJECT_ID)
  private String relatedObjectId;

  public static final String SERIALIZED_NAME_RELATED_OBJECT_PARENT_ID = "related_object_parent_id";
  @SerializedName(SERIALIZED_NAME_RELATED_OBJECT_PARENT_ID)
  private String relatedObjectParentId;

  public static final String SERIALIZED_NAME_STACKED = "stacked";
  @SerializedName(SERIALIZED_NAME_STACKED)
  private List<String> stacked;

  public static final String SERIALIZED_NAME_ROLLBACK_STACKED = "rollback_stacked";
  @SerializedName(SERIALIZED_NAME_ROLLBACK_STACKED)
  private List<String> rollbackStacked;

  public OrderRedemptions() {
  }

  public OrderRedemptions date(OffsetDateTime date) {
    
    this.date = date;
    return this;
  }

   /**
   * Timestamp representing the date and time when the redemption was created. The value is shown in the ISO 8601 format.
   * @return date
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDate() {
    return date;
  }


  public void setDate(OffsetDateTime date) {
    this.date = date;
  }


  public OrderRedemptions rollbackId(String rollbackId) {
    
    this.rollbackId = rollbackId;
    return this;
  }

   /**
   * Unique ID of the redemption rollback.
   * @return rollbackId
  **/
  @javax.annotation.Nullable
  public String getRollbackId() {
    return rollbackId;
  }


  public void setRollbackId(String rollbackId) {
    this.rollbackId = rollbackId;
  }


  public OrderRedemptions rollbackDate(OffsetDateTime rollbackDate) {
    
    this.rollbackDate = rollbackDate;
    return this;
  }

   /**
   * Timestamp representing the date and tiem when the redemption rollback was created. The value is shown in the ISO 8601 format.
   * @return rollbackDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getRollbackDate() {
    return rollbackDate;
  }


  public void setRollbackDate(OffsetDateTime rollbackDate) {
    this.rollbackDate = rollbackDate;
  }


  public OrderRedemptions relatedObjectType(String relatedObjectType) {
    
    this.relatedObjectType = relatedObjectType;
    return this;
  }

   /**
   * The source of the incentive.
   * @return relatedObjectType
  **/
  @javax.annotation.Nullable
  public String getRelatedObjectType() {
    return relatedObjectType;
  }


  public void setRelatedObjectType(String relatedObjectType) {
    this.relatedObjectType = relatedObjectType;
  }


  public OrderRedemptions relatedObjectId(String relatedObjectId) {
    
    this.relatedObjectId = relatedObjectId;
    return this;
  }

   /**
   * Unique ID of the parent redemption.
   * @return relatedObjectId
  **/
  @javax.annotation.Nullable
  public String getRelatedObjectId() {
    return relatedObjectId;
  }


  public void setRelatedObjectId(String relatedObjectId) {
    this.relatedObjectId = relatedObjectId;
  }


  public OrderRedemptions relatedObjectParentId(String relatedObjectParentId) {
    
    this.relatedObjectParentId = relatedObjectParentId;
    return this;
  }

   /**
   * Represent&#39;s the campaign ID of the voucher if the redemption was based on a voucher that was part of bulk codes generated within a campaign. In case of a promotion tier, this represents the campaign ID of the promotion tier&#39;s parent campaign.
   * @return relatedObjectParentId
  **/
  @javax.annotation.Nullable
  public String getRelatedObjectParentId() {
    return relatedObjectParentId;
  }


  public void setRelatedObjectParentId(String relatedObjectParentId) {
    this.relatedObjectParentId = relatedObjectParentId;
  }


  public OrderRedemptions stacked(List<String> stacked) {
    
    this.stacked = stacked;
    return this;
  }

  public OrderRedemptions addStackedItem(String stackedItem) {
    if (this.stacked == null) {
      this.stacked = new ArrayList<>();
    }
    this.stacked.add(stackedItem);
    return this;
  }

   /**
   * Contains a list of unique IDs of child redemptions, which belong to the stacked incentives.
   * @return stacked
  **/
  @javax.annotation.Nullable
  public List<String> getStacked() {
    return stacked;
  }


  public void setStacked(List<String> stacked) {
    this.stacked = stacked;
  }


  public OrderRedemptions rollbackStacked(List<String> rollbackStacked) {
    
    this.rollbackStacked = rollbackStacked;
    return this;
  }

  public OrderRedemptions addRollbackStackedItem(String rollbackStackedItem) {
    if (this.rollbackStacked == null) {
      this.rollbackStacked = new ArrayList<>();
    }
    this.rollbackStacked.add(rollbackStackedItem);
    return this;
  }

   /**
   * Lists the rollback redemption IDs of the particular child redemptions.
   * @return rollbackStacked
  **/
  @javax.annotation.Nullable
  public List<String> getRollbackStacked() {
    return rollbackStacked;
  }


  public void setRollbackStacked(List<String> rollbackStacked) {
    this.rollbackStacked = rollbackStacked;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the OrderRedemptions instance itself
   */
  public OrderRedemptions putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderRedemptions orderRedemptions = (OrderRedemptions) o;
    return Objects.equals(this.date, orderRedemptions.date) &&
        Objects.equals(this.rollbackId, orderRedemptions.rollbackId) &&
        Objects.equals(this.rollbackDate, orderRedemptions.rollbackDate) &&
        Objects.equals(this.relatedObjectType, orderRedemptions.relatedObjectType) &&
        Objects.equals(this.relatedObjectId, orderRedemptions.relatedObjectId) &&
        Objects.equals(this.relatedObjectParentId, orderRedemptions.relatedObjectParentId) &&
        Objects.equals(this.stacked, orderRedemptions.stacked) &&
        Objects.equals(this.rollbackStacked, orderRedemptions.rollbackStacked)&&
        Objects.equals(this.additionalProperties, orderRedemptions.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(date, rollbackId, rollbackDate, relatedObjectType, relatedObjectId, relatedObjectParentId, stacked, rollbackStacked, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderRedemptions {\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    rollbackId: ").append(toIndentedString(rollbackId)).append("\n");
    sb.append("    rollbackDate: ").append(toIndentedString(rollbackDate)).append("\n");
    sb.append("    relatedObjectType: ").append(toIndentedString(relatedObjectType)).append("\n");
    sb.append("    relatedObjectId: ").append(toIndentedString(relatedObjectId)).append("\n");
    sb.append("    relatedObjectParentId: ").append(toIndentedString(relatedObjectParentId)).append("\n");
    sb.append("    stacked: ").append(toIndentedString(stacked)).append("\n");
    sb.append("    rollbackStacked: ").append(toIndentedString(rollbackStacked)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("date");
    openapiFields.add("rollback_id");
    openapiFields.add("rollback_date");
    openapiFields.add("related_object_type");
    openapiFields.add("related_object_id");
    openapiFields.add("related_object_parent_id");
    openapiFields.add("stacked");
    openapiFields.add("rollback_stacked");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderRedemptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderRedemptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderRedemptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderRedemptions.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderRedemptions>() {
           @Override
           public void write(JsonWriter out, OrderRedemptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderRedemptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             OrderRedemptions instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     return null;
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OrderRedemptions given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OrderRedemptions
  * @throws IOException if the JSON string is invalid with respect to OrderRedemptions
  */
  public static OrderRedemptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderRedemptions.class);
  }

 /**
  * Convert an instance of OrderRedemptions to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

