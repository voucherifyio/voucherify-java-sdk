/*
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.voucherify.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.voucherify.client.JSON;

/**
 * Details about the user assigned to the project.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class ManagementProjectsUsersAssignResponseBody {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LOGIN = "login";
  @SerializedName(SERIALIZED_NAME_LOGIN)
  private String login;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FIRST_NAME = "first_name";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "last_name";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_PROJECTS = "projects";
  @SerializedName(SERIALIZED_NAME_PROJECTS)
  private Map<String, String> projects;

  public static final String SERIALIZED_NAME_IS_OWNER = "is_owner";
  @SerializedName(SERIALIZED_NAME_IS_OWNER)
  private Boolean isOwner;

  public ManagementProjectsUsersAssignResponseBody() {
  }

  public ManagementProjectsUsersAssignResponseBody id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * The unique identifier of the user who has been assigned to the project.
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public ManagementProjectsUsersAssignResponseBody login(String login) {
    
    this.login = login;
    return this;
  }

   /**
   * The login data of the user who has been assigned to the project.
   * @return login
  **/
  @javax.annotation.Nullable
  public String getLogin() {
    return login;
  }


  public void setLogin(String login) {
    this.login = login;
  }


  public ManagementProjectsUsersAssignResponseBody email(String email) {
    
    this.email = email;
    return this;
  }

   /**
   * The email address of the user who has been assigned to the project.
   * @return email
  **/
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    this.email = email;
  }


  public ManagementProjectsUsersAssignResponseBody firstName(String firstName) {
    
    this.firstName = firstName;
    return this;
  }

   /**
   * The first name of the user who has been assigned to the project.
   * @return firstName
  **/
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public ManagementProjectsUsersAssignResponseBody lastName(String lastName) {
    
    this.lastName = lastName;
    return this;
  }

   /**
   * The last name of the user who has been assigned to the project.
   * @return lastName
  **/
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public ManagementProjectsUsersAssignResponseBody projects(Map<String, String> projects) {
    
    this.projects = projects;
    return this;
  }

  public ManagementProjectsUsersAssignResponseBody putProjectsItem(String key, String projectsItem) {
    if (this.projects == null) {
      this.projects = new HashMap<>();
    }
    this.projects.put(key, projectsItem);
    return this;
  }

   /**
   * Lists key-value pairs, where the key is the project to which the user is assigned. The value is the role assigned in a given project. The predefined Voucherify roles are: &#x60;ADMIN&#x60;, &#x60;USER&#x60;, &#x60;VIEWER&#x60;, &#x60;MERCHANT&#x60;, &#x60;USER_RESTRICTED&#x60; (for the Areas and Stores, an Enterprise feature).
   * @return projects
  **/
  @javax.annotation.Nullable
  public Map<String, String> getProjects() {
    return projects;
  }


  public void setProjects(Map<String, String> projects) {
    this.projects = projects;
  }


  public ManagementProjectsUsersAssignResponseBody isOwner(Boolean isOwner) {
    
    this.isOwner = isOwner;
    return this;
  }

   /**
   * Determines if the user is the owner for the organization in Voucherify.
   * @return isOwner
  **/
  @javax.annotation.Nullable
  public Boolean getIsOwner() {
    return isOwner;
  }


  public void setIsOwner(Boolean isOwner) {
    this.isOwner = isOwner;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ManagementProjectsUsersAssignResponseBody managementProjectsUsersAssignResponseBody = (ManagementProjectsUsersAssignResponseBody) o;
    return Objects.equals(this.id, managementProjectsUsersAssignResponseBody.id) &&
        Objects.equals(this.login, managementProjectsUsersAssignResponseBody.login) &&
        Objects.equals(this.email, managementProjectsUsersAssignResponseBody.email) &&
        Objects.equals(this.firstName, managementProjectsUsersAssignResponseBody.firstName) &&
        Objects.equals(this.lastName, managementProjectsUsersAssignResponseBody.lastName) &&
        Objects.equals(this.projects, managementProjectsUsersAssignResponseBody.projects) &&
        Objects.equals(this.isOwner, managementProjectsUsersAssignResponseBody.isOwner);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, login, email, firstName, lastName, projects, isOwner);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ManagementProjectsUsersAssignResponseBody {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    login: ").append(toIndentedString(login)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    projects: ").append(toIndentedString(projects)).append("\n");
    sb.append("    isOwner: ").append(toIndentedString(isOwner)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("login");
    openapiFields.add("email");
    openapiFields.add("first_name");
    openapiFields.add("last_name");
    openapiFields.add("projects");
    openapiFields.add("is_owner");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ManagementProjectsUsersAssignResponseBody.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ManagementProjectsUsersAssignResponseBody' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ManagementProjectsUsersAssignResponseBody> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ManagementProjectsUsersAssignResponseBody.class));

       return (TypeAdapter<T>) new TypeAdapter<ManagementProjectsUsersAssignResponseBody>() {
           @Override
           public void write(JsonWriter out, ManagementProjectsUsersAssignResponseBody value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ManagementProjectsUsersAssignResponseBody read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ManagementProjectsUsersAssignResponseBody given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ManagementProjectsUsersAssignResponseBody
  * @throws IOException if the JSON string is invalid with respect to ManagementProjectsUsersAssignResponseBody
  */
  public static ManagementProjectsUsersAssignResponseBody fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ManagementProjectsUsersAssignResponseBody.class);
  }

 /**
  * Convert an instance of ManagementProjectsUsersAssignResponseBody to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

