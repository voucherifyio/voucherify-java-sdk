/*
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.voucherify.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.voucherify.client.JSON;

/**
 * Request body schema for **PUT** &#x60;/management/v1/projects/{projectId}/stacking-rules/{stackingRulesId}&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class ManagementProjectsStackingRulesUpdateRequestBody {
  public static final String SERIALIZED_NAME_EXCLUSIVE_CATEGORIES = "exclusive_categories";
  @SerializedName(SERIALIZED_NAME_EXCLUSIVE_CATEGORIES)
  private List<String> exclusiveCategories;

  public static final String SERIALIZED_NAME_JOINT_CATEGORIES = "joint_categories";
  @SerializedName(SERIALIZED_NAME_JOINT_CATEGORIES)
  private List<String> jointCategories;

  public static final String SERIALIZED_NAME_REDEEMABLES_LIMIT = "redeemables_limit";
  @SerializedName(SERIALIZED_NAME_REDEEMABLES_LIMIT)
  private Integer redeemablesLimit;

  public static final String SERIALIZED_NAME_APPLICABLE_REDEEMABLES_LIMIT = "applicable_redeemables_limit";
  @SerializedName(SERIALIZED_NAME_APPLICABLE_REDEEMABLES_LIMIT)
  private Integer applicableRedeemablesLimit;

  public static final String SERIALIZED_NAME_APPLICABLE_REDEEMABLES_PER_CATEGORY_LIMIT = "applicable_redeemables_per_category_limit";
  @SerializedName(SERIALIZED_NAME_APPLICABLE_REDEEMABLES_PER_CATEGORY_LIMIT)
  private Integer applicableRedeemablesPerCategoryLimit;

  public static final String SERIALIZED_NAME_APPLICABLE_EXCLUSIVE_REDEEMABLES_LIMIT = "applicable_exclusive_redeemables_limit";
  @SerializedName(SERIALIZED_NAME_APPLICABLE_EXCLUSIVE_REDEEMABLES_LIMIT)
  private Integer applicableExclusiveRedeemablesLimit;

  public static final String SERIALIZED_NAME_APPLICABLE_EXCLUSIVE_REDEEMABLES_PER_CATEGORY_LIMIT = "applicable_exclusive_redeemables_per_category_limit";
  @SerializedName(SERIALIZED_NAME_APPLICABLE_EXCLUSIVE_REDEEMABLES_PER_CATEGORY_LIMIT)
  private Integer applicableExclusiveRedeemablesPerCategoryLimit;

  /**
   * Defines if the discounts are applied by taking into account the initial order amount or the discounted order amount.
   */
  @JsonAdapter(DiscountCalculationModeEnum.Adapter.class)
  public enum DiscountCalculationModeEnum {
    INITIAL_AMOUNT("INITIAL_AMOUNT"),
    
    DISCOUNTED_AMOUNT("DISCOUNTED_AMOUNT");

    private String value;

    DiscountCalculationModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DiscountCalculationModeEnum fromValue(String value) {
      for (DiscountCalculationModeEnum b : DiscountCalculationModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
        return null;
    }

    public static class Adapter extends TypeAdapter<DiscountCalculationModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DiscountCalculationModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DiscountCalculationModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DiscountCalculationModeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DISCOUNT_CALCULATION_MODE = "discount_calculation_mode";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_CALCULATION_MODE)
  private DiscountCalculationModeEnum discountCalculationMode;

  public static final String SERIALIZED_NAME_INITIAL_AMOUNT_MODE_CATEGORIES = "initial_amount_mode_categories";
  @SerializedName(SERIALIZED_NAME_INITIAL_AMOUNT_MODE_CATEGORIES)
  private List<String> initialAmountModeCategories;

  public static final String SERIALIZED_NAME_DISCOUNTED_AMOUNT_MODE_CATEGORIES = "discounted_amount_mode_categories";
  @SerializedName(SERIALIZED_NAME_DISCOUNTED_AMOUNT_MODE_CATEGORIES)
  private List<String> discountedAmountModeCategories;

  /**
   * Defines the application mode for redeemables. &#x60;\&quot;ALL\&quot;&#x60; means that all redeemables must be validated for the redemption to be successful. &#x60;\&quot;PARTIAL\&quot;&#x60; means that only those redeemables that can be validated will be redeemed. The redeemables that fail validaton will be skipped.
   */
  @JsonAdapter(RedeemablesApplicationModeEnum.Adapter.class)
  public enum RedeemablesApplicationModeEnum {
    ALL("ALL"),
    
    PARTIAL("PARTIAL");

    private String value;

    RedeemablesApplicationModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RedeemablesApplicationModeEnum fromValue(String value) {
      for (RedeemablesApplicationModeEnum b : RedeemablesApplicationModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
        return null;
    }

    public static class Adapter extends TypeAdapter<RedeemablesApplicationModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RedeemablesApplicationModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RedeemablesApplicationModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RedeemablesApplicationModeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REDEEMABLES_APPLICATION_MODE = "redeemables_application_mode";
  @SerializedName(SERIALIZED_NAME_REDEEMABLES_APPLICATION_MODE)
  private RedeemablesApplicationModeEnum redeemablesApplicationMode;

  /**
   * Defines redeemables sorting rule. &#x60;CATEGORY_HIERARCHY&#x60; means that redeemables are applied oaccording to the category priority. &#x60;REQUESTED_ORDER&#x60; means that redeemables are applied in the sequence provided in the request.
   */
  @JsonAdapter(RedeemablesSortingRuleEnum.Adapter.class)
  public enum RedeemablesSortingRuleEnum {
    CATEGORY_HIERARCHY("CATEGORY_HIERARCHY"),
    
    REQUESTED_ORDER("REQUESTED_ORDER");

    private String value;

    RedeemablesSortingRuleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RedeemablesSortingRuleEnum fromValue(String value) {
      for (RedeemablesSortingRuleEnum b : RedeemablesSortingRuleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
        return null;
    }

    public static class Adapter extends TypeAdapter<RedeemablesSortingRuleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RedeemablesSortingRuleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RedeemablesSortingRuleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RedeemablesSortingRuleEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REDEEMABLES_SORTING_RULE = "redeemables_sorting_rule";
  @SerializedName(SERIALIZED_NAME_REDEEMABLES_SORTING_RULE)
  private RedeemablesSortingRuleEnum redeemablesSortingRule;

  /**
   * Defines redeemables products application mode. &#x60;STACK&#x60; means that multiple discounts can be applied to a product. &#x60;ONCE&#x60; means that only one discount can be applied to the same product.
   */
  @JsonAdapter(RedeemablesProductsApplicationModeEnum.Adapter.class)
  public enum RedeemablesProductsApplicationModeEnum {
    STACK("STACK"),
    
    ONCE("ONCE");

    private String value;

    RedeemablesProductsApplicationModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RedeemablesProductsApplicationModeEnum fromValue(String value) {
      for (RedeemablesProductsApplicationModeEnum b : RedeemablesProductsApplicationModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
        return null;
    }

    public static class Adapter extends TypeAdapter<RedeemablesProductsApplicationModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RedeemablesProductsApplicationModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RedeemablesProductsApplicationModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RedeemablesProductsApplicationModeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REDEEMABLES_PRODUCTS_APPLICATION_MODE = "redeemables_products_application_mode";
  @SerializedName(SERIALIZED_NAME_REDEEMABLES_PRODUCTS_APPLICATION_MODE)
  private RedeemablesProductsApplicationModeEnum redeemablesProductsApplicationMode;

  /**
   * Defines redeemables no effect rule. &#x60;REDEEM_ANYWAY&#x60; means that the redeemable will be redeemed regardless of any restrictions or conditions in place. &#x60;SKIP&#x60; means that the redeemable will be processed only when an applicable effect is calculated.
   */
  @JsonAdapter(RedeemablesNoEffectRuleEnum.Adapter.class)
  public enum RedeemablesNoEffectRuleEnum {
    REDEEM_ANYWAY("REDEEM_ANYWAY"),
    
    SKIP("SKIP");

    private String value;

    RedeemablesNoEffectRuleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RedeemablesNoEffectRuleEnum fromValue(String value) {
      for (RedeemablesNoEffectRuleEnum b : RedeemablesNoEffectRuleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
        return null;
    }

    public static class Adapter extends TypeAdapter<RedeemablesNoEffectRuleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RedeemablesNoEffectRuleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RedeemablesNoEffectRuleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RedeemablesNoEffectRuleEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REDEEMABLES_NO_EFFECT_RULE = "redeemables_no_effect_rule";
  @SerializedName(SERIALIZED_NAME_REDEEMABLES_NO_EFFECT_RULE)
  private RedeemablesNoEffectRuleEnum redeemablesNoEffectRule;

  public static final String SERIALIZED_NAME_NO_EFFECT_SKIP_CATEGORIES = "no_effect_skip_categories";
  @SerializedName(SERIALIZED_NAME_NO_EFFECT_SKIP_CATEGORIES)
  private List<String> noEffectSkipCategories;

  public static final String SERIALIZED_NAME_NO_EFFECT_REDEEM_ANYWAY_CATEGORIES = "no_effect_redeem_anyway_categories";
  @SerializedName(SERIALIZED_NAME_NO_EFFECT_REDEEM_ANYWAY_CATEGORIES)
  private List<String> noEffectRedeemAnywayCategories;

  /**
   * Defines the rollback mode for the order. &#x60;WITH_ORDER&#x60; is a default setting. The redemption is rolled back together with the data about the order, including related discount values. &#x60;WITHOUT_ORDER&#x60; allows rolling the redemption back without affecting order data, including the applied discount values.
   */
  @JsonAdapter(RedeemablesRollbackOrderModeEnum.Adapter.class)
  public enum RedeemablesRollbackOrderModeEnum {
    WITH_ORDER("WITH_ORDER"),
    
    WITHOUT_ORDER("WITHOUT_ORDER");

    private String value;

    RedeemablesRollbackOrderModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RedeemablesRollbackOrderModeEnum fromValue(String value) {
      for (RedeemablesRollbackOrderModeEnum b : RedeemablesRollbackOrderModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
        return null;
    }

    public static class Adapter extends TypeAdapter<RedeemablesRollbackOrderModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RedeemablesRollbackOrderModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RedeemablesRollbackOrderModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RedeemablesRollbackOrderModeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REDEEMABLES_ROLLBACK_ORDER_MODE = "redeemables_rollback_order_mode";
  @SerializedName(SERIALIZED_NAME_REDEEMABLES_ROLLBACK_ORDER_MODE)
  private RedeemablesRollbackOrderModeEnum redeemablesRollbackOrderMode;

  public ManagementProjectsStackingRulesUpdateRequestBody() {
  }

  public ManagementProjectsStackingRulesUpdateRequestBody exclusiveCategories(List<String> exclusiveCategories) {
    
    this.exclusiveCategories = exclusiveCategories;
    return this;
  }

  public ManagementProjectsStackingRulesUpdateRequestBody addExclusiveCategoriesItem(String exclusiveCategoriesItem) {
    if (this.exclusiveCategories == null) {
      this.exclusiveCategories = new ArrayList<>();
    }
    this.exclusiveCategories.add(exclusiveCategoriesItem);
    return this;
  }

   /**
   * Lists the IDs of exclusive categories. A redeemable from a campaign with an exclusive category is the only redeemable to be redeemed when applied with redeemables from other campaigns unless these campaigns are exclusive or joint.
   * @return exclusiveCategories
  **/
  @javax.annotation.Nullable
  public List<String> getExclusiveCategories() {
    return exclusiveCategories;
  }


  public void setExclusiveCategories(List<String> exclusiveCategories) {
    this.exclusiveCategories = exclusiveCategories;
  }


  public ManagementProjectsStackingRulesUpdateRequestBody jointCategories(List<String> jointCategories) {
    
    this.jointCategories = jointCategories;
    return this;
  }

  public ManagementProjectsStackingRulesUpdateRequestBody addJointCategoriesItem(String jointCategoriesItem) {
    if (this.jointCategories == null) {
      this.jointCategories = new ArrayList<>();
    }
    this.jointCategories.add(jointCategoriesItem);
    return this;
  }

   /**
   * Lists the IDs of the joint categories. A campaign with a joint category is always applied regardless of the exclusivity of other campaigns.
   * @return jointCategories
  **/
  @javax.annotation.Nullable
  public List<String> getJointCategories() {
    return jointCategories;
  }


  public void setJointCategories(List<String> jointCategories) {
    this.jointCategories = jointCategories;
  }


  public ManagementProjectsStackingRulesUpdateRequestBody redeemablesLimit(Integer redeemablesLimit) {
    
    this.redeemablesLimit = redeemablesLimit;
    return this;
  }

   /**
   * Defines how many redeemables can be sent in one request. Note: more redeemables means more processing time.
   * minimum: 1
   * maximum: 30
   * @return redeemablesLimit
  **/
  @javax.annotation.Nullable
  public Integer getRedeemablesLimit() {
    return redeemablesLimit;
  }


  public void setRedeemablesLimit(Integer redeemablesLimit) {
    this.redeemablesLimit = redeemablesLimit;
  }


  public ManagementProjectsStackingRulesUpdateRequestBody applicableRedeemablesLimit(Integer applicableRedeemablesLimit) {
    
    this.applicableRedeemablesLimit = applicableRedeemablesLimit;
    return this;
  }

   /**
   * Defines how many redeemables can be applied in one request. The number must be less than or equal to &#x60;redeemables_limit&#x60;. For example, a user can select 30 discounts but only 5 will be applied to the order and the remaining will be &#x60;SKIPPED&#x60; according to the &#x60;redeemables_sorting_rule&#x60;.
   * minimum: 1
   * maximum: 30
   * @return applicableRedeemablesLimit
  **/
  @javax.annotation.Nullable
  public Integer getApplicableRedeemablesLimit() {
    return applicableRedeemablesLimit;
  }


  public void setApplicableRedeemablesLimit(Integer applicableRedeemablesLimit) {
    this.applicableRedeemablesLimit = applicableRedeemablesLimit;
  }


  public ManagementProjectsStackingRulesUpdateRequestBody applicableRedeemablesPerCategoryLimit(Integer applicableRedeemablesPerCategoryLimit) {
    
    this.applicableRedeemablesPerCategoryLimit = applicableRedeemablesPerCategoryLimit;
    return this;
  }

   /**
   * Defines how many redeemables with the same category can be applied in one request. The number must be less than or equal to &#x60;applicable_redeemables_limit&#x60;. The ones above the limit will be &#x60;SKIPPED&#x60; according to the &#x60;redeemables_sorting_rule&#x60;.
   * minimum: 1
   * maximum: 30
   * @return applicableRedeemablesPerCategoryLimit
  **/
  @javax.annotation.Nullable
  public Integer getApplicableRedeemablesPerCategoryLimit() {
    return applicableRedeemablesPerCategoryLimit;
  }


  public void setApplicableRedeemablesPerCategoryLimit(Integer applicableRedeemablesPerCategoryLimit) {
    this.applicableRedeemablesPerCategoryLimit = applicableRedeemablesPerCategoryLimit;
  }


  public ManagementProjectsStackingRulesUpdateRequestBody applicableExclusiveRedeemablesLimit(Integer applicableExclusiveRedeemablesLimit) {
    
    this.applicableExclusiveRedeemablesLimit = applicableExclusiveRedeemablesLimit;
    return this;
  }

   /**
   * Defines how many redeemables with an assigned exclusive category can be applied in one request. The ones above the limit will be &#x60;SKIPPED&#x60; according to the &#x60;redeemables_sorting_rule&#x60;.
   * minimum: 1
   * maximum: 5
   * @return applicableExclusiveRedeemablesLimit
  **/
  @javax.annotation.Nullable
  public Integer getApplicableExclusiveRedeemablesLimit() {
    return applicableExclusiveRedeemablesLimit;
  }


  public void setApplicableExclusiveRedeemablesLimit(Integer applicableExclusiveRedeemablesLimit) {
    this.applicableExclusiveRedeemablesLimit = applicableExclusiveRedeemablesLimit;
  }


  public ManagementProjectsStackingRulesUpdateRequestBody applicableExclusiveRedeemablesPerCategoryLimit(Integer applicableExclusiveRedeemablesPerCategoryLimit) {
    
    this.applicableExclusiveRedeemablesPerCategoryLimit = applicableExclusiveRedeemablesPerCategoryLimit;
    return this;
  }

   /**
   * Defines how many redeemables with an assigned exclusive category can be applied in one request. The ones above the limit will be &#x60;SKIPPED&#x60; according to the &#x60;redeemables_sorting_rule&#x60;. The number must be less than or equal to &#x60;applicable_exclusive_redeemables_limit&#x60;.
   * minimum: 1
   * maximum: 30
   * @return applicableExclusiveRedeemablesPerCategoryLimit
  **/
  @javax.annotation.Nullable
  public Integer getApplicableExclusiveRedeemablesPerCategoryLimit() {
    return applicableExclusiveRedeemablesPerCategoryLimit;
  }


  public void setApplicableExclusiveRedeemablesPerCategoryLimit(Integer applicableExclusiveRedeemablesPerCategoryLimit) {
    this.applicableExclusiveRedeemablesPerCategoryLimit = applicableExclusiveRedeemablesPerCategoryLimit;
  }


  public ManagementProjectsStackingRulesUpdateRequestBody discountCalculationMode(DiscountCalculationModeEnum discountCalculationMode) {
    
    this.discountCalculationMode = discountCalculationMode;
    return this;
  }

   /**
   * Defines if the discounts are applied by taking into account the initial order amount or the discounted order amount.
   * @return discountCalculationMode
  **/
  @javax.annotation.Nullable
  public DiscountCalculationModeEnum getDiscountCalculationMode() {
    return discountCalculationMode;
  }


  public void setDiscountCalculationMode(DiscountCalculationModeEnum discountCalculationMode) {
    this.discountCalculationMode = discountCalculationMode;
  }


  public ManagementProjectsStackingRulesUpdateRequestBody initialAmountModeCategories(List<String> initialAmountModeCategories) {
    
    this.initialAmountModeCategories = initialAmountModeCategories;
    return this;
  }

  public ManagementProjectsStackingRulesUpdateRequestBody addInitialAmountModeCategoriesItem(String initialAmountModeCategoriesItem) {
    if (this.initialAmountModeCategories == null) {
      this.initialAmountModeCategories = new ArrayList<>();
    }
    this.initialAmountModeCategories.add(initialAmountModeCategoriesItem);
    return this;
  }

   /**
   * Lists the IDs of the categories that apply a discount based on the initial amount.
   * @return initialAmountModeCategories
  **/
  @javax.annotation.Nullable
  public List<String> getInitialAmountModeCategories() {
    return initialAmountModeCategories;
  }


  public void setInitialAmountModeCategories(List<String> initialAmountModeCategories) {
    this.initialAmountModeCategories = initialAmountModeCategories;
  }


  public ManagementProjectsStackingRulesUpdateRequestBody discountedAmountModeCategories(List<String> discountedAmountModeCategories) {
    
    this.discountedAmountModeCategories = discountedAmountModeCategories;
    return this;
  }

  public ManagementProjectsStackingRulesUpdateRequestBody addDiscountedAmountModeCategoriesItem(String discountedAmountModeCategoriesItem) {
    if (this.discountedAmountModeCategories == null) {
      this.discountedAmountModeCategories = new ArrayList<>();
    }
    this.discountedAmountModeCategories.add(discountedAmountModeCategoriesItem);
    return this;
  }

   /**
   * Lists the IDs of the categories that apply a discount based on the discounted amount.
   * @return discountedAmountModeCategories
  **/
  @javax.annotation.Nullable
  public List<String> getDiscountedAmountModeCategories() {
    return discountedAmountModeCategories;
  }


  public void setDiscountedAmountModeCategories(List<String> discountedAmountModeCategories) {
    this.discountedAmountModeCategories = discountedAmountModeCategories;
  }


  public ManagementProjectsStackingRulesUpdateRequestBody redeemablesApplicationMode(RedeemablesApplicationModeEnum redeemablesApplicationMode) {
    
    this.redeemablesApplicationMode = redeemablesApplicationMode;
    return this;
  }

   /**
   * Defines the application mode for redeemables. &#x60;\&quot;ALL\&quot;&#x60; means that all redeemables must be validated for the redemption to be successful. &#x60;\&quot;PARTIAL\&quot;&#x60; means that only those redeemables that can be validated will be redeemed. The redeemables that fail validaton will be skipped.
   * @return redeemablesApplicationMode
  **/
  @javax.annotation.Nullable
  public RedeemablesApplicationModeEnum getRedeemablesApplicationMode() {
    return redeemablesApplicationMode;
  }


  public void setRedeemablesApplicationMode(RedeemablesApplicationModeEnum redeemablesApplicationMode) {
    this.redeemablesApplicationMode = redeemablesApplicationMode;
  }


  public ManagementProjectsStackingRulesUpdateRequestBody redeemablesSortingRule(RedeemablesSortingRuleEnum redeemablesSortingRule) {
    
    this.redeemablesSortingRule = redeemablesSortingRule;
    return this;
  }

   /**
   * Defines redeemables sorting rule. &#x60;CATEGORY_HIERARCHY&#x60; means that redeemables are applied oaccording to the category priority. &#x60;REQUESTED_ORDER&#x60; means that redeemables are applied in the sequence provided in the request.
   * @return redeemablesSortingRule
  **/
  @javax.annotation.Nullable
  public RedeemablesSortingRuleEnum getRedeemablesSortingRule() {
    return redeemablesSortingRule;
  }


  public void setRedeemablesSortingRule(RedeemablesSortingRuleEnum redeemablesSortingRule) {
    this.redeemablesSortingRule = redeemablesSortingRule;
  }


  public ManagementProjectsStackingRulesUpdateRequestBody redeemablesProductsApplicationMode(RedeemablesProductsApplicationModeEnum redeemablesProductsApplicationMode) {
    
    this.redeemablesProductsApplicationMode = redeemablesProductsApplicationMode;
    return this;
  }

   /**
   * Defines redeemables products application mode. &#x60;STACK&#x60; means that multiple discounts can be applied to a product. &#x60;ONCE&#x60; means that only one discount can be applied to the same product.
   * @return redeemablesProductsApplicationMode
  **/
  @javax.annotation.Nullable
  public RedeemablesProductsApplicationModeEnum getRedeemablesProductsApplicationMode() {
    return redeemablesProductsApplicationMode;
  }


  public void setRedeemablesProductsApplicationMode(RedeemablesProductsApplicationModeEnum redeemablesProductsApplicationMode) {
    this.redeemablesProductsApplicationMode = redeemablesProductsApplicationMode;
  }


  public ManagementProjectsStackingRulesUpdateRequestBody redeemablesNoEffectRule(RedeemablesNoEffectRuleEnum redeemablesNoEffectRule) {
    
    this.redeemablesNoEffectRule = redeemablesNoEffectRule;
    return this;
  }

   /**
   * Defines redeemables no effect rule. &#x60;REDEEM_ANYWAY&#x60; means that the redeemable will be redeemed regardless of any restrictions or conditions in place. &#x60;SKIP&#x60; means that the redeemable will be processed only when an applicable effect is calculated.
   * @return redeemablesNoEffectRule
  **/
  @javax.annotation.Nullable
  public RedeemablesNoEffectRuleEnum getRedeemablesNoEffectRule() {
    return redeemablesNoEffectRule;
  }


  public void setRedeemablesNoEffectRule(RedeemablesNoEffectRuleEnum redeemablesNoEffectRule) {
    this.redeemablesNoEffectRule = redeemablesNoEffectRule;
  }


  public ManagementProjectsStackingRulesUpdateRequestBody noEffectSkipCategories(List<String> noEffectSkipCategories) {
    
    this.noEffectSkipCategories = noEffectSkipCategories;
    return this;
  }

  public ManagementProjectsStackingRulesUpdateRequestBody addNoEffectSkipCategoriesItem(String noEffectSkipCategoriesItem) {
    if (this.noEffectSkipCategories == null) {
      this.noEffectSkipCategories = new ArrayList<>();
    }
    this.noEffectSkipCategories.add(noEffectSkipCategoriesItem);
    return this;
  }

   /**
   * Lists category IDs. Redeemables with a given category are skipped even if the &#x60;redeemables_no_effect_rule&#x60; is set to &#x60;REDEEM_ANYWAY&#x60;. Category IDs can&#39;t overlap with the IDs in &#x60;no_effect_redeem_anyway_categories&#x60;.
   * @return noEffectSkipCategories
  **/
  @javax.annotation.Nullable
  public List<String> getNoEffectSkipCategories() {
    return noEffectSkipCategories;
  }


  public void setNoEffectSkipCategories(List<String> noEffectSkipCategories) {
    this.noEffectSkipCategories = noEffectSkipCategories;
  }


  public ManagementProjectsStackingRulesUpdateRequestBody noEffectRedeemAnywayCategories(List<String> noEffectRedeemAnywayCategories) {
    
    this.noEffectRedeemAnywayCategories = noEffectRedeemAnywayCategories;
    return this;
  }

  public ManagementProjectsStackingRulesUpdateRequestBody addNoEffectRedeemAnywayCategoriesItem(String noEffectRedeemAnywayCategoriesItem) {
    if (this.noEffectRedeemAnywayCategories == null) {
      this.noEffectRedeemAnywayCategories = new ArrayList<>();
    }
    this.noEffectRedeemAnywayCategories.add(noEffectRedeemAnywayCategoriesItem);
    return this;
  }

   /**
   * Lists category IDs. Redeemables with a given category are redeemed anyway even if the &#x60;redeemables_no_effect_rule&#x60; is set to &#x60;SKIP&#x60;. Category IDs can&#39;t overlap with the IDs in &#x60;no_effect_skip_categories&#x60;.
   * @return noEffectRedeemAnywayCategories
  **/
  @javax.annotation.Nullable
  public List<String> getNoEffectRedeemAnywayCategories() {
    return noEffectRedeemAnywayCategories;
  }


  public void setNoEffectRedeemAnywayCategories(List<String> noEffectRedeemAnywayCategories) {
    this.noEffectRedeemAnywayCategories = noEffectRedeemAnywayCategories;
  }


  public ManagementProjectsStackingRulesUpdateRequestBody redeemablesRollbackOrderMode(RedeemablesRollbackOrderModeEnum redeemablesRollbackOrderMode) {
    
    this.redeemablesRollbackOrderMode = redeemablesRollbackOrderMode;
    return this;
  }

   /**
   * Defines the rollback mode for the order. &#x60;WITH_ORDER&#x60; is a default setting. The redemption is rolled back together with the data about the order, including related discount values. &#x60;WITHOUT_ORDER&#x60; allows rolling the redemption back without affecting order data, including the applied discount values.
   * @return redeemablesRollbackOrderMode
  **/
  @javax.annotation.Nullable
  public RedeemablesRollbackOrderModeEnum getRedeemablesRollbackOrderMode() {
    return redeemablesRollbackOrderMode;
  }


  public void setRedeemablesRollbackOrderMode(RedeemablesRollbackOrderModeEnum redeemablesRollbackOrderMode) {
    this.redeemablesRollbackOrderMode = redeemablesRollbackOrderMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ManagementProjectsStackingRulesUpdateRequestBody managementProjectsStackingRulesUpdateRequestBody = (ManagementProjectsStackingRulesUpdateRequestBody) o;
    return Objects.equals(this.exclusiveCategories, managementProjectsStackingRulesUpdateRequestBody.exclusiveCategories) &&
        Objects.equals(this.jointCategories, managementProjectsStackingRulesUpdateRequestBody.jointCategories) &&
        Objects.equals(this.redeemablesLimit, managementProjectsStackingRulesUpdateRequestBody.redeemablesLimit) &&
        Objects.equals(this.applicableRedeemablesLimit, managementProjectsStackingRulesUpdateRequestBody.applicableRedeemablesLimit) &&
        Objects.equals(this.applicableRedeemablesPerCategoryLimit, managementProjectsStackingRulesUpdateRequestBody.applicableRedeemablesPerCategoryLimit) &&
        Objects.equals(this.applicableExclusiveRedeemablesLimit, managementProjectsStackingRulesUpdateRequestBody.applicableExclusiveRedeemablesLimit) &&
        Objects.equals(this.applicableExclusiveRedeemablesPerCategoryLimit, managementProjectsStackingRulesUpdateRequestBody.applicableExclusiveRedeemablesPerCategoryLimit) &&
        Objects.equals(this.discountCalculationMode, managementProjectsStackingRulesUpdateRequestBody.discountCalculationMode) &&
        Objects.equals(this.initialAmountModeCategories, managementProjectsStackingRulesUpdateRequestBody.initialAmountModeCategories) &&
        Objects.equals(this.discountedAmountModeCategories, managementProjectsStackingRulesUpdateRequestBody.discountedAmountModeCategories) &&
        Objects.equals(this.redeemablesApplicationMode, managementProjectsStackingRulesUpdateRequestBody.redeemablesApplicationMode) &&
        Objects.equals(this.redeemablesSortingRule, managementProjectsStackingRulesUpdateRequestBody.redeemablesSortingRule) &&
        Objects.equals(this.redeemablesProductsApplicationMode, managementProjectsStackingRulesUpdateRequestBody.redeemablesProductsApplicationMode) &&
        Objects.equals(this.redeemablesNoEffectRule, managementProjectsStackingRulesUpdateRequestBody.redeemablesNoEffectRule) &&
        Objects.equals(this.noEffectSkipCategories, managementProjectsStackingRulesUpdateRequestBody.noEffectSkipCategories) &&
        Objects.equals(this.noEffectRedeemAnywayCategories, managementProjectsStackingRulesUpdateRequestBody.noEffectRedeemAnywayCategories) &&
        Objects.equals(this.redeemablesRollbackOrderMode, managementProjectsStackingRulesUpdateRequestBody.redeemablesRollbackOrderMode);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(exclusiveCategories, jointCategories, redeemablesLimit, applicableRedeemablesLimit, applicableRedeemablesPerCategoryLimit, applicableExclusiveRedeemablesLimit, applicableExclusiveRedeemablesPerCategoryLimit, discountCalculationMode, initialAmountModeCategories, discountedAmountModeCategories, redeemablesApplicationMode, redeemablesSortingRule, redeemablesProductsApplicationMode, redeemablesNoEffectRule, noEffectSkipCategories, noEffectRedeemAnywayCategories, redeemablesRollbackOrderMode);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ManagementProjectsStackingRulesUpdateRequestBody {\n");
    sb.append("    exclusiveCategories: ").append(toIndentedString(exclusiveCategories)).append("\n");
    sb.append("    jointCategories: ").append(toIndentedString(jointCategories)).append("\n");
    sb.append("    redeemablesLimit: ").append(toIndentedString(redeemablesLimit)).append("\n");
    sb.append("    applicableRedeemablesLimit: ").append(toIndentedString(applicableRedeemablesLimit)).append("\n");
    sb.append("    applicableRedeemablesPerCategoryLimit: ").append(toIndentedString(applicableRedeemablesPerCategoryLimit)).append("\n");
    sb.append("    applicableExclusiveRedeemablesLimit: ").append(toIndentedString(applicableExclusiveRedeemablesLimit)).append("\n");
    sb.append("    applicableExclusiveRedeemablesPerCategoryLimit: ").append(toIndentedString(applicableExclusiveRedeemablesPerCategoryLimit)).append("\n");
    sb.append("    discountCalculationMode: ").append(toIndentedString(discountCalculationMode)).append("\n");
    sb.append("    initialAmountModeCategories: ").append(toIndentedString(initialAmountModeCategories)).append("\n");
    sb.append("    discountedAmountModeCategories: ").append(toIndentedString(discountedAmountModeCategories)).append("\n");
    sb.append("    redeemablesApplicationMode: ").append(toIndentedString(redeemablesApplicationMode)).append("\n");
    sb.append("    redeemablesSortingRule: ").append(toIndentedString(redeemablesSortingRule)).append("\n");
    sb.append("    redeemablesProductsApplicationMode: ").append(toIndentedString(redeemablesProductsApplicationMode)).append("\n");
    sb.append("    redeemablesNoEffectRule: ").append(toIndentedString(redeemablesNoEffectRule)).append("\n");
    sb.append("    noEffectSkipCategories: ").append(toIndentedString(noEffectSkipCategories)).append("\n");
    sb.append("    noEffectRedeemAnywayCategories: ").append(toIndentedString(noEffectRedeemAnywayCategories)).append("\n");
    sb.append("    redeemablesRollbackOrderMode: ").append(toIndentedString(redeemablesRollbackOrderMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("exclusive_categories");
    openapiFields.add("joint_categories");
    openapiFields.add("redeemables_limit");
    openapiFields.add("applicable_redeemables_limit");
    openapiFields.add("applicable_redeemables_per_category_limit");
    openapiFields.add("applicable_exclusive_redeemables_limit");
    openapiFields.add("applicable_exclusive_redeemables_per_category_limit");
    openapiFields.add("discount_calculation_mode");
    openapiFields.add("initial_amount_mode_categories");
    openapiFields.add("discounted_amount_mode_categories");
    openapiFields.add("redeemables_application_mode");
    openapiFields.add("redeemables_sorting_rule");
    openapiFields.add("redeemables_products_application_mode");
    openapiFields.add("redeemables_no_effect_rule");
    openapiFields.add("no_effect_skip_categories");
    openapiFields.add("no_effect_redeem_anyway_categories");
    openapiFields.add("redeemables_rollback_order_mode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ManagementProjectsStackingRulesUpdateRequestBody.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ManagementProjectsStackingRulesUpdateRequestBody' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ManagementProjectsStackingRulesUpdateRequestBody> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ManagementProjectsStackingRulesUpdateRequestBody.class));

       return (TypeAdapter<T>) new TypeAdapter<ManagementProjectsStackingRulesUpdateRequestBody>() {
           @Override
           public void write(JsonWriter out, ManagementProjectsStackingRulesUpdateRequestBody value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ManagementProjectsStackingRulesUpdateRequestBody read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ManagementProjectsStackingRulesUpdateRequestBody given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ManagementProjectsStackingRulesUpdateRequestBody
  * @throws IOException if the JSON string is invalid with respect to ManagementProjectsStackingRulesUpdateRequestBody
  */
  public static ManagementProjectsStackingRulesUpdateRequestBody fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ManagementProjectsStackingRulesUpdateRequestBody.class);
  }

 /**
  * Convert an instance of ManagementProjectsStackingRulesUpdateRequestBody to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

