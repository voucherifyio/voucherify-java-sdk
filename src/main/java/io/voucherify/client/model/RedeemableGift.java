/*
 * Voucherify API
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.voucherify.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonNull;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.voucherify.client.JSON;

/**
 * Contains current gift card balance information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")

public class RedeemableGift {
  public static final String SERIALIZED_NAME_BALANCE = "balance";
  @SerializedName(SERIALIZED_NAME_BALANCE)
  private BigDecimal balance;
    private boolean balanceIsSet = false;

  public static final String SERIALIZED_NAME_CREDITS = "credits";
  @SerializedName(SERIALIZED_NAME_CREDITS)
  private BigDecimal credits;
    private boolean creditsIsSet = false;

  public static final String SERIALIZED_NAME_LOCKED_CREDITS = "locked_credits";
  @SerializedName(SERIALIZED_NAME_LOCKED_CREDITS)
  private BigDecimal lockedCredits;
    private boolean lockedCreditsIsSet = false;

  public RedeemableGift() {
  }

  public RedeemableGift balance(BigDecimal balance) {
    
    this.balance = balance;
    return this;
  }

   /**
   * Available funds. The value is multiplied by 100 to represent 2 decimal places. For example &#x60;10000 cents&#x60; for &#x60;$100.00&#x60;.
   * @return balance
  **/
  @javax.annotation.Nullable
  public BigDecimal getBalance() {
    return balance;
  }


  public void setBalance(BigDecimal balance) {
    this.balance = balance;
    this.balanceIsSet = true;
  }
  public boolean isBalanceSet() {
    return balanceIsSet;
  }


  public RedeemableGift credits(BigDecimal credits) {
    
    this.credits = credits;
    return this;
  }

   /**
   * The number of credits that the user wants to use from the gift card to fulfil the order. The value of credits cannot be higher than the current balance on the gift card. If the user gives more points than he has on the gift card, the application will return an error code in response. The value is multiplied by 100 to represent 2 decimal places. For example &#x60;10000 cents&#x60; for &#x60;$100.00&#x60;.
   * @return credits
  **/
  @javax.annotation.Nullable
  public BigDecimal getCredits() {
    return credits;
  }


  public void setCredits(BigDecimal credits) {
    this.credits = credits;
    this.creditsIsSet = true;
  }
  public boolean isCreditsSet() {
    return creditsIsSet;
  }


  public RedeemableGift lockedCredits(BigDecimal lockedCredits) {
    
    this.lockedCredits = lockedCredits;
    return this;
  }

   /**
   * The number of credits that are locked under a validation session. This is returned if the qualification request includes &#x60;session.type: LOCK&#x60; parameter in the body. The value is multiplied by 100 to represent 2 decimal places. For example &#x60;10000&#x60; for &#x60;$100.00&#x60;. Returns &#x60;0&#x60; if there aren&#39;t any active validation sessions for the gift card.
   * @return lockedCredits
  **/
  @javax.annotation.Nullable
  public BigDecimal getLockedCredits() {
    return lockedCredits;
  }


  public void setLockedCredits(BigDecimal lockedCredits) {
    this.lockedCredits = lockedCredits;
    this.lockedCreditsIsSet = true;
  }
  public boolean isLockedCreditsSet() {
    return lockedCreditsIsSet;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RedeemableGift redeemableGift = (RedeemableGift) o;
    return Objects.equals(this.balance, redeemableGift.balance) &&
        Objects.equals(this.credits, redeemableGift.credits) &&
        Objects.equals(this.lockedCredits, redeemableGift.lockedCredits);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(balance, credits, lockedCredits);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RedeemableGift {\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    credits: ").append(toIndentedString(credits)).append("\n");
    sb.append("    lockedCredits: ").append(toIndentedString(lockedCredits)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("balance");
    openapiFields.add("credits");
    openapiFields.add("locked_credits");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RedeemableGift.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RedeemableGift' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RedeemableGift> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RedeemableGift.class));

       return (TypeAdapter<T>) new TypeAdapter<RedeemableGift>() {
           @Override
           public void write(JsonWriter out, RedeemableGift value) throws IOException {

            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();

              // 1. Strip all nulls and internal "isSet" markers
              obj.entrySet().removeIf(entry -> entry.getValue().isJsonNull() || entry.getKey().endsWith("IsSet"));

              // 2. Add back explicitly set nulls using reflection
              for (Field field : RedeemableGift.class.getDeclaredFields()) {
                String fieldName = field.getName();
                if (fieldName.endsWith("IsSet")) continue;

                try {
                  Field isSetField = RedeemableGift.class.getDeclaredField(fieldName + "IsSet");
                  isSetField.setAccessible(true);
                  boolean isSet = (boolean) isSetField.get(value);

                  field.setAccessible(true);
                  Object fieldValue = field.get(value);

                  if (isSet && fieldValue == null) {
                    // convert camelCase to snake_case (OpenAPI property names are snake_case)
                    String jsonName = fieldName.replaceAll("([a-z])([A-Z]+)", "$1_$2").toLowerCase();
                    obj.add(jsonName, JsonNull.INSTANCE);
                  }
                } catch (NoSuchFieldException ignored) {
                  // no isSet marker â†’ skip
                } catch (IllegalAccessException e) {
                  throw new RuntimeException(e);
                }
              }

             elementAdapter.write(out, obj);
           }

           @Override
           public RedeemableGift read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RedeemableGift given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RedeemableGift
  * @throws IOException if the JSON string is invalid with respect to RedeemableGift
  */
  public static RedeemableGift fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RedeemableGift.class);
  }

 /**
  * Convert an instance of RedeemableGift to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

